
USB_MSC_FTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800a134  0800a134  0000b134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3f0  0800a3f0  0000c158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3f0  0800a3f0  0000b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f8  0800a3f8  0000c158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3fc  0800a3fc  0000b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  0800a400  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000195e4  20000158  0800a558  0000c158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001973c  0800a558  0000c73c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bf6  00000000  00000000  0000c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af3  00000000  00000000  0001fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00023878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf2  00000000  00000000  00024880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7f4  00000000  00000000  00025472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001727f  00000000  00000000  0003fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9e4  00000000  00000000  00056ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e38c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000e390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a11c 	.word	0x0800a11c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	0800a11c 	.word	0x0800a11c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <FTL_Init>:
 * Page Mapping Table : LPN -> PPN(block:page)
 * ------------------------
 */
static PPN_t page_map[FTL_LPN_MAX];

void FTL_Init(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < FTL_LPN_MAX; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	e00f      	b.n	80005d8 <FTL_Init+0x2c>
		page_map[i].block = 0xFFFF;
 80005b8:	4a0c      	ldr	r2, [pc, #48]	@ (80005ec <FTL_Init+0x40>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005c0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		page_map[i].page = 0xFFFF;
 80005c4:	4a09      	ldr	r2, [pc, #36]	@ (80005ec <FTL_Init+0x40>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005d0:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < FTL_LPN_MAX; i++) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2bbf      	cmp	r3, #191	@ 0xbf
 80005dc:	ddec      	ble.n	80005b8 <FTL_Init+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	20000174 	.word	0x20000174

080005f0 <FTL_Read>:

int FTL_Read(uint16_t lpn, uint8_t *buf) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	80fb      	strh	r3, [r7, #6]
	if (lpn >= FTL_LPN_MAX)
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	2bbf      	cmp	r3, #191	@ 0xbf
 8000600:	d902      	bls.n	8000608 <FTL_Read+0x18>
		return -1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e02d      	b.n	8000664 <FTL_Read+0x74>

	uint16_t blk = page_map[lpn].block;
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <FTL_Read+0x7c>)
 800060c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000610:	81fb      	strh	r3, [r7, #14]
	uint16_t pg = page_map[lpn].page;
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	4a15      	ldr	r2, [pc, #84]	@ (800066c <FTL_Read+0x7c>)
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	885b      	ldrh	r3, [r3, #2]
 800061c:	81bb      	strh	r3, [r7, #12]

	if (blk >= NAND_BLOCK_NUM || pg >= NAND_PAGE_PER_BLOCK)
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d802      	bhi.n	800062a <FTL_Read+0x3a>
 8000624:	89bb      	ldrh	r3, [r7, #12]
 8000626:	2b0b      	cmp	r3, #11
 8000628:	d902      	bls.n	8000630 <FTL_Read+0x40>
		return -2;
 800062a:	f06f 0301 	mvn.w	r3, #1
 800062e:	e019      	b.n	8000664 <FTL_Read+0x74>

	memcpy(buf, nand_memory[blk][pg], NAND_PAGE_SIZE);
 8000630:	89fa      	ldrh	r2, [r7, #14]
 8000632:	89b9      	ldrh	r1, [r7, #12]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	025b      	lsls	r3, r3, #9
 8000640:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <FTL_Read+0x80>)
 8000642:	4413      	add	r3, r2
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	4619      	mov	r1, r3
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f009 f851 	bl	80096f2 <memcpy>
	printf("[READ] LPN=%d -> PPN(%d,%d) Data=%s\r\n", lpn, blk, pg, buf);
 8000650:	88f9      	ldrh	r1, [r7, #6]
 8000652:	89fa      	ldrh	r2, [r7, #14]
 8000654:	89b8      	ldrh	r0, [r7, #12]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4603      	mov	r3, r0
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <FTL_Read+0x84>)
 800065e:	f008 fe85 	bl	800936c <iprintf>

	return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000174 	.word	0x20000174
 8000670:	20000874 	.word	0x20000874
 8000674:	0800a134 	.word	0x0800a134

08000678 <FTL_Write>:

int FTL_Write(uint16_t lpn, const uint8_t *buf) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	80fb      	strh	r3, [r7, #6]

	// 標記舊頁 invalid
	if (lpn < FTL_LPN_MAX) {
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	2bbf      	cmp	r3, #191	@ 0xbf
 8000688:	d821      	bhi.n	80006ce <FTL_Write+0x56>

		uint16_t old_blk = page_map[lpn].block;
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	4a3e      	ldr	r2, [pc, #248]	@ (8000788 <FTL_Write+0x110>)
 800068e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000692:	81fb      	strh	r3, [r7, #14]
		uint16_t old_pg = page_map[lpn].page;
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	4a3c      	ldr	r2, [pc, #240]	@ (8000788 <FTL_Write+0x110>)
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	885b      	ldrh	r3, [r3, #2]
 800069e:	81bb      	strh	r3, [r7, #12]

		if (old_blk < NAND_BLOCK_NUM && old_pg < NAND_PAGE_PER_BLOCK) {
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d813      	bhi.n	80006ce <FTL_Write+0x56>
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	2b0b      	cmp	r3, #11
 80006aa:	d810      	bhi.n	80006ce <FTL_Write+0x56>

			valid_map[old_blk][old_pg] = 2;
 80006ac:	89fa      	ldrh	r2, [r7, #14]
 80006ae:	89b9      	ldrh	r1, [r7, #12]
 80006b0:	4836      	ldr	r0, [pc, #216]	@ (800078c <FTL_Write+0x114>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4403      	add	r3, r0
 80006bc:	440b      	add	r3, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	701a      	strb	r2, [r3, #0]
			printf("[FTL] Mark old PPN (%d,%d) invalid (LPN %d)\r\n", old_blk,
 80006c2:	89f9      	ldrh	r1, [r7, #14]
 80006c4:	89ba      	ldrh	r2, [r7, #12]
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	4831      	ldr	r0, [pc, #196]	@ (8000790 <FTL_Write+0x118>)
 80006ca:	f008 fe4f 	bl	800936c <iprintf>
		}
	}

	uint16_t blk, pg;

	if (Find_Free_Page(&blk, &pg) != 0) {
 80006ce:	f107 0208 	add.w	r2, r7, #8
 80006d2:	f107 030a 	add.w	r3, r7, #10
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f863 	bl	80007a4 <Find_Free_Page>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d015      	beq.n	8000710 <FTL_Write+0x98>
		printf("[FTL] No free page, trigger GC\r\n");
 80006e4:	482b      	ldr	r0, [pc, #172]	@ (8000794 <FTL_Write+0x11c>)
 80006e6:	f008 fea9 	bl	800943c <puts>
		FTL_GarbageCollect();
 80006ea:	f000 f891 	bl	8000810 <FTL_GarbageCollect>

		if (Find_Free_Page(&blk, &pg) != 0) {
 80006ee:	f107 0208 	add.w	r2, r7, #8
 80006f2:	f107 030a 	add.w	r3, r7, #10
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f853 	bl	80007a4 <Find_Free_Page>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <FTL_Write+0x98>
			printf("[ERROR] No free page even after GC\r\n");
 8000704:	4824      	ldr	r0, [pc, #144]	@ (8000798 <FTL_Write+0x120>)
 8000706:	f008 fe99 	bl	800943c <puts>
			return -4;
 800070a:	f06f 0303 	mvn.w	r3, #3
 800070e:	e036      	b.n	800077e <FTL_Write+0x106>
		}
	}

	memcpy(nand_memory[blk][pg], buf, NAND_PAGE_SIZE);
 8000710:	897b      	ldrh	r3, [r7, #10]
 8000712:	461a      	mov	r2, r3
 8000714:	893b      	ldrh	r3, [r7, #8]
 8000716:	4619      	mov	r1, r3
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	025b      	lsls	r3, r3, #9
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <FTL_Write+0x124>)
 8000726:	4413      	add	r3, r2
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f008 ffdf 	bl	80096f2 <memcpy>
	valid_map[blk][pg] = 1;
 8000734:	897b      	ldrh	r3, [r7, #10]
 8000736:	4619      	mov	r1, r3
 8000738:	893b      	ldrh	r3, [r7, #8]
 800073a:	4618      	mov	r0, r3
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <FTL_Write+0x114>)
 800073e:	460b      	mov	r3, r1
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	440b      	add	r3, r1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	4403      	add	r3, r0
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
	page_map[lpn].block = blk;
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	8979      	ldrh	r1, [r7, #10]
 8000752:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <FTL_Write+0x110>)
 8000754:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	page_map[lpn].page = pg;
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	8939      	ldrh	r1, [r7, #8]
 800075c:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <FTL_Write+0x110>)
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	460a      	mov	r2, r1
 8000764:	805a      	strh	r2, [r3, #2]
	printf("[WRITE] LPN %d -> PPN(%d,%d) Data=%s\r\n", lpn, blk, pg, buf);
 8000766:	88f9      	ldrh	r1, [r7, #6]
 8000768:	897b      	ldrh	r3, [r7, #10]
 800076a:	461a      	mov	r2, r3
 800076c:	893b      	ldrh	r3, [r7, #8]
 800076e:	4618      	mov	r0, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4603      	mov	r3, r0
 8000776:	480a      	ldr	r0, [pc, #40]	@ (80007a0 <FTL_Write+0x128>)
 8000778:	f008 fdf8 	bl	800936c <iprintf>

	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000174 	.word	0x20000174
 800078c:	20018874 	.word	0x20018874
 8000790:	0800a15c 	.word	0x0800a15c
 8000794:	0800a18c 	.word	0x0800a18c
 8000798:	0800a1ac 	.word	0x0800a1ac
 800079c:	20000874 	.word	0x20000874
 80007a0:	0800a1d0 	.word	0x0800a1d0

080007a4 <Find_Free_Page>:

// 幫助尋找空白物理頁
static int Find_Free_Page(uint16_t *blk, uint16_t *pg) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	for (uint16_t b = 0; b < NAND_BLOCK_NUM; b++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	81fb      	strh	r3, [r7, #14]
 80007b2:	e01f      	b.n	80007f4 <Find_Free_Page+0x50>
		for (uint16_t p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	81bb      	strh	r3, [r7, #12]
 80007b8:	e016      	b.n	80007e8 <Find_Free_Page+0x44>
			if (valid_map[b][p] == 0) {
 80007ba:	89fa      	ldrh	r2, [r7, #14]
 80007bc:	89b9      	ldrh	r1, [r7, #12]
 80007be:	4813      	ldr	r0, [pc, #76]	@ (800080c <Find_Free_Page+0x68>)
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4403      	add	r3, r0
 80007ca:	440b      	add	r3, r1
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <Find_Free_Page+0x3e>
				*blk = b;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	89fa      	ldrh	r2, [r7, #14]
 80007d6:	801a      	strh	r2, [r3, #0]
				*pg = p;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	89ba      	ldrh	r2, [r7, #12]
 80007dc:	801a      	strh	r2, [r3, #0]
				return 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	e00d      	b.n	80007fe <Find_Free_Page+0x5a>
		for (uint16_t p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 80007e2:	89bb      	ldrh	r3, [r7, #12]
 80007e4:	3301      	adds	r3, #1
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	2b0b      	cmp	r3, #11
 80007ec:	d9e5      	bls.n	80007ba <Find_Free_Page+0x16>
	for (uint16_t b = 0; b < NAND_BLOCK_NUM; b++) {
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	81fb      	strh	r3, [r7, #14]
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d9dc      	bls.n	80007b4 <Find_Free_Page+0x10>
			}
		}
	}
	return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20018874 	.word	0x20018874

08000810 <FTL_GarbageCollect>:

static void FTL_GarbageCollect(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af02      	add	r7, sp, #8

	// 1.找出無效最多的 BLOCK
	int max_invalid = -1, victim = -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	61bb      	str	r3, [r7, #24]

	for (int b = 0; b < NAND_BLOCK_NUM; b++) {
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e024      	b.n	8000872 <FTL_GarbageCollect+0x62>

		int invalid = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]

		for (int p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	e019      	b.n	8000866 <FTL_GarbageCollect+0x56>
			if (valid_map[b][p] == 2) {
 8000832:	495d      	ldr	r1, [pc, #372]	@ (80009a8 <FTL_GarbageCollect+0x198>)
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	18ca      	adds	r2, r1, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d102      	bne.n	8000850 <FTL_GarbageCollect+0x40>
				invalid++;
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	3301      	adds	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
			}
			if (invalid > max_invalid) {
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	429a      	cmp	r2, r3
 8000856:	dd03      	ble.n	8000860 <FTL_GarbageCollect+0x50>
				max_invalid = invalid;
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	61fb      	str	r3, [r7, #28]
				victim = b;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	61bb      	str	r3, [r7, #24]
		for (int p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	3301      	adds	r3, #1
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b0b      	cmp	r3, #11
 800086a:	dde2      	ble.n	8000832 <FTL_GarbageCollect+0x22>
	for (int b = 0; b < NAND_BLOCK_NUM; b++) {
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	3301      	adds	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	ddd7      	ble.n	8000828 <FTL_GarbageCollect+0x18>
			}
		}
	}
	if (victim < 0)
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2b00      	cmp	r3, #0
 800087c:	f2c0 8090 	blt.w	80009a0 <FTL_GarbageCollect+0x190>
		return;
	printf("[GC] Run. Victim block = %d (invalid pages=%d)\r\n", victim,
 8000880:	69fa      	ldr	r2, [r7, #28]
 8000882:	69b9      	ldr	r1, [r7, #24]
 8000884:	4849      	ldr	r0, [pc, #292]	@ (80009ac <FTL_GarbageCollect+0x19c>)
 8000886:	f008 fd71 	bl	800936c <iprintf>
			max_invalid);

	// 2.搬移有效頁到新空白頁
	for (int p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e07a      	b.n	8000986 <FTL_GarbageCollect+0x176>

		if (valid_map[victim][p] == 1) {
 8000890:	4945      	ldr	r1, [pc, #276]	@ (80009a8 <FTL_GarbageCollect+0x198>)
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	18ca      	adds	r2, r1, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d16b      	bne.n	8000980 <FTL_GarbageCollect+0x170>

			uint16_t new_blk, new_pg;

			if (Find_Free_Page(&new_blk, &new_pg) == 0) {
 80008a8:	463a      	mov	r2, r7
 80008aa:	1cbb      	adds	r3, r7, #2
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff78 	bl	80007a4 <Find_Free_Page>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d162      	bne.n	8000980 <FTL_GarbageCollect+0x170>

				memcpy(nand_memory[new_blk][new_pg], nand_memory[victim][p],
 80008ba:	887b      	ldrh	r3, [r7, #2]
 80008bc:	461a      	mov	r2, r3
 80008be:	883b      	ldrh	r3, [r7, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	025b      	lsls	r3, r3, #9
 80008ce:	4a38      	ldr	r2, [pc, #224]	@ (80009b0 <FTL_GarbageCollect+0x1a0>)
 80008d0:	1898      	adds	r0, r3, r2
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	4413      	add	r3, r2
 80008e0:	025b      	lsls	r3, r3, #9
 80008e2:	4a33      	ldr	r2, [pc, #204]	@ (80009b0 <FTL_GarbageCollect+0x1a0>)
 80008e4:	4413      	add	r3, r2
 80008e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ea:	4619      	mov	r1, r3
 80008ec:	f008 ff01 	bl	80096f2 <memcpy>
				NAND_PAGE_SIZE);
				valid_map[new_blk][new_pg] = 1;
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	4619      	mov	r1, r3
 80008f4:	883b      	ldrh	r3, [r7, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	4a2b      	ldr	r2, [pc, #172]	@ (80009a8 <FTL_GarbageCollect+0x198>)
 80008fa:	460b      	mov	r3, r1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	440b      	add	r3, r1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	4403      	add	r3, r0
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

				// 更新 page_map 指向新位置
				for (int lpn = 0; lpn < FTL_LPN_MAX; lpn++) {
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	e01f      	b.n	8000950 <FTL_GarbageCollect+0x140>
					if (page_map[lpn].block == victim
 8000910:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <FTL_GarbageCollect+0x1a4>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000918:	461a      	mov	r2, r3
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4293      	cmp	r3, r2
 800091e:	d114      	bne.n	800094a <FTL_GarbageCollect+0x13a>
							&& page_map[lpn].page == p) {
 8000920:	4a24      	ldr	r2, [pc, #144]	@ (80009b4 <FTL_GarbageCollect+0x1a4>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	885b      	ldrh	r3, [r3, #2]
 800092a:	461a      	mov	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4293      	cmp	r3, r2
 8000930:	d10b      	bne.n	800094a <FTL_GarbageCollect+0x13a>

						page_map[lpn].block = new_blk;
 8000932:	8879      	ldrh	r1, [r7, #2]
 8000934:	4a1f      	ldr	r2, [pc, #124]	@ (80009b4 <FTL_GarbageCollect+0x1a4>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
						page_map[lpn].page = new_pg;
 800093c:	8839      	ldrh	r1, [r7, #0]
 800093e:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <FTL_GarbageCollect+0x1a4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	460a      	mov	r2, r1
 8000948:	805a      	strh	r2, [r3, #2]
				for (int lpn = 0; lpn < FTL_LPN_MAX; lpn++) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3301      	adds	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2bbf      	cmp	r3, #191	@ 0xbf
 8000954:	dddc      	ble.n	8000910 <FTL_GarbageCollect+0x100>
					}
				}
				valid_map[victim][p] = 2; // 原頁標無效
 8000956:	4914      	ldr	r1, [pc, #80]	@ (80009a8 <FTL_GarbageCollect+0x198>)
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	18ca      	adds	r2, r1, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4413      	add	r3, r2
 8000968:	2202      	movs	r2, #2
 800096a:	701a      	strb	r2, [r3, #0]
				printf("[GC] Move PPN (%d,%d) -> (%d,%d)\r\n", victim, p,
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	461a      	mov	r2, r3
 8000970:	883b      	ldrh	r3, [r7, #0]
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	69b9      	ldr	r1, [r7, #24]
 800097a:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <FTL_GarbageCollect+0x1a8>)
 800097c:	f008 fcf6 	bl	800936c <iprintf>
	for (int p = 0; p < NAND_PAGE_PER_BLOCK; p++) {
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3301      	adds	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b0b      	cmp	r3, #11
 800098a:	dd81      	ble.n	8000890 <FTL_GarbageCollect+0x80>
			}
		}
	}

	// 擦除 victim block
	NAND_Erase_Block(victim);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f94d 	bl	8000c30 <NAND_Erase_Block>
	printf("[GC] Erase block %d\r\n", victim);
 8000996:	69b9      	ldr	r1, [r7, #24]
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <FTL_GarbageCollect+0x1ac>)
 800099a:	f008 fce7 	bl	800936c <iprintf>
 800099e:	e000      	b.n	80009a2 <FTL_GarbageCollect+0x192>
		return;
 80009a0:	bf00      	nop
}
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20018874 	.word	0x20018874
 80009ac:	0800a1f8 	.word	0x0800a1f8
 80009b0:	20000874 	.word	0x20000874
 80009b4:	20000174 	.word	0x20000174
 80009b8:	0800a22c 	.word	0x0800a22c
 80009bc:	0800a250 	.word	0x0800a250

080009c0 <FTL_Dump_Status>:

void FTL_Dump_Status(void) {
 80009c0:	b5b0      	push	{r4, r5, r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af02      	add	r7, sp, #8

	printf("---- FTL Mapping Table ----\r\n");
 80009c6:	481e      	ldr	r0, [pc, #120]	@ (8000a40 <FTL_Dump_Status+0x80>)
 80009c8:	f008 fd38 	bl	800943c <puts>
	printf("LPN | Block | Page | Valid\r\n");
 80009cc:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <FTL_Dump_Status+0x84>)
 80009ce:	f008 fd35 	bl	800943c <puts>

	for (int i = 0; i < FTL_LPN_MAX; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	e02b      	b.n	8000a30 <FTL_Dump_Status+0x70>

		uint16_t blk = page_map[i].block;
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <FTL_Dump_Status+0x88>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80009e0:	807b      	strh	r3, [r7, #2]
		uint16_t pg = page_map[i].page;
 80009e2:	4a19      	ldr	r2, [pc, #100]	@ (8000a48 <FTL_Dump_Status+0x88>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	885b      	ldrh	r3, [r3, #2]
 80009ec:	803b      	strh	r3, [r7, #0]

		if (blk < NAND_BLOCK_NUM && pg < NAND_PAGE_PER_BLOCK)
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d816      	bhi.n	8000a22 <FTL_Dump_Status+0x62>
 80009f4:	883b      	ldrh	r3, [r7, #0]
 80009f6:	2b0b      	cmp	r3, #11
 80009f8:	d813      	bhi.n	8000a22 <FTL_Dump_Status+0x62>
			printf("%3d | %5d | %4d | %d\n", i, blk, pg, valid_map[blk][pg]);
 80009fa:	8878      	ldrh	r0, [r7, #2]
 80009fc:	883c      	ldrh	r4, [r7, #0]
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	8839      	ldrh	r1, [r7, #0]
 8000a02:	4d12      	ldr	r5, [pc, #72]	@ (8000a4c <FTL_Dump_Status+0x8c>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	442b      	add	r3, r5
 8000a0e:	440b      	add	r3, r1
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	4623      	mov	r3, r4
 8000a16:	4602      	mov	r2, r0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <FTL_Dump_Status+0x90>)
 8000a1c:	f008 fca6 	bl	800936c <iprintf>
 8000a20:	e003      	b.n	8000a2a <FTL_Dump_Status+0x6a>
		else
			printf("%3d |   --  |  --  | --\n", i);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <FTL_Dump_Status+0x94>)
 8000a26:	f008 fca1 	bl	800936c <iprintf>
	for (int i = 0; i < FTL_LPN_MAX; i++) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2bbf      	cmp	r3, #191	@ 0xbf
 8000a34:	ddd0      	ble.n	80009d8 <FTL_Dump_Status+0x18>
	}
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a40:	0800a268 	.word	0x0800a268
 8000a44:	0800a288 	.word	0x0800a288
 8000a48:	20000174 	.word	0x20000174
 8000a4c:	20018874 	.word	0x20018874
 8000a50:	0800a2a4 	.word	0x0800a2a4
 8000a54:	0800a2bc 	.word	0x0800a2bc

08000a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_GPIO_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aac:	f000 faaa 	bl	8001004 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab0:	f000 f850 	bl	8000b54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab4:	f7ff ffd0 	bl	8000a58 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ab8:	f000 fa08 	bl	8000ecc <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 8000abc:	f007 fe9c 	bl	80087f8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	FTL_Init();
 8000ac0:	f7ff fd74 	bl	80005ac <FTL_Init>
	printf("FTL Init done\n");
 8000ac4:	481b      	ldr	r0, [pc, #108]	@ (8000b34 <main+0x8c>)
 8000ac6:	f008 fcb9 	bl	800943c <puts>

	// 寫入資料
	memset(write_buf, 0, NAND_PAGE_SIZE);
 8000aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <main+0x90>)
 8000ad2:	f008 fd93 	bl	80095fc <memset>
	strcpy((char*) write_buf, "FTL Page Mapping Test");
 8000ad6:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <main+0x90>)
 8000ad8:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <main+0x94>)
 8000ada:	4614      	mov	r4, r2
 8000adc:	461d      	mov	r5, r3
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ae6:	6020      	str	r0, [r4, #0]
 8000ae8:	3404      	adds	r4, #4
 8000aea:	8021      	strh	r1, [r4, #0]
	printf("Write LPN 5...\n");
 8000aec:	4814      	ldr	r0, [pc, #80]	@ (8000b40 <main+0x98>)
 8000aee:	f008 fca5 	bl	800943c <puts>
	FTL_Write(5, write_buf);
 8000af2:	4911      	ldr	r1, [pc, #68]	@ (8000b38 <main+0x90>)
 8000af4:	2005      	movs	r0, #5
 8000af6:	f7ff fdbf 	bl	8000678 <FTL_Write>

	// 讀出資料
	memset(read_buf, 0, NAND_PAGE_SIZE);
 8000afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000afe:	2100      	movs	r1, #0
 8000b00:	4810      	ldr	r0, [pc, #64]	@ (8000b44 <main+0x9c>)
 8000b02:	f008 fd7b 	bl	80095fc <memset>
	printf("Read LPN 5...\n");
 8000b06:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <main+0xa0>)
 8000b08:	f008 fc98 	bl	800943c <puts>
	FTL_Read(5, read_buf);
 8000b0c:	490d      	ldr	r1, [pc, #52]	@ (8000b44 <main+0x9c>)
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f7ff fd6e 	bl	80005f0 <FTL_Read>
	printf("LPN 5 data: %s\n", read_buf);
 8000b14:	490b      	ldr	r1, [pc, #44]	@ (8000b44 <main+0x9c>)
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <main+0xa4>)
 8000b18:	f008 fc28 	bl	800936c <iprintf>

	// Dump mapping 狀態
	FTL_Dump_Status();
 8000b1c:	f7ff ff50 	bl	80009c0 <FTL_Dump_Status>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		printf("Hello UART\r\n");
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <main+0xa8>)
 8000b22:	f008 fc8b 	bl	800943c <puts>
		HAL_Delay(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b2a:	f000 fadd 	bl	80010e8 <HAL_Delay>
		printf("Hello UART\r\n");
 8000b2e:	bf00      	nop
 8000b30:	e7f6      	b.n	8000b20 <main+0x78>
 8000b32:	bf00      	nop
 8000b34:	0800a2d8 	.word	0x0800a2d8
 8000b38:	20000474 	.word	0x20000474
 8000b3c:	0800a2e8 	.word	0x0800a2e8
 8000b40:	0800a300 	.word	0x0800a300
 8000b44:	20000674 	.word	0x20000674
 8000b48:	0800a310 	.word	0x0800a310
 8000b4c:	0800a320 	.word	0x0800a320
 8000b50:	0800a330 	.word	0x0800a330

08000b54 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	2230      	movs	r2, #48	@ 0x30
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fd4a 	bl	80095fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a26      	ldr	r2, [pc, #152]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000b9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c20 <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000bc8:	23c0      	movs	r3, #192	@ 0xc0
 8000bca:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bd4:	f107 0320 	add.w	r3, r7, #32
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 ffbf 	bl	8002b5c <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x94>
		Error_Handler();
 8000be4:	f000 f81e 	bl	8000c24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2103      	movs	r1, #3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fa21 	bl	800304c <HAL_RCC_ClockConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xc0>
		Error_Handler();
 8000c10:	f000 f808 	bl	8000c24 <Error_Handler>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3750      	adds	r7, #80	@ 0x50
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <Error_Handler+0x8>

08000c30 <NAND_Erase_Block>:
#include <stdint.h>

uint8_t nand_memory[NAND_BLOCK_NUM][NAND_PAGE_PER_BLOCK][NAND_PAGE_SIZE] = { 0 };
uint8_t valid_map[NAND_BLOCK_NUM][NAND_PAGE_PER_BLOCK];

void NAND_Erase_Block(uint16_t block_idx) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]

	if (block_idx >= NAND_BLOCK_NUM)
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d824      	bhi.n	8000c8a <NAND_Erase_Block+0x5a>
		return;

	for (int i = 0; i < NAND_PAGE_PER_BLOCK; ++i) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e01d      	b.n	8000c82 <NAND_Erase_Block+0x52>

		memset(nand_memory[block_idx][i], 0xFF, NAND_PAGE_SIZE); // Erase 後狀態設定為 1
 8000c46:	88fa      	ldrh	r2, [r7, #6]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <NAND_Erase_Block+0x64>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c5e:	21ff      	movs	r1, #255	@ 0xff
 8000c60:	4618      	mov	r0, r3
 8000c62:	f008 fccb 	bl	80095fc <memset>

		valid_map[block_idx][i] = 0; // free
 8000c66:	88fa      	ldrh	r2, [r7, #6]
 8000c68:	490b      	ldr	r1, [pc, #44]	@ (8000c98 <NAND_Erase_Block+0x68>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	18ca      	adds	r2, r1, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NAND_PAGE_PER_BLOCK; ++i) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b0b      	cmp	r3, #11
 8000c86:	ddde      	ble.n	8000c46 <NAND_Erase_Block+0x16>
 8000c88:	e000      	b.n	8000c8c <NAND_Erase_Block+0x5c>
		return;
 8000c8a:	bf00      	nop
	}
}
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000874 	.word	0x20000874
 8000c98:	20018874 	.word	0x20018874

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d42:	f000 f9b1 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <OTG_FS_IRQHandler+0x10>)
 8000d52:	f000 fdc7 	bl	80018e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20018e84 	.word	0x20018e84

08000d60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e00a      	b.n	8000d88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d72:	f3af 8000 	nop.w
 8000d76:	4601      	mov	r1, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf0      	blt.n	8000d72 <_read+0x12>
  }

  return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e009      	b.n	8000dc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf1      	blt.n	8000dac <_write+0x12>
  }
  return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_close>:

int _close(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dfa:	605a      	str	r2, [r3, #4]
  return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_isatty>:

int _isatty(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f008 fc14 	bl	8009698 <__errno>
 8000e70:	4603      	mov	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <_sbrk+0x64>)
 8000e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20020000 	.word	0x20020000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	20018934 	.word	0x20018934
 8000ea4:	20019740 	.word	0x20019740

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <MX_USART2_UART_Init>:

UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <MX_USART2_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_USART2_UART_Init+0x4c>)
 8000f04:	f002 fac2 	bl	800348c <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f0e:	f7ff fe89 	bl	8000c24 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20018938 	.word	0x20018938
 8000f1c:	40004400 	.word	0x40004400

08000f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0x84>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12b      	bne.n	8000f9a <HAL_UART_MspInit+0x7a>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_UART_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
		/**USART2 GPIO Configuration
		 PA2     ------> USART2_TX
		 PA3     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0x8c>)
 8000f96:	f000 f9dd 	bl	8001354 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART2_MspInit 1 */

		/* USER CODE END USART2_MspInit 1 */
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	@ 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb4:	f7ff ff78 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f008 fb61 	bl	80096a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fd61 	bl	8000aa8 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000ff4:	0800a400 	.word	0x0800a400
  ldr r2, =_sbss
 8000ff8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000ffc:	2001973c 	.word	0x2001973c

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	@ (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f94f 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f808 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe30 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f967 	bl	800133a <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 f92f 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20018980 	.word	0x20018980

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20018980 	.word	0x20018980

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	@ (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	@ (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	@ (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	@ 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff3e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff31 	bl	8001194 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e159      	b.n	8001624 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8148 	bne.w	800161e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d130      	bne.n	8001408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 0201 	and.w	r2, r3, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b03      	cmp	r3, #3
 8001412:	d017      	beq.n	8001444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a2 	beq.w	800161e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b57      	ldr	r3, [pc, #348]	@ (800163c <HAL_GPIO_Init+0x2e8>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	4a56      	ldr	r2, [pc, #344]	@ (800163c <HAL_GPIO_Init+0x2e8>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ea:	4b54      	ldr	r3, [pc, #336]	@ (800163c <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f6:	4a52      	ldr	r2, [pc, #328]	@ (8001640 <HAL_GPIO_Init+0x2ec>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a49      	ldr	r2, [pc, #292]	@ (8001644 <HAL_GPIO_Init+0x2f0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x202>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a48      	ldr	r2, [pc, #288]	@ (8001648 <HAL_GPIO_Init+0x2f4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1fe>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a47      	ldr	r2, [pc, #284]	@ (800164c <HAL_GPIO_Init+0x2f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1fa>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a46      	ldr	r2, [pc, #280]	@ (8001650 <HAL_GPIO_Init+0x2fc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1f6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a45      	ldr	r2, [pc, #276]	@ (8001654 <HAL_GPIO_Init+0x300>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1f2>
 8001542:	2304      	movs	r3, #4
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001546:	2307      	movs	r3, #7
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001556:	2300      	movs	r3, #0
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	@ (8001640 <HAL_GPIO_Init+0x2ec>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_GPIO_Init+0x304>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a2f      	ldr	r2, [pc, #188]	@ (8001658 <HAL_GPIO_Init+0x304>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a24      	ldr	r2, [pc, #144]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_GPIO_Init+0x304>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <HAL_GPIO_Init+0x304>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f67f aea2 	bls.w	8001370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e101      	b.n	8001872 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d106      	bne.n	800168e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f007 fa83 	bl	8008b94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800169c:	d102      	bne.n	80016a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 faca 	bl	8003c42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7c1a      	ldrb	r2, [r3, #16]
 80016b6:	f88d 2000 	strb.w	r2, [sp]
 80016ba:	3304      	adds	r3, #4
 80016bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016be:	f002 f9a9 	bl	8003a14 <USB_CoreInit>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0ce      	b.n	8001872 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 fac2 	bl	8003c64 <USB_SetCurrentMode>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0bf      	b.n	8001872 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
 80016f6:	e04a      	b.n	800178e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3315      	adds	r3, #21
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3314      	adds	r3, #20
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	b298      	uxth	r0, r3
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	332e      	adds	r3, #46	@ 0x2e
 8001734:	4602      	mov	r2, r0
 8001736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	3318      	adds	r3, #24
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	331c      	adds	r3, #28
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3320      	adds	r3, #32
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3324      	adds	r3, #36	@ 0x24
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3af      	bcc.n	80016f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e044      	b.n	8001828 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	3301      	adds	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3b5      	bcc.n	800179e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7c1a      	ldrb	r2, [r3, #16]
 800183a:	f88d 2000 	strb.w	r2, [sp]
 800183e:	3304      	adds	r3, #4
 8001840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001842:	f002 fa5b 	bl	8003cfc <USB_DevInit>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e00c      	b.n	8001872 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 faa5 	bl	8004dba <USB_DevDisconnect>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_PCD_Start+0x1c>
 8001892:	2302      	movs	r3, #2
 8001894:	e022      	b.n	80018dc <HAL_PCD_Start+0x62>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d105      	bne.n	80018be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f9ac 	bl	8003c20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fa53 	bl	8004d78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b08d      	sub	sp, #52	@ 0x34
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 fb11 	bl	8004f22 <USB_GetMode>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 848c 	bne.w	8002220 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fa75 	bl	8004dfc <USB_ReadInterrupts>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8482 	beq.w	800221e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fa62 	bl	8004dfc <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d107      	bne.n	8001952 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f002 0202 	and.w	r2, r2, #2
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fa50 	bl	8004dfc <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d161      	bne.n	8001a2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0210 	bic.w	r2, r2, #16
 8001974:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 020f 	and.w	r2, r3, #15
 8001982:	4613      	mov	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800199c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019a0:	d124      	bne.n	80019ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d035      	beq.n	8001a1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80019b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	6a38      	ldr	r0, [r7, #32]
 80019c2:	f003 f887 	bl	8004ad4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019d2:	441a      	add	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e4:	441a      	add	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	e016      	b.n	8001a1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80019f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80019f6:	d110      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019fe:	2208      	movs	r2, #8
 8001a00:	4619      	mov	r1, r3
 8001a02:	6a38      	ldr	r0, [r7, #32]
 8001a04:	f003 f866 	bl	8004ad4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a14:	441a      	add	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0210 	orr.w	r2, r2, #16
 8001a28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 f9e4 	bl	8004dfc <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a3e:	f040 80a7 	bne.w	8001b90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 f9e9 	bl	8004e22 <USB_ReadDevAllOutEpInterrupt>
 8001a50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a52:	e099      	b.n	8001b88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 808e 	beq.w	8001b7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 fa0d 	bl	8004e8a <USB_ReadDevOutEPInterrupt>
 8001a70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fed1 	bl	8002838 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aac:	461a      	mov	r2, r3
 8001aae:	2308      	movs	r3, #8
 8001ab0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 ffa7 	bl	8002a08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d030      	beq.n	8001b42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae8:	2b80      	cmp	r3, #128	@ 0x80
 8001aea:	d109      	bne.n	8001b00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	78db      	ldrb	r3, [r3, #3]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d108      	bne.n	8001b30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f007 f92e 	bl	8008d8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2302      	movs	r3, #2
 8001b40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b74:	461a      	mov	r2, r3
 8001b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	3301      	adds	r3, #1
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f af62 	bne.w	8001a54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f931 	bl	8004dfc <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ba4:	f040 80db 	bne.w	8001d5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 f952 	bl	8004e56 <USB_ReadDevAllInEpInterrupt>
 8001bb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001bb8:	e0cd      	b.n	8001d56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80c2 	beq.w	8001d4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 f978 	bl	8004ec6 <USB_ReadDevInEPInterrupt>
 8001bd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d057      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	2201      	movs	r2, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69f9      	ldr	r1, [r7, #28]
 8001bfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c02:	4013      	ands	r3, r2
 8001c04:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	2301      	movs	r3, #1
 8001c16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	799b      	ldrb	r3, [r3, #6]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d132      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3320      	adds	r3, #32
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4403      	add	r3, r0
 8001c40:	331c      	adds	r3, #28
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4419      	add	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4403      	add	r3, r0
 8001c54:	3320      	adds	r3, #32
 8001c56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d113      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x3a2>
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3324      	adds	r3, #36	@ 0x24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d108      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2101      	movs	r1, #1
 8001c82:	f003 f97f 	bl	8004f84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f007 f802 	bl	8008c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2308      	movs	r3, #8
 8001cac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2310      	movs	r3, #16
 8001cc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2340      	movs	r3, #64	@ 0x40
 8001ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d023      	beq.n	8001d38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf2:	6a38      	ldr	r0, [r7, #32]
 8001cf4:	f002 f966 	bl	8003fc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3310      	adds	r3, #16
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	78db      	ldrb	r3, [r3, #3]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d108      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2200      	movs	r2, #0
 8001d18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f007 f845 	bl	8008db0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	015a      	lsls	r2, r3, #5
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d32:	461a      	mov	r2, r3
 8001d34:	2302      	movs	r3, #2
 8001d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fcea 	bl	800271e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f af2e 	bne.w	8001bba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 f84a 	bl	8004dfc <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d72:	d122      	bne.n	8001dba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d108      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fed1 	bl	8002b44 <HAL_PCDEx_LPM_Callback>
 8001da2:	e002      	b.n	8001daa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f006 ffe3 	bl	8008d70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f81c 	bl	8004dfc <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dce:	d112      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f006 ff9f 	bl	8008d24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001df4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fffe 	bl	8004dfc <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e0a:	f040 80b7 	bne.w	8001f7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2110      	movs	r1, #16
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 f8cb 	bl	8003fc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e32:	e046      	b.n	8001ec2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e40:	461a      	mov	r2, r3
 8001e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e58:	0151      	lsls	r1, r2, #5
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	440a      	add	r2, r1
 8001e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e74:	461a      	mov	r2, r3
 8001e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e8c:	0151      	lsls	r1, r2, #5
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	440a      	add	r2, r1
 8001e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eac:	0151      	lsls	r1, r2, #5
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001eb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001eba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d3b2      	bcc.n	8001e34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001edc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001ee0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7bdb      	ldrb	r3, [r3, #15]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001efa:	f043 030b 	orr.w	r3, r3, #11
 8001efe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f10:	f043 030b 	orr.w	r3, r3, #11
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	e015      	b.n	8001f44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001f2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f3e:	f043 030b 	orr.w	r3, r3, #11
 8001f42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f66:	461a      	mov	r2, r3
 8001f68:	f003 f80c 	bl	8004f84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 ff3b 	bl	8004dfc <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f90:	d123      	bne.n	8001fda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 ffd1 	bl	8004f3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 f888 	bl	80040b6 <USB_GetDevSpeed>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681c      	ldr	r4, [r3, #0]
 8001fb2:	f001 fa37 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8001fb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f001 fd8c 	bl	8003adc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f006 fe8e 	bl	8008ce6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 ff0c 	bl	8004dfc <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d10a      	bne.n	8002004 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f006 fe6b 	bl	8008cca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f002 0208 	and.w	r2, r2, #8
 8002002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fef7 	bl	8004dfc <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002014:	2b80      	cmp	r3, #128	@ 0x80
 8002016:	d123      	bne.n	8002060 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
 8002028:	e014      	b.n	8002054 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4619      	mov	r1, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fb0a 	bl	8002662 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	3301      	adds	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	461a      	mov	r2, r3
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	4293      	cmp	r3, r2
 800205e:	d3e4      	bcc.n	800202a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fec9 	bl	8004dfc <USB_ReadInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002070:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002074:	d13c      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002076:	2301      	movs	r3, #1
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
 800207a:	e02b      	b.n	80020d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3318      	adds	r3, #24
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d115      	bne.n	80020ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80020a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da12      	bge.n	80020ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3317      	adds	r3, #23
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 faca 	bl	8002662 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	3301      	adds	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	461a      	mov	r2, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	4293      	cmp	r3, r2
 80020de:	d3cd      	bcc.n	800207c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80020ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fe81 	bl	8004dfc <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002104:	d156      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
 800210a:	e045      	b.n	8002198 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d12e      	bne.n	8002192 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002134:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002136:	2b00      	cmp	r3, #0
 8002138:	da2b      	bge.n	8002192 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	0c1a      	lsrs	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002144:	4053      	eors	r3, r2
 8002146:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d121      	bne.n	8002192 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800218a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218e:	6053      	str	r3, [r2, #4]
            break;
 8002190:	e008      	b.n	80021a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	3301      	adds	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	461a      	mov	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d3b3      	bcc.n	800210c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fe1f 	bl	8004dfc <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c8:	d10a      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f006 fe02 	bl	8008dd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80021de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fe09 	bl	8004dfc <USB_ReadInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d115      	bne.n	8002220 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f006 fdf2 	bl	8008df0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	430a      	orrs	r2, r1
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	e000      	b.n	8002220 <HAL_PCD_IRQHandler+0x93c>
      return;
 800221e:	bf00      	nop
    }
  }
}
 8002220:	3734      	adds	r7, #52	@ 0x34
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}

08002226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_PCD_SetAddress+0x1a>
 800223c:	2302      	movs	r3, #2
 800223e:	e012      	b.n	8002266 <HAL_PCD_SetAddress+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fd68 	bl	8004d2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	4608      	mov	r0, r1
 8002278:	4611      	mov	r1, r2
 800227a:	461a      	mov	r2, r3
 800227c:	4603      	mov	r3, r0
 800227e:	70fb      	strb	r3, [r7, #3]
 8002280:	460b      	mov	r3, r1
 8002282:	803b      	strh	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800228c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0f      	bge.n	80022b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 020f 	and.w	r2, r3, #15
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3310      	adds	r3, #16
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	705a      	strb	r2, [r3, #1]
 80022b2:	e00f      	b.n	80022d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80022e0:	883b      	ldrh	r3, [r7, #0]
 80022e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	78ba      	ldrb	r2, [r7, #2]
 80022ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002302:	78bb      	ldrb	r3, [r7, #2]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d102      	bne.n	800230e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_PCD_EP_Open+0xae>
 8002318:	2302      	movs	r3, #2
 800231a:	e00e      	b.n	800233a <HAL_PCD_EP_Open+0xcc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fee8 	bl	8004100 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002338:	7afb      	ldrb	r3, [r7, #11]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800234e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da0f      	bge.n	8002376 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	3310      	adds	r3, #16
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	705a      	strb	r2, [r3, #1]
 8002374:	e00f      	b.n	8002396 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	3304      	adds	r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_EP_Close+0x6e>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_Close+0x8c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 ff26 	bl	8004210 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	460b      	mov	r3, r1
 80023e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	f003 020f 	and.w	r2, r3, #15
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002418:	7afb      	ldrb	r3, [r7, #11]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	b2da      	uxtb	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	799b      	ldrb	r3, [r3, #6]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	799b      	ldrb	r3, [r3, #6]
 800243a:	461a      	mov	r2, r3
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	f001 ffc3 	bl	80043c8 <USB_EPStartXfer>

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3310      	adds	r3, #16
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	799b      	ldrb	r3, [r3, #6]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	799b      	ldrb	r3, [r3, #6]
 80024de:	461a      	mov	r2, r3
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	f001 ff71 	bl	80043c8 <USB_EPStartXfer>

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	7912      	ldrb	r2, [r2, #4]
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04f      	b.n	80025ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800250e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da0f      	bge.n	8002536 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3310      	adds	r3, #16
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	705a      	strb	r2, [r3, #1]
 8002534:	e00d      	b.n	8002552 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_PCD_EP_SetStall+0x82>
 800256e:	2302      	movs	r3, #2
 8002570:	e01d      	b.n	80025ae <HAL_PCD_EP_SetStall+0xbe>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	4618      	mov	r0, r3
 8002582:	f002 faff 	bl	8004b84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7999      	ldrb	r1, [r3, #6]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800259e:	461a      	mov	r2, r3
 80025a0:	f002 fcf0 	bl	8004f84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	7912      	ldrb	r2, [r2, #4]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d901      	bls.n	80025d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e042      	b.n	800265a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da0f      	bge.n	80025fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	3310      	adds	r3, #16
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	705a      	strb	r2, [r3, #1]
 80025fa:	e00f      	b.n	800261c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 020f 	and.w	r2, r3, #15
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_PCD_EP_ClrStall+0x86>
 8002638:	2302      	movs	r3, #2
 800263a:	e00e      	b.n	800265a <HAL_PCD_EP_ClrStall+0xa4>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fb08 	bl	8004c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800266e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	da0c      	bge.n	8002690 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	3310      	adds	r3, #16
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e00c      	b.n	80026aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	3304      	adds	r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68f9      	ldr	r1, [r7, #12]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 f927 	bl	8004904 <USB_EPStopXfer>
 80026b6:	4603      	mov	r3, r0
 80026b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80026ba:	7afb      	ldrb	r3, [r7, #11]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_Flush+0x1a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e01b      	b.n	8002716 <HAL_PCD_EP_Flush+0x52>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80026e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da09      	bge.n	8002702 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f001 fc62 	bl	8003fc4 <USB_FlushTxFifo>
 8002700:	e004      	b.n	800270c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fc8e 	bl	8004028 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08a      	sub	sp, #40	@ 0x28
 8002722:	af02      	add	r7, sp, #8
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	3310      	adds	r3, #16
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	3304      	adds	r3, #4
 8002744:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	429a      	cmp	r2, r3
 8002750:	d901      	bls.n	8002756 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e06b      	b.n	800282e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	d902      	bls.n	8002772 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3303      	adds	r3, #3
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800277a:	e02a      	b.n	80027d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	429a      	cmp	r2, r3
 8002790:	d902      	bls.n	8002798 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3303      	adds	r3, #3
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68d9      	ldr	r1, [r3, #12]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f002 f94f 	bl	8004a58 <USB_WritePacket>

    ep->xfer_buff  += len;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	441a      	add	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d809      	bhi.n	80027fc <PCD_WriteEmptyTxFifo+0xde>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d203      	bcs.n	80027fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1bf      	bne.n	800277c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	d811      	bhi.n	800282c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	2201      	movs	r2, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	43db      	mvns	r3, r3
 8002822:	6939      	ldr	r1, [r7, #16]
 8002824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002828:	4013      	ands	r3, r2
 800282a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	333c      	adds	r3, #60	@ 0x3c
 8002850:	3304      	adds	r3, #4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	799b      	ldrb	r3, [r3, #6]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d17b      	bne.n	8002966 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4a61      	ldr	r2, [pc, #388]	@ (8002a00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f240 80b9 	bls.w	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80b3 	beq.w	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800289a:	461a      	mov	r2, r3
 800289c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028a0:	6093      	str	r3, [r2, #8]
 80028a2:	e0a7      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	2320      	movs	r3, #32
 80028be:	6093      	str	r3, [r2, #8]
 80028c0:	e098      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 8093 	bne.w	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d90f      	bls.n	80028f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ec:	461a      	mov	r2, r3
 80028ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028f2:	6093      	str	r3, [r2, #8]
 80028f4:	e07e      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	0159      	lsls	r1, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	440b      	add	r3, r1
 8002918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d114      	bne.n	8002958 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002940:	461a      	mov	r2, r3
 8002942:	2101      	movs	r1, #1
 8002944:	f002 fb1e 	bl	8004f84 <USB_EP0_OutStart>
 8002948:	e006      	b.n	8002958 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f006 f97e 	bl	8008c60 <HAL_PCD_DataOutStageCallback>
 8002964:	e046      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d124      	bne.n	80029b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298a:	6093      	str	r3, [r2, #8]
 800298c:	e032      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	2320      	movs	r3, #32
 80029a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f006 f955 	bl	8008c60 <HAL_PCD_DataOutStageCallback>
 80029b6:	e01d      	b.n	80029f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d114      	bne.n	80029e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029e0:	461a      	mov	r2, r3
 80029e2:	2100      	movs	r1, #0
 80029e4:	f002 face 	bl	8004f84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f006 f936 	bl	8008c60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	4f54300a 	.word	0x4f54300a
 8002a04:	4f54310a 	.word	0x4f54310a

08002a08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	333c      	adds	r3, #60	@ 0x3c
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a15      	ldr	r2, [pc, #84]	@ (8002a90 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d90e      	bls.n	8002a5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	461a      	mov	r2, r3
 8002a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f006 f8ed 	bl	8008c3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d90c      	bls.n	8002a84 <PCD_EP_OutSetupPacket_int+0x7c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2101      	movs	r1, #1
 8002a80:	f002 fa80 	bl	8004f84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	4f54300a 	.word	0x4f54300a

08002a94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ab2:	883b      	ldrh	r3, [r7, #0]
 8002ab4:	0419      	lsls	r1, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ac0:	e028      	b.n	8002b14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	e00d      	b.n	8002af2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3340      	adds	r3, #64	@ 0x40
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3ec      	bcc.n	8002ad6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002afc:	883b      	ldrh	r3, [r7, #0]
 8002afe:	0418      	lsls	r0, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	4302      	orrs	r2, r0
 8002b0c:	3340      	adds	r3, #64	@ 0x40
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e267      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d075      	beq.n	8002c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b7a:	4b88      	ldr	r3, [pc, #544]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d00c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b85      	ldr	r3, [pc, #532]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b82      	ldr	r3, [pc, #520]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05b      	beq.n	8002c64 <HAL_RCC_OscConfig+0x108>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d157      	bne.n	8002c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e242      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x74>
 8002bc2:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x98>
 8002bda:	4b70      	ldr	r3, [pc, #448]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6f      	ldr	r2, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6c      	ldr	r2, [pc, #432]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xb0>
 8002bf4:	4b69      	ldr	r3, [pc, #420]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fa5c 	bl	80010d0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fa58 	bl	80010d0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e207      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xc0>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fa48 	bl	80010d0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fa44 	bl	80010d0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	@ 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1f3      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b51      	ldr	r3, [pc, #324]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0xe8>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c72:	4b4a      	ldr	r3, [pc, #296]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b44      	ldr	r3, [pc, #272]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c7      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4937      	ldr	r1, [pc, #220]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe f9fd 	bl	80010d0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe f9f9 	bl	80010d0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a8      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b28      	ldr	r3, [pc, #160]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4925      	ldr	r1, [pc, #148]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_RCC_OscConfig+0x244>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe f9dc 	bl	80010d0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f9d8 	bl	80010d0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e187      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d036      	beq.n	8002db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe f9bc 	bl	80010d0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe f9b8 	bl	80010d0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e167      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_OscConfig+0x240>)
 8002d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x200>
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_OscConfig+0x248>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f9a5 	bl	80010d0 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d88:	e00e      	b.n	8002da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f9a1 	bl	80010d0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d907      	bls.n	8002da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e150      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	42470000 	.word	0x42470000
 8002da4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	4b88      	ldr	r3, [pc, #544]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1ea      	bne.n	8002d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8097 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b81      	ldr	r3, [pc, #516]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	4a7c      	ldr	r2, [pc, #496]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002de2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	4b77      	ldr	r3, [pc, #476]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d118      	bne.n	8002e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dfe:	4b74      	ldr	r3, [pc, #464]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a73      	ldr	r2, [pc, #460]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f961 	bl	80010d0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe f95d 	bl	80010d0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e10c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd0 <HAL_RCC_OscConfig+0x474>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ea>
 8002e38:	4b64      	ldr	r3, [pc, #400]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a63      	ldr	r2, [pc, #396]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	e01c      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x30c>
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	4a5e      	ldr	r2, [pc, #376]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0x324>
 8002e68:	4b58      	ldr	r3, [pc, #352]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	4a57      	ldr	r2, [pc, #348]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e74:	4b55      	ldr	r3, [pc, #340]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	4a54      	ldr	r2, [pc, #336]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	f023 0304 	bic.w	r3, r3, #4
 8002e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe f922 	bl	80010d0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe f91e 	bl	80010d0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0cb      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea6:	4b49      	ldr	r3, [pc, #292]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <HAL_RCC_OscConfig+0x334>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe f90c 	bl	80010d0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe f908 	bl	80010d0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0b5      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ee      	bne.n	8002ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b39      	ldr	r3, [pc, #228]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	4a38      	ldr	r2, [pc, #224]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a1 	beq.w	800303c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efa:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d05c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d141      	bne.n	8002f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe f8dc 	bl	80010d0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe f8d8 	bl	80010d0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e087      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b27      	ldr	r3, [pc, #156]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	3b01      	subs	r3, #1
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	491b      	ldr	r1, [pc, #108]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe f8b1 	bl	80010d0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe f8ad 	bl	80010d0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e05c      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x416>
 8002f90:	e054      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <HAL_RCC_OscConfig+0x478>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe f89a 	bl	80010d0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe f896 	bl	80010d0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e045      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_RCC_OscConfig+0x470>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x444>
 8002fbe:	e03d      	b.n	800303c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e038      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d028      	beq.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d121      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11a      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003008:	4013      	ands	r3, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800300e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0cc      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b68      	ldr	r3, [pc, #416]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b65      	ldr	r3, [pc, #404]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d044      	beq.n	800316c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d119      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d003      	beq.n	800310a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b3f      	ldr	r3, [pc, #252]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b3b      	ldr	r3, [pc, #236]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e067      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b37      	ldr	r3, [pc, #220]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4934      	ldr	r1, [pc, #208]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800313c:	f7fd ffc8 	bl	80010d0 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fd ffc4 	bl	80010d0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e04f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b2b      	ldr	r3, [pc, #172]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d20c      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	@ (800320c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd ff28 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	0800a380 	.word	0x0800a380
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800321c:	b094      	sub	sp, #80	@ 0x50
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b79      	ldr	r3, [pc, #484]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80e1 	bhi.w	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0db      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b73      	ldr	r3, [pc, #460]	@ (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 800324e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003250:	e0db      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b73      	ldr	r3, [pc, #460]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x208>)
 8003254:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003256:	e0d8      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b6f      	ldr	r3, [pc, #444]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003262:	4b6d      	ldr	r3, [pc, #436]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b6a      	ldr	r3, [pc, #424]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
 8003286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800328a:	4622      	mov	r2, r4
 800328c:	462b      	mov	r3, r5
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4621      	mov	r1, r4
 80032a4:	1a51      	subs	r1, r2, r1
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	4629      	mov	r1, r5
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032bc:	4659      	mov	r1, fp
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	4651      	mov	r1, sl
 80032c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c6:	4651      	mov	r1, sl
 80032c8:	018a      	lsls	r2, r1, #6
 80032ca:	4651      	mov	r1, sl
 80032cc:	ebb2 0801 	subs.w	r8, r2, r1
 80032d0:	4659      	mov	r1, fp
 80032d2:	eb63 0901 	sbc.w	r9, r3, r1
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	4690      	mov	r8, r2
 80032ec:	4699      	mov	r9, r3
 80032ee:	4623      	mov	r3, r4
 80032f0:	eb18 0303 	adds.w	r3, r8, r3
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	462b      	mov	r3, r5
 80032f8:	eb49 0303 	adc.w	r3, r9, r3
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800330a:	4629      	mov	r1, r5
 800330c:	024b      	lsls	r3, r1, #9
 800330e:	4621      	mov	r1, r4
 8003310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003314:	4621      	mov	r1, r4
 8003316:	024a      	lsls	r2, r1, #9
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003328:	f7fc ffaa 	bl	8000280 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003334:	e058      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	4618      	mov	r0, r3
 8003340:	4611      	mov	r1, r2
 8003342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
 800334c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003350:	4642      	mov	r2, r8
 8003352:	464b      	mov	r3, r9
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	0159      	lsls	r1, r3, #5
 800335e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003362:	0150      	lsls	r0, r2, #5
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4641      	mov	r1, r8
 800336a:	ebb2 0a01 	subs.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb63 0b01 	sbc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003388:	ebb2 040a 	subs.w	r4, r2, sl
 800338c:	eb63 050b 	sbc.w	r5, r3, fp
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	464b      	mov	r3, r9
 80033ac:	eb45 0303 	adc.w	r3, r5, r3
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033be:	4629      	mov	r1, r5
 80033c0:	028b      	lsls	r3, r1, #10
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c8:	4621      	mov	r1, r4
 80033ca:	028a      	lsls	r2, r1, #10
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	61fa      	str	r2, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	f7fc ff50 	bl	8000280 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003402:	e002      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_GetSysClockFreq+0x204>)
 8003406:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800340c:	4618      	mov	r0, r3
 800340e:	3750      	adds	r7, #80	@ 0x50
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	@ (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	0800a390 	.word	0x0800a390

08003464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003468:	f7ff ffdc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	@ (8003488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	0800a390 	.word	0x0800a390

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fd34 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	@ 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f82b 	bl	800352c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b0c0      	sub	sp, #256	@ 0x100
 8003532:	af00      	add	r7, sp, #0
 8003534:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	ea40 0301 	orr.w	r3, r0, r1
 8003554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003584:	f021 010c 	bic.w	r1, r1, #12
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a6:	6999      	ldr	r1, [r3, #24]
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	ea40 0301 	orr.w	r3, r0, r1
 80035b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8f      	ldr	r3, [pc, #572]	@ (80037f8 <UART_SetConfig+0x2cc>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d005      	beq.n	80035cc <UART_SetConfig+0xa0>
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b8d      	ldr	r3, [pc, #564]	@ (80037fc <UART_SetConfig+0x2d0>)
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d104      	bne.n	80035d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7ff ff4a 	bl	8003464 <HAL_RCC_GetPCLK2Freq>
 80035d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035d4:	e003      	b.n	80035de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7ff ff31 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80035da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e8:	f040 810c 	bne.w	8003804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	1891      	adds	r1, r2, r2
 8003604:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003606:	415b      	adcs	r3, r3
 8003608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800360a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800360e:	4621      	mov	r1, r4
 8003610:	eb12 0801 	adds.w	r8, r2, r1
 8003614:	4629      	mov	r1, r5
 8003616:	eb43 0901 	adc.w	r9, r3, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	4623      	mov	r3, r4
 8003634:	eb18 0303 	adds.w	r3, r8, r3
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800363c:	462b      	mov	r3, r5
 800363e:	eb49 0303 	adc.w	r3, r9, r3
 8003642:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800365a:	460b      	mov	r3, r1
 800365c:	18db      	adds	r3, r3, r3
 800365e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003660:	4613      	mov	r3, r2
 8003662:	eb42 0303 	adc.w	r3, r2, r3
 8003666:	657b      	str	r3, [r7, #84]	@ 0x54
 8003668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800366c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003670:	f7fc fe06 	bl	8000280 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4b61      	ldr	r3, [pc, #388]	@ (8003800 <UART_SetConfig+0x2d4>)
 800367a:	fba3 2302 	umull	r2, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	011c      	lsls	r4, r3, #4
 8003682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800368c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	1891      	adds	r1, r2, r2
 800369a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800369c:	415b      	adcs	r3, r3
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036a4:	4641      	mov	r1, r8
 80036a6:	eb12 0a01 	adds.w	sl, r2, r1
 80036aa:	4649      	mov	r1, r9
 80036ac:	eb43 0b01 	adc.w	fp, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c4:	4692      	mov	sl, r2
 80036c6:	469b      	mov	fp, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	eb1a 0303 	adds.w	r3, sl, r3
 80036ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036d2:	464b      	mov	r3, r9
 80036d4:	eb4b 0303 	adc.w	r3, fp, r3
 80036d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036f0:	460b      	mov	r3, r1
 80036f2:	18db      	adds	r3, r3, r3
 80036f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036f6:	4613      	mov	r3, r2
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003706:	f7fc fdbb 	bl	8000280 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4611      	mov	r1, r2
 8003710:	4b3b      	ldr	r3, [pc, #236]	@ (8003800 <UART_SetConfig+0x2d4>)
 8003712:	fba3 2301 	umull	r2, r3, r3, r1
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	@ 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1acb      	subs	r3, r1, r3
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003726:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <UART_SetConfig+0x2d4>)
 8003728:	fba3 2302 	umull	r2, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003734:	441c      	add	r4, r3
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003740:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003750:	415b      	adcs	r3, r3
 8003752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003758:	4641      	mov	r1, r8
 800375a:	1851      	adds	r1, r2, r1
 800375c:	6339      	str	r1, [r7, #48]	@ 0x30
 800375e:	4649      	mov	r1, r9
 8003760:	414b      	adcs	r3, r1
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003770:	4659      	mov	r1, fp
 8003772:	00cb      	lsls	r3, r1, #3
 8003774:	4651      	mov	r1, sl
 8003776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377a:	4651      	mov	r1, sl
 800377c:	00ca      	lsls	r2, r1, #3
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	4603      	mov	r3, r0
 8003784:	4642      	mov	r2, r8
 8003786:	189b      	adds	r3, r3, r2
 8003788:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800378c:	464b      	mov	r3, r9
 800378e:	460a      	mov	r2, r1
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037ac:	460b      	mov	r3, r1
 80037ae:	18db      	adds	r3, r3, r3
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b2:	4613      	mov	r3, r2
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037c2:	f7fc fd5d 	bl	8000280 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <UART_SetConfig+0x2d4>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	@ 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3332      	adds	r3, #50	@ 0x32
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <UART_SetConfig+0x2d4>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4422      	add	r2, r4
 80037f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f4:	e106      	b.n	8003a04 <UART_SetConfig+0x4d8>
 80037f6:	bf00      	nop
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40011400 	.word	0x40011400
 8003800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800380e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003816:	4642      	mov	r2, r8
 8003818:	464b      	mov	r3, r9
 800381a:	1891      	adds	r1, r2, r2
 800381c:	6239      	str	r1, [r7, #32]
 800381e:	415b      	adcs	r3, r3
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003826:	4641      	mov	r1, r8
 8003828:	1854      	adds	r4, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0501 	adc.w	r5, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	00eb      	lsls	r3, r5, #3
 800383a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	4614      	mov	r4, r2
 8003842:	461d      	mov	r5, r3
 8003844:	4643      	mov	r3, r8
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800384c:	464b      	mov	r3, r9
 800384e:	eb45 0303 	adc.w	r3, r5, r3
 8003852:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003862:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003872:	4629      	mov	r1, r5
 8003874:	008b      	lsls	r3, r1, #2
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387c:	4621      	mov	r1, r4
 800387e:	008a      	lsls	r2, r1, #2
 8003880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003884:	f7fc fcfc 	bl	8000280 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4b60      	ldr	r3, [pc, #384]	@ (8003a10 <UART_SetConfig+0x4e4>)
 800388e:	fba3 2302 	umull	r2, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	011c      	lsls	r4, r3, #4
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	61b9      	str	r1, [r7, #24]
 80038b0:	415b      	adcs	r3, r3
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b8:	4641      	mov	r1, r8
 80038ba:	1851      	adds	r1, r2, r1
 80038bc:	6139      	str	r1, [r7, #16]
 80038be:	4649      	mov	r1, r9
 80038c0:	414b      	adcs	r3, r1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d0:	4659      	mov	r1, fp
 80038d2:	00cb      	lsls	r3, r1, #3
 80038d4:	4651      	mov	r1, sl
 80038d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038da:	4651      	mov	r1, sl
 80038dc:	00ca      	lsls	r2, r1, #3
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	4642      	mov	r2, r8
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038ec:	464b      	mov	r3, r9
 80038ee:	460a      	mov	r2, r1
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003902:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003910:	4649      	mov	r1, r9
 8003912:	008b      	lsls	r3, r1, #2
 8003914:	4641      	mov	r1, r8
 8003916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391a:	4641      	mov	r1, r8
 800391c:	008a      	lsls	r2, r1, #2
 800391e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003922:	f7fc fcad 	bl	8000280 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4611      	mov	r1, r2
 800392c:	4b38      	ldr	r3, [pc, #224]	@ (8003a10 <UART_SetConfig+0x4e4>)
 800392e:	fba3 2301 	umull	r2, r3, r3, r1
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2264      	movs	r2, #100	@ 0x64
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	1acb      	subs	r3, r1, r3
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	3332      	adds	r3, #50	@ 0x32
 8003940:	4a33      	ldr	r2, [pc, #204]	@ (8003a10 <UART_SetConfig+0x4e4>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800394c:	441c      	add	r4, r3
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	673b      	str	r3, [r7, #112]	@ 0x70
 8003956:	677a      	str	r2, [r7, #116]	@ 0x74
 8003958:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	1891      	adds	r1, r2, r2
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	415b      	adcs	r3, r3
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800396c:	4641      	mov	r1, r8
 800396e:	1851      	adds	r1, r2, r1
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	4649      	mov	r1, r9
 8003974:	414b      	adcs	r3, r1
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003984:	4659      	mov	r1, fp
 8003986:	00cb      	lsls	r3, r1, #3
 8003988:	4651      	mov	r1, sl
 800398a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398e:	4651      	mov	r1, sl
 8003990:	00ca      	lsls	r2, r1, #3
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	4603      	mov	r3, r0
 8003998:	4642      	mov	r2, r8
 800399a:	189b      	adds	r3, r3, r2
 800399c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399e:	464b      	mov	r3, r9
 80039a0:	460a      	mov	r2, r1
 80039a2:	eb42 0303 	adc.w	r3, r2, r3
 80039a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80039b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039c0:	4649      	mov	r1, r9
 80039c2:	008b      	lsls	r3, r1, #2
 80039c4:	4641      	mov	r1, r8
 80039c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ca:	4641      	mov	r1, r8
 80039cc:	008a      	lsls	r2, r1, #2
 80039ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039d2:	f7fc fc55 	bl	8000280 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <UART_SetConfig+0x4e4>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	@ 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	3332      	adds	r3, #50	@ 0x32
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <UART_SetConfig+0x4e4>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4422      	add	r2, r4
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a10:	51eb851f 	.word	0x51eb851f

08003a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a14:	b084      	sub	sp, #16
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	f107 001c 	add.w	r0, r7, #28
 8003a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d123      	bne.n	8003a76 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f001 fae8 	bl	8005040 <USB_CoreReset>
 8003a70:	4603      	mov	r3, r0
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	e01b      	b.n	8003aae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f001 fadc 	bl	8005040 <USB_CoreReset>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003aa0:	e005      	b.n	8003aae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aae:	7fbb      	ldrb	r3, [r7, #30]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d10b      	bne.n	8003acc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f043 0206 	orr.w	r2, r3, #6
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad8:	b004      	add	sp, #16
 8003ada:	4770      	bx	lr

08003adc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d165      	bne.n	8003bbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a41      	ldr	r2, [pc, #260]	@ (8003bf8 <USB_SetTurnaroundTime+0x11c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d906      	bls.n	8003b06 <USB_SetTurnaroundTime+0x2a>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4a40      	ldr	r2, [pc, #256]	@ (8003bfc <USB_SetTurnaroundTime+0x120>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d202      	bcs.n	8003b06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b00:	230f      	movs	r3, #15
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e062      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	@ (8003bfc <USB_SetTurnaroundTime+0x120>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d306      	bcc.n	8003b1c <USB_SetTurnaroundTime+0x40>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4a3b      	ldr	r2, [pc, #236]	@ (8003c00 <USB_SetTurnaroundTime+0x124>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d202      	bcs.n	8003b1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b16:	230e      	movs	r3, #14
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e057      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4a38      	ldr	r2, [pc, #224]	@ (8003c00 <USB_SetTurnaroundTime+0x124>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d306      	bcc.n	8003b32 <USB_SetTurnaroundTime+0x56>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4a37      	ldr	r2, [pc, #220]	@ (8003c04 <USB_SetTurnaroundTime+0x128>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d202      	bcs.n	8003b32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b2c:	230d      	movs	r3, #13
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e04c      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <USB_SetTurnaroundTime+0x128>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d306      	bcc.n	8003b48 <USB_SetTurnaroundTime+0x6c>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <USB_SetTurnaroundTime+0x12c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d802      	bhi.n	8003b48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003b42:	230c      	movs	r3, #12
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e041      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c08 <USB_SetTurnaroundTime+0x12c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d906      	bls.n	8003b5e <USB_SetTurnaroundTime+0x82>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4a2e      	ldr	r2, [pc, #184]	@ (8003c0c <USB_SetTurnaroundTime+0x130>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d802      	bhi.n	8003b5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003b58:	230b      	movs	r3, #11
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e036      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <USB_SetTurnaroundTime+0x130>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d906      	bls.n	8003b74 <USB_SetTurnaroundTime+0x98>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <USB_SetTurnaroundTime+0x134>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003b6e:	230a      	movs	r3, #10
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e02b      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4a26      	ldr	r2, [pc, #152]	@ (8003c10 <USB_SetTurnaroundTime+0x134>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d906      	bls.n	8003b8a <USB_SetTurnaroundTime+0xae>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	@ (8003c14 <USB_SetTurnaroundTime+0x138>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d202      	bcs.n	8003b8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b84:	2309      	movs	r3, #9
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	e020      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a21      	ldr	r2, [pc, #132]	@ (8003c14 <USB_SetTurnaroundTime+0x138>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d306      	bcc.n	8003ba0 <USB_SetTurnaroundTime+0xc4>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a20      	ldr	r2, [pc, #128]	@ (8003c18 <USB_SetTurnaroundTime+0x13c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d802      	bhi.n	8003ba0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e015      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c18 <USB_SetTurnaroundTime+0x13c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d906      	bls.n	8003bb6 <USB_SetTurnaroundTime+0xda>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <USB_SetTurnaroundTime+0x140>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d202      	bcs.n	8003bb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e00a      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003bb6:	2306      	movs	r3, #6
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e007      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003bc2:	2309      	movs	r3, #9
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e001      	b.n	8003bcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003bc8:	2309      	movs	r3, #9
 8003bca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	00d8acbf 	.word	0x00d8acbf
 8003bfc:	00e4e1c0 	.word	0x00e4e1c0
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	01067380 	.word	0x01067380
 8003c08:	011a499f 	.word	0x011a499f
 8003c0c:	01312cff 	.word	0x01312cff
 8003c10:	014ca43f 	.word	0x014ca43f
 8003c14:	016e3600 	.word	0x016e3600
 8003c18:	01a6ab1f 	.word	0x01a6ab1f
 8003c1c:	01e84800 	.word	0x01e84800

08003c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d115      	bne.n	8003cb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003c92:	200a      	movs	r0, #10
 8003c94:	f7fd fa28 	bl	80010e8 <HAL_Delay>
      ms += 10U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	330a      	adds	r3, #10
 8003c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 f93f 	bl	8004f22 <USB_GetMode>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d01e      	beq.n	8003ce8 <USB_SetCurrentMode+0x84>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2bc7      	cmp	r3, #199	@ 0xc7
 8003cae:	d9f0      	bls.n	8003c92 <USB_SetCurrentMode+0x2e>
 8003cb0:	e01a      	b.n	8003ce8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d115      	bne.n	8003ce4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003cc4:	200a      	movs	r0, #10
 8003cc6:	f7fd fa0f 	bl	80010e8 <HAL_Delay>
      ms += 10U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	330a      	adds	r3, #10
 8003cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 f926 	bl	8004f22 <USB_GetMode>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <USB_SetCurrentMode+0x84>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ce0:	d9f0      	bls.n	8003cc4 <USB_SetCurrentMode+0x60>
 8003ce2:	e001      	b.n	8003ce8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e005      	b.n	8003cf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2bc8      	cmp	r3, #200	@ 0xc8
 8003cec:	d101      	bne.n	8003cf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	e009      	b.n	8003d30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3340      	adds	r3, #64	@ 0x40
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0e      	cmp	r3, #14
 8003d34:	d9f2      	bls.n	8003d1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11c      	bne.n	8003d78 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d62:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d76:	e00b      	b.n	8003d90 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10d      	bne.n	8003dc0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003dac:	2100      	movs	r1, #0
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f968 	bl	8004084 <USB_SetDevSpeed>
 8003db4:	e008      	b.n	8003dc8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003db6:	2101      	movs	r1, #1
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f963 	bl	8004084 <USB_SetDevSpeed>
 8003dbe:	e003      	b.n	8003dc8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dc0:	2103      	movs	r1, #3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f95e 	bl	8004084 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dc8:	2110      	movs	r1, #16
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8fa 	bl	8003fc4 <USB_FlushTxFifo>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f924 	bl	8004028 <USB_FlushRxFifo>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df0:	461a      	mov	r2, r3
 8003df2:	2300      	movs	r3, #0
 8003df4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e043      	b.n	8003e9c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e2a:	d118      	bne.n	8003e5e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e013      	b.n	8003e70 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e008      	b.n	8003e70 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d3b5      	bcc.n	8003e14 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e043      	b.n	8003f36 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ec4:	d118      	bne.n	8003ef8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e013      	b.n	8003f0a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e008      	b.n	8003f0a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f04:	461a      	mov	r2, r3
 8003f06:	2300      	movs	r3, #0
 8003f08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f16:	461a      	mov	r2, r3
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	3301      	adds	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d3b5      	bcc.n	8003eae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003f62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f043 0210 	orr.w	r2, r3, #16
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <USB_DevInit+0x2c4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f043 0208 	orr.w	r2, r3, #8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fbc:	b004      	add	sp, #16
 8003fbe:	4770      	bx	lr
 8003fc0:	803c3800 	.word	0x803c3800

08003fc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fde:	d901      	bls.n	8003fe4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e01b      	b.n	800401c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	daf2      	bge.n	8003fd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004008:	d901      	bls.n	800400e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e006      	b.n	800401c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b20      	cmp	r3, #32
 8004018:	d0f0      	beq.n	8003ffc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004040:	d901      	bls.n	8004046 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e018      	b.n	8004078 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	daf2      	bge.n	8004034 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2210      	movs	r2, #16
 8004056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004064:	d901      	bls.n	800406a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e006      	b.n	8004078 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d0f0      	beq.n	8004058 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
 80040da:	e00a      	b.n	80040f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d002      	beq.n	80040e8 <USB_GetDevSpeed+0x32>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d102      	bne.n	80040ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80040e8:	2302      	movs	r3, #2
 80040ea:	75fb      	strb	r3, [r7, #23]
 80040ec:	e001      	b.n	80040f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80040ee:	230f      	movs	r3, #15
 80040f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d13a      	bne.n	8004192 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800413a:	4313      	orrs	r3, r2
 800413c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d155      	bne.n	8004200 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004170:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	059b      	lsls	r3, r3, #22
 8004176:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004178:	4313      	orrs	r3, r2
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e036      	b.n	8004200 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11a      	bne.n	8004200 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041e6:	430b      	orrs	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d161      	bne.n	80042f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800423e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004242:	d11f      	bne.n	8004284 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800425e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004262:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800427e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800428a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a4:	4013      	ands	r3, r2
 80042a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c8:	4013      	ands	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	0159      	lsls	r1, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e6:	4619      	mov	r1, r3
 80042e8:	4b35      	ldr	r3, [pc, #212]	@ (80043c0 <USB_DeactivateEndpoint+0x1b0>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]
 80042ee:	e060      	b.n	80043b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004306:	d11f      	bne.n	8004348 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004322:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004326:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	440a      	add	r2, r1
 800433e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004346:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	2101      	movs	r1, #1
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	43db      	mvns	r3, r3
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004368:	4013      	ands	r3, r2
 800436a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	43db      	mvns	r3, r3
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800438c:	4013      	ands	r3, r2
 800438e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0159      	lsls	r1, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	440b      	add	r3, r1
 80043a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043aa:	4619      	mov	r1, r3
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <USB_DeactivateEndpoint+0x1b4>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	ec337800 	.word	0xec337800
 80043c4:	eff37800 	.word	0xeff37800

080043c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 817f 	bne.w	80046e8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d132      	bne.n	8004458 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800440c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004410:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004430:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004450:	0cdb      	lsrs	r3, r3, #19
 8004452:	04db      	lsls	r3, r3, #19
 8004454:	6113      	str	r3, [r2, #16]
 8004456:	e097      	b.n	8004588 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	0151      	lsls	r1, r2, #5
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	440a      	add	r2, r1
 800446e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004472:	0cdb      	lsrs	r3, r3, #19
 8004474:	04db      	lsls	r3, r3, #19
 8004476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004492:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004496:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800449a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11a      	bne.n	80044d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d903      	bls.n	80044b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	0151      	lsls	r1, r2, #5
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	440a      	add	r2, r1
 80044cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044d4:	6113      	str	r3, [r2, #16]
 80044d6:	e044      	b.n	8004562 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	8afb      	ldrh	r3, [r7, #22]
 80044fe:	04d9      	lsls	r1, r3, #19
 8004500:	4ba4      	ldr	r3, [pc, #656]	@ (8004794 <USB_EPStartXfer+0x3cc>)
 8004502:	400b      	ands	r3, r1
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	0148      	lsls	r0, r1, #5
 8004508:	69f9      	ldr	r1, [r7, #28]
 800450a:	4401      	add	r1, r0
 800450c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004510:	4313      	orrs	r3, r2
 8004512:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	791b      	ldrb	r3, [r3, #4]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d122      	bne.n	8004562 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004536:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800453a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	075b      	lsls	r3, r3, #29
 800454e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004552:	69b9      	ldr	r1, [r7, #24]
 8004554:	0148      	lsls	r0, r1, #5
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	4401      	add	r1, r0
 800455a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	0148      	lsls	r0, r1, #5
 800457c:	69f9      	ldr	r1, [r7, #28]
 800457e:	4401      	add	r1, r0
 8004580:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d14b      	bne.n	8004626 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	791b      	ldrb	r3, [r3, #4]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d128      	bne.n	8004604 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d110      	bne.n	80045e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e00f      	b.n	8004604 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004602:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e166      	b.n	80048f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004640:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004644:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	791b      	ldrb	r3, [r3, #4]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d015      	beq.n	800467a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 814e 	beq.w	80048f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2101      	movs	r1, #1
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004674:	4313      	orrs	r3, r2
 8004676:	634b      	str	r3, [r1, #52]	@ 0x34
 8004678:	e13c      	b.n	80048f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d110      	bne.n	80046ac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	e00f      	b.n	80046cc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	b298      	uxth	r0, r3
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	4603      	mov	r3, r0
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f9b9 	bl	8004a58 <USB_WritePacket>
 80046e6:	e105      	b.n	80048f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004702:	0cdb      	lsrs	r3, r3, #19
 8004704:	04db      	lsls	r3, r3, #19
 8004706:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004722:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004726:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800472a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d132      	bne.n	8004798 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004760:	69b9      	ldr	r1, [r7, #24]
 8004762:	0148      	lsls	r0, r1, #5
 8004764:	69f9      	ldr	r1, [r7, #28]
 8004766:	4401      	add	r1, r0
 8004768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800478a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800478e:	6113      	str	r3, [r2, #16]
 8004790:	e062      	b.n	8004858 <USB_EPStartXfer+0x490>
 8004792:	bf00      	nop
 8004794:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d123      	bne.n	80047e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	0148      	lsls	r0, r1, #5
 80047ba:	69f9      	ldr	r1, [r7, #28]
 80047bc:	4401      	add	r1, r0
 80047be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	0151      	lsls	r1, r2, #5
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	440a      	add	r2, r1
 80047dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047e4:	6113      	str	r3, [r2, #16]
 80047e6:	e037      	b.n	8004858 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	1e5a      	subs	r2, r3, #1
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	8afa      	ldrh	r2, [r7, #22]
 8004804:	fb03 f202 	mul.w	r2, r3, r2
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	8afb      	ldrh	r3, [r7, #22]
 800481c:	04d9      	lsls	r1, r3, #19
 800481e:	4b38      	ldr	r3, [pc, #224]	@ (8004900 <USB_EPStartXfer+0x538>)
 8004820:	400b      	ands	r3, r1
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	0148      	lsls	r0, r1, #5
 8004826:	69f9      	ldr	r1, [r7, #28]
 8004828:	4401      	add	r1, r0
 800482a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	0148      	lsls	r0, r1, #5
 800484c:	69f9      	ldr	r1, [r7, #28]
 800484e:	4401      	add	r1, r0
 8004850:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004854:	4313      	orrs	r3, r2
 8004856:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10d      	bne.n	800487a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	68d9      	ldr	r1, [r3, #12]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004876:	460a      	mov	r2, r1
 8004878:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	791b      	ldrb	r3, [r3, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d128      	bne.n	80048d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d110      	bne.n	80048b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	e00f      	b.n	80048d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80048f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	1ff80000 	.word	0x1ff80000

08004904 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d14a      	bne.n	80049b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800493a:	f040 8086 	bne.w	8004a4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800495c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004960:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004980:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004984:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004992:	4293      	cmp	r3, r2
 8004994:	d902      	bls.n	800499c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
          break;
 800499a:	e056      	b.n	8004a4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049b4:	d0e7      	beq.n	8004986 <USB_EPStopXfer+0x82>
 80049b6:	e048      	b.n	8004a4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d0:	d13b      	bne.n	8004a4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d902      	bls.n	8004a30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a2e:	e00c      	b.n	8004a4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a48:	d0e7      	beq.n	8004a1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	@ 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	4611      	mov	r1, r2
 8004a64:	461a      	mov	r2, r3
 8004a66:	460b      	mov	r3, r1
 8004a68:	71fb      	strb	r3, [r7, #7]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d123      	bne.n	8004ac6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a7e:	88bb      	ldrh	r3, [r7, #4]
 8004a80:	3303      	adds	r3, #3
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e018      	b.n	8004abe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	031a      	lsls	r2, r3, #12
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a98:	461a      	mov	r2, r3
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3e2      	bcc.n	8004a8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3724      	adds	r7, #36	@ 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b08b      	sub	sp, #44	@ 0x2c
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e014      	b.n	8004b2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	3301      	adds	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	3301      	adds	r3, #1
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	3301      	adds	r3, #1
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	3301      	adds	r3, #1
 8004b28:	623b      	str	r3, [r7, #32]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3e6      	bcc.n	8004b00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b32:	8bfb      	ldrh	r3, [r7, #30]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01e      	beq.n	8004b76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b42:	461a      	mov	r2, r3
 8004b44:	f107 0310 	add.w	r3, r7, #16
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	701a      	strb	r2, [r3, #0]
      i++;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	3301      	adds	r3, #1
 8004b62:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	3301      	adds	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004b6a:	8bfb      	ldrh	r3, [r7, #30]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b70:	8bfb      	ldrh	r3, [r7, #30]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ea      	bne.n	8004b4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	372c      	adds	r7, #44	@ 0x2c
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d12c      	bne.n	8004bfa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db12      	blt.n	8004bd8 <USB_EPSetStall+0x54>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00f      	beq.n	8004bd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	e02b      	b.n	8004c52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db12      	blt.n	8004c32 <USB_EPSetStall+0xae>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00f      	beq.n	8004c32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d128      	bne.n	8004cce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	791b      	ldrb	r3, [r3, #4]
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d003      	beq.n	8004cac <USB_EPClearStall+0x4c>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	791b      	ldrb	r3, [r3, #4]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d138      	bne.n	8004d1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e027      	b.n	8004d1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ce8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	791b      	ldrb	r3, [r3, #4]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d003      	beq.n	8004cfe <USB_EPClearStall+0x9e>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	791b      	ldrb	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d10f      	bne.n	8004d1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004da6:	f023 0302 	bic.w	r3, r3, #2
 8004daa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004dd4:	f023 0303 	bic.w	r3, r3, #3
 8004dd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4013      	ands	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	4013      	ands	r3, r2
 8004e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	0c1b      	lsrs	r3, r3, #16
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	b29b      	uxth	r3, r3
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	01db      	lsls	r3, r3, #7
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f14:	68bb      	ldr	r3, [r7, #8]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	333c      	adds	r3, #60	@ 0x3c
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4a26      	ldr	r2, [pc, #152]	@ (800503c <USB_EP0_OutStart+0xb8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d90a      	bls.n	8004fbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fb8:	d101      	bne.n	8004fbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e037      	b.n	800502e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fec:	f043 0318 	orr.w	r3, r3, #24
 8004ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005000:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005004:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005006:	7afb      	ldrb	r3, [r7, #11]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10f      	bne.n	800502c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005026:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800502a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	4f54300a 	.word	0x4f54300a

08005040 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3301      	adds	r3, #1
 8005050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005058:	d901      	bls.n	800505e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e022      	b.n	80050a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	daf2      	bge.n	800504c <USB_CoreReset+0xc>

  count = 10U;
 8005066:	230a      	movs	r3, #10
 8005068:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800506a:	e002      	b.n	8005072 <USB_CoreReset+0x32>
  {
    count--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f9      	bne.n	800506c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f043 0201 	orr.w	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3301      	adds	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005090:	d901      	bls.n	8005096 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e006      	b.n	80050a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d0f0      	beq.n	8005084 <USB_CoreReset+0x44>

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80050bc:	f44f 7021 	mov.w	r0, #644	@ 0x284
 80050c0:	f004 f84e 	bl	8009160 <USBD_static_malloc>
 80050c4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	32b0      	adds	r2, #176	@ 0xb0
 80050d6:	2100      	movs	r1, #0
 80050d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80050dc:	2302      	movs	r3, #2
 80050de:	e06e      	b.n	80051be <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	32b0      	adds	r2, #176	@ 0xb0
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	32b0      	adds	r2, #176	@ 0xb0
 80050fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	7c1b      	ldrb	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d12b      	bne.n	8005164 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800510c:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <USBD_MSC_Init+0x118>)
 800510e:	7819      	ldrb	r1, [r3, #0]
 8005110:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005114:	2202      	movs	r2, #2
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f003 fedf 	bl	8008eda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800511c:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <USBD_MSC_Init+0x118>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <USBD_MSC_Init+0x11c>)
 800513a:	7819      	ldrb	r1, [r3, #0]
 800513c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005140:	2202      	movs	r2, #2
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f003 fec9 	bl	8008eda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8005148:	4b20      	ldr	r3, [pc, #128]	@ (80051cc <USBD_MSC_Init+0x11c>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3323      	adds	r3, #35	@ 0x23
 800515e:	2201      	movs	r2, #1
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	e028      	b.n	80051b6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005164:	4b18      	ldr	r3, [pc, #96]	@ (80051c8 <USBD_MSC_Init+0x118>)
 8005166:	7819      	ldrb	r1, [r3, #0]
 8005168:	2340      	movs	r3, #64	@ 0x40
 800516a:	2202      	movs	r2, #2
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f003 feb4 	bl	8008eda <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8005172:	4b15      	ldr	r3, [pc, #84]	@ (80051c8 <USBD_MSC_Init+0x118>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	f003 020f 	and.w	r2, r3, #15
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800518e:	4b0f      	ldr	r3, [pc, #60]	@ (80051cc <USBD_MSC_Init+0x11c>)
 8005190:	7819      	ldrb	r1, [r3, #0]
 8005192:	2340      	movs	r3, #64	@ 0x40
 8005194:	2202      	movs	r2, #2
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f003 fe9f 	bl	8008eda <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800519c:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <USBD_MSC_Init+0x11c>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3323      	adds	r3, #35	@ 0x23
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa30 	bl	800561c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2000006f 	.word	0x2000006f
 80051cc:	2000006e 	.word	0x2000006e

080051d0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 80051dc:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <USBD_MSC_DeInit+0xa8>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f003 fe9f 	bl	8008f26 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 80051e8:	4b23      	ldr	r3, [pc, #140]	@ (8005278 <USBD_MSC_DeInit+0xa8>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 020f 	and.w	r2, r3, #15
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <USBD_MSC_DeInit+0xac>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f003 fe8b 	bl	8008f26 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <USBD_MSC_DeInit+0xac>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 020f 	and.w	r2, r3, #15
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3323      	adds	r3, #35	@ 0x23
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	32b0      	adds	r2, #176	@ 0xb0
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d018      	beq.n	800526e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa6b 	bl	8005718 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	32b0      	adds	r2, #176	@ 0xb0
 800524c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005250:	4618      	mov	r0, r3
 8005252:	f003 ff93 	bl	800917c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	32b0      	adds	r2, #176	@ 0xb0
 8005260:	2100      	movs	r1, #0
 8005262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	2000006f 	.word	0x2000006f
 800527c:	2000006e 	.word	0x2000006e

08005280 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	32b0      	adds	r2, #176	@ 0xb0
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0e5      	b.n	8005478 <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d058      	beq.n	800536a <USBD_MSC_Setup+0xea>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	f040 80d5 	bne.w	8005468 <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80052c4:	d002      	beq.n	80052cc <USBD_MSC_Setup+0x4c>
 80052c6:	2bff      	cmp	r3, #255	@ 0xff
 80052c8:	d02f      	beq.n	800532a <USBD_MSC_Setup+0xaa>
 80052ca:	e046      	b.n	800535a <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	885b      	ldrh	r3, [r3, #2]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d123      	bne.n	800531c <USBD_MSC_Setup+0x9c>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	88db      	ldrh	r3, [r3, #6]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d11f      	bne.n	800531c <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	da1a      	bge.n	800531c <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	33b0      	adds	r3, #176	@ 0xb0
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b02      	cmp	r3, #2
 8005302:	bf28      	it	cs
 8005304:	2302      	movcs	r3, #2
 8005306:	461a      	mov	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2201      	movs	r2, #1
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f003 fa0a 	bl	800872c <USBD_CtlSendData>
 8005318:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800531a:	e025      	b.n	8005368 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f003 f987 	bl	8008632 <USBD_CtlError>
            ret = USBD_FAIL;
 8005324:	2303      	movs	r3, #3
 8005326:	75fb      	strb	r3, [r7, #23]
          break;
 8005328:	e01e      	b.n	8005368 <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	885b      	ldrh	r3, [r3, #2]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10c      	bne.n	800534c <USBD_MSC_Setup+0xcc>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	88db      	ldrh	r3, [r3, #6]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d108      	bne.n	800534c <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005340:	2b00      	cmp	r3, #0
 8005342:	db03      	blt.n	800534c <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f9b3 	bl	80056b0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800534a:	e00d      	b.n	8005368 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f003 f96f 	bl	8008632 <USBD_CtlError>
            ret = USBD_FAIL;
 8005354:	2303      	movs	r3, #3
 8005356:	75fb      	strb	r3, [r7, #23]
          break;
 8005358:	e006      	b.n	8005368 <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f003 f968 	bl	8008632 <USBD_CtlError>
          ret = USBD_FAIL;
 8005362:	2303      	movs	r3, #3
 8005364:	75fb      	strb	r3, [r7, #23]
          break;
 8005366:	bf00      	nop
      }
      break;
 8005368:	e085      	b.n	8005476 <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	2b0b      	cmp	r3, #11
 8005370:	d871      	bhi.n	8005456 <USBD_MSC_Setup+0x1d6>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <USBD_MSC_Setup+0xf8>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053a9 	.word	0x080053a9
 800537c:	08005425 	.word	0x08005425
 8005380:	08005457 	.word	0x08005457
 8005384:	08005457 	.word	0x08005457
 8005388:	08005457 	.word	0x08005457
 800538c:	08005457 	.word	0x08005457
 8005390:	08005457 	.word	0x08005457
 8005394:	08005457 	.word	0x08005457
 8005398:	08005457 	.word	0x08005457
 800539c:	08005457 	.word	0x08005457
 80053a0:	080053d3 	.word	0x080053d3
 80053a4:	080053fd 	.word	0x080053fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d107      	bne.n	80053c4 <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053b4:	f107 030a 	add.w	r3, r7, #10
 80053b8:	2202      	movs	r2, #2
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f003 f9b5 	bl	800872c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053c2:	e050      	b.n	8005466 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f003 f933 	bl	8008632 <USBD_CtlError>
            ret = USBD_FAIL;
 80053cc:	2303      	movs	r3, #3
 80053ce:	75fb      	strb	r3, [r7, #23]
          break;
 80053d0:	e049      	b.n	8005466 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3304      	adds	r3, #4
 80053e2:	2201      	movs	r2, #1
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f003 f9a0 	bl	800872c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053ec:	e03b      	b.n	8005466 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f003 f91e 	bl	8008632 <USBD_CtlError>
            ret = USBD_FAIL;
 80053f6:	2303      	movs	r3, #3
 80053f8:	75fb      	strb	r3, [r7, #23]
          break;
 80053fa:	e034      	b.n	8005466 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d106      	bne.n	8005416 <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	885b      	ldrh	r3, [r3, #2]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005414:	e027      	b.n	8005466 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f003 f90a 	bl	8008632 <USBD_CtlError>
            ret = USBD_FAIL;
 800541e:	2303      	movs	r3, #3
 8005420:	75fb      	strb	r3, [r7, #23]
          break;
 8005422:	e020      	b.n	8005466 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d119      	bne.n	8005464 <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	885b      	ldrh	r3, [r3, #2]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d115      	bne.n	8005464 <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	889b      	ldrh	r3, [r3, #4]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f003 fd8f 	bl	8008f64 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	889b      	ldrh	r3, [r3, #4]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fb30 	bl	8005ab4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005454:	e006      	b.n	8005464 <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f003 f8ea 	bl	8008632 <USBD_CtlError>
          ret = USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	75fb      	strb	r3, [r7, #23]
          break;
 8005462:	e000      	b.n	8005466 <USBD_MSC_Setup+0x1e6>
          break;
 8005464:	bf00      	nop
      }
      break;
 8005466:	e006      	b.n	8005476 <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f003 f8e1 	bl	8008632 <USBD_CtlError>
      ret = USBD_FAIL;
 8005470:	2303      	movs	r3, #3
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	bf00      	nop
  }

  return (uint8_t)ret;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f959 	bl	8005748 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f983 	bl	80057bc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80054c8:	2181      	movs	r1, #129	@ 0x81
 80054ca:	4812      	ldr	r0, [pc, #72]	@ (8005514 <USBD_MSC_GetHSCfgDesc+0x54>)
 80054cc:	f002 fa79 	bl	80079c2 <USBD_GetEpDesc>
 80054d0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80054d2:	2101      	movs	r1, #1
 80054d4:	480f      	ldr	r0, [pc, #60]	@ (8005514 <USBD_MSC_GetHSCfgDesc+0x54>)
 80054d6:	f002 fa74 	bl	80079c2 <USBD_GetEpDesc>
 80054da:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	711a      	strb	r2, [r3, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f042 0202 	orr.w	r2, r2, #2
 80054ee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	711a      	strb	r2, [r3, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f042 0202 	orr.w	r2, r2, #2
 8005502:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800550a:	4b02      	ldr	r3, [pc, #8]	@ (8005514 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000044 	.word	0x20000044

08005518 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005520:	2181      	movs	r1, #129	@ 0x81
 8005522:	4812      	ldr	r0, [pc, #72]	@ (800556c <USBD_MSC_GetFSCfgDesc+0x54>)
 8005524:	f002 fa4d 	bl	80079c2 <USBD_GetEpDesc>
 8005528:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800552a:	2101      	movs	r1, #1
 800552c:	480f      	ldr	r0, [pc, #60]	@ (800556c <USBD_MSC_GetFSCfgDesc+0x54>)
 800552e:	f002 fa48 	bl	80079c2 <USBD_GetEpDesc>
 8005532:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005542:	711a      	strb	r2, [r3, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d006      	beq.n	800555c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2200      	movs	r2, #0
 8005552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005556:	711a      	strb	r2, [r3, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8005562:	4b02      	ldr	r3, [pc, #8]	@ (800556c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000044 	.word	0x20000044

08005570 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8005578:	2181      	movs	r1, #129	@ 0x81
 800557a:	4812      	ldr	r0, [pc, #72]	@ (80055c4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800557c:	f002 fa21 	bl	80079c2 <USBD_GetEpDesc>
 8005580:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8005582:	2101      	movs	r1, #1
 8005584:	480f      	ldr	r0, [pc, #60]	@ (80055c4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8005586:	f002 fa1c 	bl	80079c2 <USBD_GetEpDesc>
 800558a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800559a:	711a      	strb	r2, [r3, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d006      	beq.n	80055b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ae:	711a      	strb	r2, [r3, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80055ba:	4b02      	ldr	r3, [pc, #8]	@ (80055c4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000044 	.word	0x20000044

080055c8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	220a      	movs	r2, #10
 80055d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80055d6:	4b03      	ldr	r3, [pc, #12]	@ (80055e4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	20000064 	.word	0x20000064

080055e8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e009      	b.n	8005610 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	33b0      	adds	r3, #176	@ 0xb0
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	32b0      	adds	r2, #176	@ 0xb0
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d032      	beq.n	80056a0 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	33b0      	adds	r3, #176	@ 0xb0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2000      	movs	r0, #0
 8005672:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8005674:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <MSC_BOT_Init+0x8c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f003 fc72 	bl	8008f64 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8005680:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <MSC_BOT_Init+0x90>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 fc6c 	bl	8008f64 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <MSC_BOT_Init+0x8c>)
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005696:	231f      	movs	r3, #31
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f003 fd2c 	bl	80090f6 <USBD_LL_PrepareReceive>
 800569e:	e000      	b.n	80056a2 <MSC_BOT_Init+0x86>
    return;
 80056a0:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	2000006f 	.word	0x2000006f
 80056ac:	2000006e 	.word	0x2000006e

080056b0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	32b0      	adds	r2, #176	@ 0xb0
 80056c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01b      	beq.n	8005706 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80056da:	4b0d      	ldr	r3, [pc, #52]	@ (8005710 <MSC_BOT_Reset+0x60>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f003 fc7d 	bl	8008fe0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <MSC_BOT_Reset+0x64>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f003 fc77 	bl	8008fe0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80056f2:	4b08      	ldr	r3, [pc, #32]	@ (8005714 <MSC_BOT_Reset+0x64>)
 80056f4:	7819      	ldrb	r1, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80056fc:	231f      	movs	r3, #31
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f003 fcf9 	bl	80090f6 <USBD_LL_PrepareReceive>
 8005704:	e000      	b.n	8005708 <MSC_BOT_Reset+0x58>
    return;
 8005706:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	2000006e 	.word	0x2000006e
 8005714:	2000006f 	.word	0x2000006f

08005718 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	32b0      	adds	r2, #176	@ 0xb0
 800572a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	721a      	strb	r2, [r3, #8]
  }
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32b0      	adds	r2, #176	@ 0xb0
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d020      	beq.n	80057ac <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	7a1b      	ldrb	r3, [r3, #8]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d005      	beq.n	800577e <MSC_BOT_DataIn+0x36>
 8005772:	2b02      	cmp	r3, #2
 8005774:	db1c      	blt.n	80057b0 <MSC_BOT_DataIn+0x68>
 8005776:	3b03      	subs	r3, #3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d819      	bhi.n	80057b0 <MSC_BOT_DataIn+0x68>
 800577c:	e011      	b.n	80057a2 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800578a:	461a      	mov	r2, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9cb 	bl	8005b28 <SCSI_ProcessCmd>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	da0d      	bge.n	80057b4 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005798:	2101      	movs	r1, #1
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f90e 	bl	80059bc <MSC_BOT_SendCSW>
      }
      break;
 80057a0:	e008      	b.n	80057b4 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f909 	bl	80059bc <MSC_BOT_SendCSW>
      break;
 80057aa:	e004      	b.n	80057b6 <MSC_BOT_DataIn+0x6e>
    return;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <MSC_BOT_DataIn+0x6e>
      break;
 80057b4:	bf00      	nop
  }
}
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32b0      	adds	r2, #176	@ 0xb0
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01c      	beq.n	8005818 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	7a1b      	ldrb	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <MSC_BOT_DataOut+0x30>
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d004      	beq.n	80057f4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80057ea:	e018      	b.n	800581e <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f819 	bl	8005824 <MSC_BOT_CBW_Decode>
      break;
 80057f2:	e014      	b.n	800581e <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8005800:	461a      	mov	r2, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f990 	bl	8005b28 <SCSI_ProcessCmd>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	da06      	bge.n	800581c <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800580e:	2101      	movs	r1, #1
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8d3 	bl	80059bc <MSC_BOT_SendCSW>
      break;
 8005816:	e001      	b.n	800581c <MSC_BOT_DataOut+0x60>
    return;
 8005818:	bf00      	nop
 800581a:	e000      	b.n	800581e <MSC_BOT_DataOut+0x62>
      break;
 800581c:	bf00      	nop
  }
}
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	32b0      	adds	r2, #176	@ 0xb0
 8005836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d07c      	beq.n	800593c <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800585a:	4b3b      	ldr	r3, [pc, #236]	@ (8005948 <MSC_BOT_CBW_Decode+0x124>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f003 fc69 	bl	8009138 <USBD_LL_GetRxDataSize>
 8005866:	4603      	mov	r3, r0
 8005868:	2b1f      	cmp	r3, #31
 800586a:	d117      	bne.n	800589c <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8005872:	4a36      	ldr	r2, [pc, #216]	@ (800594c <MSC_BOT_CBW_Decode+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d111      	bne.n	800589c <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800587e:	461a      	mov	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d809      	bhi.n	800589c <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8005898:	2b10      	cmp	r3, #16
 800589a:	d90e      	bls.n	80058ba <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80058a2:	2320      	movs	r3, #32
 80058a4:	2205      	movs	r2, #5
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fe85 	bl	80065b6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2202      	movs	r2, #2
 80058b0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8bc 	bl	8005a30 <MSC_BOT_Abort>
 80058b8:	e043      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80058c6:	461a      	mov	r2, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f92d 	bl	8005b28 <SCSI_ProcessCmd>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da0c      	bge.n	80058ee <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	7a1b      	ldrb	r3, [r3, #8]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d104      	bne.n	80058e6 <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f86c 	bl	80059bc <MSC_BOT_SendCSW>
 80058e4:	e02d      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8a2 	bl	8005a30 <MSC_BOT_Abort>
 80058ec:	e029      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	7a1b      	ldrb	r3, [r3, #8]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d024      	beq.n	8005940 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d020      	beq.n	8005940 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005902:	2b03      	cmp	r3, #3
 8005904:	d01c      	beq.n	8005940 <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f103 0110 	add.w	r1, r3, #16
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	461a      	mov	r2, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f818 	bl	8005950 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005920:	e00f      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800592a:	2100      	movs	r1, #0
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f845 	bl	80059bc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005932:	e006      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f87b 	bl	8005a30 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800593a:	e002      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
    return;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 8005940:	bf00      	nop
    }
  }
}
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	2000006f 	.word	0x2000006f
 800594c:	43425355 	.word	0x43425355

08005950 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	32b0      	adds	r2, #176	@ 0xb0
 8005966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01e      	beq.n	80059b0 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4293      	cmp	r3, r2
 800597c:	bf28      	it	cs
 800597e:	4613      	movcs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2204      	movs	r2, #4
 800599e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80059a0:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <MSC_BOT_SendData+0x68>)
 80059a2:	7819      	ldrb	r1, [r3, #0]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f003 fb83 	bl	80090b4 <USBD_LL_Transmit>
 80059ae:	e000      	b.n	80059b2 <MSC_BOT_SendData+0x62>
    return;
 80059b0:	bf00      	nop
}
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	2000006e 	.word	0x2000006e

080059bc <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	32b0      	adds	r2, #176	@ 0xb0
 80059d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <MSC_BOT_SendCSW+0x68>)
 80059e2:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80059f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a28 <MSC_BOT_SendCSW+0x6c>)
 80059f6:	7819      	ldrb	r1, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80059fe:	230d      	movs	r3, #13
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f003 fb57 	bl	80090b4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8005a06:	4b09      	ldr	r3, [pc, #36]	@ (8005a2c <MSC_BOT_SendCSW+0x70>)
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8005a10:	231f      	movs	r3, #31
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 fb6f 	bl	80090f6 <USBD_LL_PrepareReceive>
 8005a18:	e000      	b.n	8005a1c <MSC_BOT_SendCSW+0x60>
    return;
 8005a1a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	53425355 	.word	0x53425355
 8005a28:	2000006e 	.word	0x2000006e
 8005a2c:	2000006f 	.word	0x2000006f

08005a30 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	32b0      	adds	r2, #176	@ 0xb0
 8005a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a46:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d02a      	beq.n	8005aa4 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10e      	bne.n	8005a76 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d105      	bne.n	8005a76 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005a6a:	4b10      	ldr	r3, [pc, #64]	@ (8005aac <MSC_BOT_Abort+0x7c>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f003 fa96 	bl	8008fa2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005a76:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab0 <MSC_BOT_Abort+0x80>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f003 fa90 	bl	8008fa2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	7a5b      	ldrb	r3, [r3, #9]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d10d      	bne.n	8005aa6 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005a8a:	4b09      	ldr	r3, [pc, #36]	@ (8005ab0 <MSC_BOT_Abort+0x80>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f003 fa86 	bl	8008fa2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <MSC_BOT_Abort+0x7c>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f003 fa80 	bl	8008fa2 <USBD_LL_StallEP>
 8005aa2:	e000      	b.n	8005aa6 <MSC_BOT_Abort+0x76>
    return;
 8005aa4:	bf00      	nop
  }
}
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000006f 	.word	0x2000006f
 8005ab0:	2000006e 	.word	0x2000006e

08005ab4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	32b0      	adds	r2, #176	@ 0xb0
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d01d      	beq.n	8005b12 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	7a5b      	ldrb	r3, [r3, #9]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d10c      	bne.n	8005af8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8005ade:	4b10      	ldr	r3, [pc, #64]	@ (8005b20 <MSC_BOT_CplClrFeature+0x6c>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f003 fa5c 	bl	8008fa2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8005aea:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <MSC_BOT_CplClrFeature+0x70>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f003 fa56 	bl	8008fa2 <USBD_LL_StallEP>
 8005af6:	e00f      	b.n	8005b18 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8005af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0a      	bge.n	8005b16 <MSC_BOT_CplClrFeature+0x62>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	7a5b      	ldrb	r3, [r3, #9]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d006      	beq.n	8005b16 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005b08:	2101      	movs	r1, #1
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff ff56 	bl	80059bc <MSC_BOT_SendCSW>
 8005b10:	e002      	b.n	8005b18 <MSC_BOT_CplClrFeature+0x64>
    return;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8005b16:	bf00      	nop
  }
}
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	2000006e 	.word	0x2000006e
 8005b24:	2000006f 	.word	0x2000006f

08005b28 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	460b      	mov	r3, r1
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	32b0      	adds	r2, #176	@ 0xb0
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	e18f      	b.n	8005e72 <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b5a      	cmp	r3, #90	@ 0x5a
 8005b58:	f300 80e0 	bgt.w	8005d1c <SCSI_ProcessCmd+0x1f4>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da21      	bge.n	8005ba4 <SCSI_ProcessCmd+0x7c>
 8005b60:	e17c      	b.n	8005e5c <SCSI_ProcessCmd+0x334>
 8005b62:	3b9e      	subs	r3, #158	@ 0x9e
 8005b64:	2b0c      	cmp	r3, #12
 8005b66:	f200 8179 	bhi.w	8005e5c <SCSI_ProcessCmd+0x334>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <SCSI_ProcessCmd+0x48>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005dcd 	.word	0x08005dcd
 8005b74:	08005e5d 	.word	0x08005e5d
 8005b78:	08005e39 	.word	0x08005e39
 8005b7c:	08005e5d 	.word	0x08005e5d
 8005b80:	08005e5d 	.word	0x08005e5d
 8005b84:	08005e5d 	.word	0x08005e5d
 8005b88:	08005e5d 	.word	0x08005e5d
 8005b8c:	08005e5d 	.word	0x08005e5d
 8005b90:	08005e5d 	.word	0x08005e5d
 8005b94:	08005e5d 	.word	0x08005e5d
 8005b98:	08005df1 	.word	0x08005df1
 8005b9c:	08005e5d 	.word	0x08005e5d
 8005ba0:	08005e15 	.word	0x08005e15
 8005ba4:	2b5a      	cmp	r3, #90	@ 0x5a
 8005ba6:	f200 8159 	bhi.w	8005e5c <SCSI_ProcessCmd+0x334>
 8005baa:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb0 <SCSI_ProcessCmd+0x88>)
 8005bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb0:	08005d2b 	.word	0x08005d2b
 8005bb4:	08005e5d 	.word	0x08005e5d
 8005bb8:	08005e5d 	.word	0x08005e5d
 8005bbc:	08005d3d 	.word	0x08005d3d
 8005bc0:	08005e5d 	.word	0x08005e5d
 8005bc4:	08005e5d 	.word	0x08005e5d
 8005bc8:	08005e5d 	.word	0x08005e5d
 8005bcc:	08005e5d 	.word	0x08005e5d
 8005bd0:	08005e5d 	.word	0x08005e5d
 8005bd4:	08005e5d 	.word	0x08005e5d
 8005bd8:	08005e5d 	.word	0x08005e5d
 8005bdc:	08005e5d 	.word	0x08005e5d
 8005be0:	08005e5d 	.word	0x08005e5d
 8005be4:	08005e5d 	.word	0x08005e5d
 8005be8:	08005e5d 	.word	0x08005e5d
 8005bec:	08005e5d 	.word	0x08005e5d
 8005bf0:	08005e5d 	.word	0x08005e5d
 8005bf4:	08005e5d 	.word	0x08005e5d
 8005bf8:	08005d4f 	.word	0x08005d4f
 8005bfc:	08005e5d 	.word	0x08005e5d
 8005c00:	08005e5d 	.word	0x08005e5d
 8005c04:	08005e5d 	.word	0x08005e5d
 8005c08:	08005e5d 	.word	0x08005e5d
 8005c0c:	08005e5d 	.word	0x08005e5d
 8005c10:	08005e5d 	.word	0x08005e5d
 8005c14:	08005e5d 	.word	0x08005e5d
 8005c18:	08005d85 	.word	0x08005d85
 8005c1c:	08005d61 	.word	0x08005d61
 8005c20:	08005e4b 	.word	0x08005e4b
 8005c24:	08005e5d 	.word	0x08005e5d
 8005c28:	08005d73 	.word	0x08005d73
 8005c2c:	08005e5d 	.word	0x08005e5d
 8005c30:	08005e5d 	.word	0x08005e5d
 8005c34:	08005e5d 	.word	0x08005e5d
 8005c38:	08005e5d 	.word	0x08005e5d
 8005c3c:	08005da9 	.word	0x08005da9
 8005c40:	08005e5d 	.word	0x08005e5d
 8005c44:	08005dbb 	.word	0x08005dbb
 8005c48:	08005e5d 	.word	0x08005e5d
 8005c4c:	08005e5d 	.word	0x08005e5d
 8005c50:	08005ddf 	.word	0x08005ddf
 8005c54:	08005e5d 	.word	0x08005e5d
 8005c58:	08005e03 	.word	0x08005e03
 8005c5c:	08005e5d 	.word	0x08005e5d
 8005c60:	08005e5d 	.word	0x08005e5d
 8005c64:	08005e5d 	.word	0x08005e5d
 8005c68:	08005e5d 	.word	0x08005e5d
 8005c6c:	08005e27 	.word	0x08005e27
 8005c70:	08005e5d 	.word	0x08005e5d
 8005c74:	08005e5d 	.word	0x08005e5d
 8005c78:	08005e5d 	.word	0x08005e5d
 8005c7c:	08005e5d 	.word	0x08005e5d
 8005c80:	08005e5d 	.word	0x08005e5d
 8005c84:	08005e5d 	.word	0x08005e5d
 8005c88:	08005e5d 	.word	0x08005e5d
 8005c8c:	08005e5d 	.word	0x08005e5d
 8005c90:	08005e5d 	.word	0x08005e5d
 8005c94:	08005e5d 	.word	0x08005e5d
 8005c98:	08005e5d 	.word	0x08005e5d
 8005c9c:	08005e5d 	.word	0x08005e5d
 8005ca0:	08005e5d 	.word	0x08005e5d
 8005ca4:	08005e5d 	.word	0x08005e5d
 8005ca8:	08005e5d 	.word	0x08005e5d
 8005cac:	08005e5d 	.word	0x08005e5d
 8005cb0:	08005e5d 	.word	0x08005e5d
 8005cb4:	08005e5d 	.word	0x08005e5d
 8005cb8:	08005e5d 	.word	0x08005e5d
 8005cbc:	08005e5d 	.word	0x08005e5d
 8005cc0:	08005e5d 	.word	0x08005e5d
 8005cc4:	08005e5d 	.word	0x08005e5d
 8005cc8:	08005e5d 	.word	0x08005e5d
 8005ccc:	08005e5d 	.word	0x08005e5d
 8005cd0:	08005e5d 	.word	0x08005e5d
 8005cd4:	08005e5d 	.word	0x08005e5d
 8005cd8:	08005e5d 	.word	0x08005e5d
 8005cdc:	08005e5d 	.word	0x08005e5d
 8005ce0:	08005e5d 	.word	0x08005e5d
 8005ce4:	08005e5d 	.word	0x08005e5d
 8005ce8:	08005e5d 	.word	0x08005e5d
 8005cec:	08005e5d 	.word	0x08005e5d
 8005cf0:	08005e5d 	.word	0x08005e5d
 8005cf4:	08005e5d 	.word	0x08005e5d
 8005cf8:	08005e5d 	.word	0x08005e5d
 8005cfc:	08005e5d 	.word	0x08005e5d
 8005d00:	08005e5d 	.word	0x08005e5d
 8005d04:	08005e5d 	.word	0x08005e5d
 8005d08:	08005e5d 	.word	0x08005e5d
 8005d0c:	08005e5d 	.word	0x08005e5d
 8005d10:	08005e5d 	.word	0x08005e5d
 8005d14:	08005e5d 	.word	0x08005e5d
 8005d18:	08005d97 	.word	0x08005d97
 8005d1c:	2baa      	cmp	r3, #170	@ 0xaa
 8005d1e:	f300 809d 	bgt.w	8005e5c <SCSI_ProcessCmd+0x334>
 8005d22:	2b9e      	cmp	r3, #158	@ 0x9e
 8005d24:	f6bf af1d 	bge.w	8005b62 <SCSI_ProcessCmd+0x3a>
 8005d28:	e098      	b.n	8005e5c <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8a3 	bl	8005e7c <SCSI_TestUnitReady>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
      break;
 8005d3a:	e098      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fbb4 	bl	80064b0 <SCSI_RequestSense>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4c:	e08f      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4619      	mov	r1, r3
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f8eb 	bl	8005f30 <SCSI_Inquiry>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5e:	e086      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4619      	mov	r1, r3
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fc70 	bl	800664c <SCSI_StartStopUnit>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e07d      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fcbc 	bl	80066f6 <SCSI_AllowPreventRemovable>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]
      break;
 8005d82:	e074      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 faf2 	bl	8006374 <SCSI_ModeSense6>
 8005d90:	4603      	mov	r3, r0
 8005d92:	75fb      	strb	r3, [r7, #23]
      break;
 8005d94:	e06b      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fb39 	bl	8006414 <SCSI_ModeSense10>
 8005da2:	4603      	mov	r3, r0
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	e062      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa64 	bl	800627c <SCSI_ReadFormatCapacity>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]
      break;
 8005db8:	e059      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f931 	bl	8006028 <SCSI_ReadCapacity10>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dca:	e050      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9a2 	bl	800611c <SCSI_ReadCapacity16>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]
      break;
 8005ddc:	e047      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fcb3 	bl	8006750 <SCSI_Read10>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]
      break;
 8005dee:	e03e      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4619      	mov	r1, r3
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fd54 	bl	80068a4 <SCSI_Read12>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005e00:	e035      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4619      	mov	r1, r3
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fe01 	bl	8006a10 <SCSI_Write10>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e02c      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fed0 	bl	8006bc0 <SCSI_Write12>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	e023      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 ffaf 	bl	8006d90 <SCSI_Verify10>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	e01a      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 8005e38:	7afb      	ldrb	r3, [r7, #11]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 ffe8 	bl	8006e14 <SCSI_ReportLuns>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75fb      	strb	r3, [r7, #23]
      break;
 8005e48:	e011      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f001 f833 	bl	8006ebc <SCSI_ReceiveDiagnosticResults>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	e008      	b.n	8005e6e <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8005e5c:	7af9      	ldrb	r1, [r7, #11]
 8005e5e:	2320      	movs	r3, #32
 8005e60:	2205      	movs	r2, #5
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 fba7 	bl	80065b6 <SCSI_SenseCode>
      ret = -1;
 8005e68:	23ff      	movs	r3, #255	@ 0xff
 8005e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e6c:	bf00      	nop
  }

  return ret;
 8005e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop

08005e7c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	32b0      	adds	r2, #176	@ 0xb0
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d102      	bne.n	8005ea6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	e03f      	b.n	8005f26 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	2205      	movs	r2, #5
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fb7b 	bl	80065b6 <SCSI_SenseCode>

    return -1;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	e02f      	b.n	8005f26 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d10b      	bne.n	8005ee8 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005ed0:	7af9      	ldrb	r1, [r7, #11]
 8005ed2:	233a      	movs	r3, #58	@ 0x3a
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fb6d 	bl	80065b6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2205      	movs	r2, #5
 8005ee0:	721a      	strb	r2, [r3, #8]
    return -1;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	e01e      	b.n	8005f26 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	33b0      	adds	r3, #176	@ 0xb0
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	7afa      	ldrb	r2, [r7, #11]
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005f06:	7af9      	ldrb	r1, [r7, #11]
 8005f08:	233a      	movs	r3, #58	@ 0x3a
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fb52 	bl	80065b6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2205      	movs	r2, #5
 8005f16:	721a      	strb	r2, [r3, #8]

    return -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	e003      	b.n	8005f26 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	60da      	str	r2, [r3, #12]

  return 0;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	32b0      	adds	r2, #176	@ 0xb0
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295
 8005f58:	e05e      	b.n	8006018 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005f6a:	2320      	movs	r3, #32
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb21 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	e04e      	b.n	8006018 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d020      	beq.n	8005fca <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005f92:	2206      	movs	r2, #6
 8005f94:	4922      	ldr	r1, [pc, #136]	@ (8006020 <SCSI_Inquiry+0xf0>)
 8005f96:	69b8      	ldr	r0, [r7, #24]
 8005f98:	f001 f908 	bl	80071ac <SCSI_UpdateBotData>
 8005f9c:	e03b      	b.n	8006016 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3302      	adds	r3, #2
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b80      	cmp	r3, #128	@ 0x80
 8005fa6:	d105      	bne.n	8005fb4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005fa8:	2208      	movs	r2, #8
 8005faa:	491e      	ldr	r1, [pc, #120]	@ (8006024 <SCSI_Inquiry+0xf4>)
 8005fac:	69b8      	ldr	r0, [r7, #24]
 8005fae:	f001 f8fd 	bl	80071ac <SCSI_UpdateBotData>
 8005fb2:	e030      	b.n	8006016 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8005fba:	2324      	movs	r3, #36	@ 0x24
 8005fbc:	2205      	movs	r2, #5
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 faf9 	bl	80065b6 <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc8:	e026      	b.n	8006018 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	33b0      	adds	r3, #176	@ 0xb0
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005fda:	69d9      	ldr	r1, [r3, #28]
 8005fdc:	7afa      	ldrb	r2, [r7, #11]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8005fe6:	440b      	add	r3, r1
 8005fe8:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3304      	adds	r3, #4
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3305      	adds	r3, #5
 8005ff2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d303      	bcc.n	800600a <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3304      	adds	r3, #4
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800600a:	8bfb      	ldrh	r3, [r7, #30]
 800600c:	461a      	mov	r2, r3
 800600e:	6979      	ldr	r1, [r7, #20]
 8006010:	69b8      	ldr	r0, [r7, #24]
 8006012:	f001 f8cb 	bl	80071ac <SCSI_UpdateBotData>
  }

  return 0;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000070 	.word	0x20000070
 8006024:	20000078 	.word	0x20000078

08006028 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	460b      	mov	r3, r1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	32b0      	adds	r2, #176	@ 0xb0
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006046:	7afb      	ldrb	r3, [r7, #11]
 8006048:	3326      	adds	r3, #38	@ 0x26
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	3304      	adds	r3, #4
 8006052:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 800605a:	f04f 33ff 	mov.w	r3, #4294967295
 800605e:	e059      	b.n	8006114 <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	33b0      	adds	r3, #176	@ 0xb0
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	1d11      	adds	r1, r2, #4
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	7af8      	ldrb	r0, [r7, #11]
 800607a:	4798      	blx	r3
 800607c:	4603      	mov	r3, r0
 800607e:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <SCSI_ReadCapacity10+0x6a>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800608e:	2b02      	cmp	r3, #2
 8006090:	d108      	bne.n	80060a4 <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006092:	7af9      	ldrb	r1, [r7, #11]
 8006094:	233a      	movs	r3, #58	@ 0x3a
 8006096:	2202      	movs	r2, #2
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fa8c 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	e037      	b.n	8006114 <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	0e1b      	lsrs	r3, r3, #24
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	161b      	asrs	r3, r3, #24
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	141b      	asrs	r3, r3, #16
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2208      	movs	r2, #8
 8006110:	60da      	str	r2, [r3, #12]

  return 0;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	460b      	mov	r3, r1
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	32b0      	adds	r2, #176	@ 0xb0
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	3326      	adds	r3, #38	@ 0x26
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4413      	add	r3, r2
 8006144:	3304      	adds	r3, #4
 8006146:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 800614e:	f04f 33ff 	mov.w	r3, #4294967295
 8006152:	e08f      	b.n	8006274 <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	33b0      	adds	r3, #176	@ 0xb0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	1d11      	adds	r1, r2, #4
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	7af8      	ldrb	r0, [r7, #11]
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
 8006172:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <SCSI_ReadCapacity16+0x6a>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8006182:	2b02      	cmp	r3, #2
 8006184:	d108      	bne.n	8006198 <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006186:	7af9      	ldrb	r1, [r7, #11]
 8006188:	233a      	movs	r3, #58	@ 0x3a
 800618a:	2202      	movs	r2, #2
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fa12 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	e06d      	b.n	8006274 <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	330a      	adds	r3, #10
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	330b      	adds	r3, #11
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80061a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	330c      	adds	r3, #12
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80061b2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	320d      	adds	r2, #13
 80061b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80061ba:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e008      	b.n	80061d8 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	3310      	adds	r3, #16
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	3301      	adds	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d3f1      	bcc.n	80061c6 <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	0e1b      	lsrs	r3, r3, #24
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	0c1b      	lsrs	r3, r3, #16
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	b2da      	uxtb	r2, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b2da      	uxtb	r2, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	161b      	asrs	r3, r3, #24
 8006220:	b2da      	uxtb	r2, r3
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	141b      	asrs	r3, r3, #16
 800622c:	b2da      	uxtb	r2, r3
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	330a      	adds	r3, #10
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	330b      	adds	r3, #11
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800625a:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	330c      	adds	r3, #12
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006264:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	320d      	adds	r2, #13
 800626a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800626c:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	60da      	str	r2, [r3, #12]

  return 0;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	460b      	mov	r3, r1
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32b0      	adds	r2, #176	@ 0xb0
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 80062a0:	f04f 33ff 	mov.w	r3, #4294967295
 80062a4:	e061      	b.n	800636a <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	33b0      	adds	r3, #176	@ 0xb0
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f107 0214 	add.w	r2, r7, #20
 80062bc:	f107 0110 	add.w	r1, r7, #16
 80062c0:	7af8      	ldrb	r0, [r7, #11]
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80062c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <SCSI_ReadFormatCapacity+0x5e>
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d108      	bne.n	80062ec <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062da:	7af9      	ldrb	r1, [r7, #11]
 80062dc:	233a      	movs	r3, #58	@ 0x3a
 80062de:	2202      	movs	r2, #2
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f968 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ea:	e03e      	b.n	800636a <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80062ec:	2300      	movs	r3, #0
 80062ee:	83fb      	strh	r3, [r7, #30]
 80062f0:	e007      	b.n	8006302 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80062f2:	8bfb      	ldrh	r3, [r7, #30]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4413      	add	r3, r2
 80062f8:	2200      	movs	r2, #0
 80062fa:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	3301      	adds	r3, #1
 8006300:	83fb      	strh	r3, [r7, #30]
 8006302:	8bfb      	ldrh	r3, [r7, #30]
 8006304:	2b0b      	cmp	r3, #11
 8006306:	d9f4      	bls.n	80062f2 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2208      	movs	r2, #8
 800630c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3b01      	subs	r3, #1
 8006312:	0e1b      	lsrs	r3, r3, #24
 8006314:	b2da      	uxtb	r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3b01      	subs	r3, #1
 800631e:	0c1b      	lsrs	r3, r3, #16
 8006320:	b2da      	uxtb	r2, r3
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	b2da      	uxtb	r2, r3
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2202      	movs	r2, #2
 8006342:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006344:	8abb      	ldrh	r3, [r7, #20]
 8006346:	141b      	asrs	r3, r3, #16
 8006348:	b2da      	uxtb	r2, r3
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800634e:	8abb      	ldrh	r3, [r7, #20]
 8006350:	0a1b      	lsrs	r3, r3, #8
 8006352:	b29b      	uxth	r3, r3
 8006354:	b2da      	uxtb	r2, r3
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800635a:	8abb      	ldrh	r3, [r7, #20]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	220c      	movs	r2, #12
 8006366:	60da      	str	r2, [r3, #12]

  return 0;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	460b      	mov	r3, r1
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	32b0      	adds	r2, #176	@ 0xb0
 800638c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006390:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006392:	2304      	movs	r3, #4
 8006394:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800639c:	f04f 33ff 	mov.w	r3, #4294967295
 80063a0:	e02f      	b.n	8006402 <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	33b0      	adds	r3, #176	@ 0xb0
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	7afa      	ldrb	r2, [r7, #11]
 80063b6:	4610      	mov	r0, r2
 80063b8:	4798      	blx	r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 80063c0:	4b12      	ldr	r3, [pc, #72]	@ (800640c <SCSI_ModeSense6+0x98>)
 80063c2:	789b      	ldrb	r3, [r3, #2]
 80063c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	4b10      	ldr	r3, [pc, #64]	@ (800640c <SCSI_ModeSense6+0x98>)
 80063cc:	709a      	strb	r2, [r3, #2]
 80063ce:	e006      	b.n	80063de <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 80063d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <SCSI_ModeSense6+0x9c>)
 80063d2:	789b      	ldrb	r3, [r3, #2]
 80063d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <SCSI_ModeSense6+0x9c>)
 80063dc:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	8afb      	ldrh	r3, [r7, #22]
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d303      	bcc.n	80063f4 <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3304      	adds	r3, #4
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80063f4:	8afb      	ldrh	r3, [r7, #22]
 80063f6:	461a      	mov	r2, r3
 80063f8:	4904      	ldr	r1, [pc, #16]	@ (800640c <SCSI_ModeSense6+0x98>)
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f000 fed6 	bl	80071ac <SCSI_UpdateBotData>

  return 0;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000080 	.word	0x20000080
 8006410:	20000084 	.word	0x20000084

08006414 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	460b      	mov	r3, r1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	32b0      	adds	r2, #176	@ 0xb0
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006432:	2308      	movs	r3, #8
 8006434:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	e02f      	b.n	80064a2 <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	33b0      	adds	r3, #176	@ 0xb0
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	7afa      	ldrb	r2, [r7, #11]
 8006456:	4610      	mov	r0, r2
 8006458:	4798      	blx	r3
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8006460:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <SCSI_ModeSense10+0x98>)
 8006462:	78db      	ldrb	r3, [r3, #3]
 8006464:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006468:	b2da      	uxtb	r2, r3
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <SCSI_ModeSense10+0x98>)
 800646c:	70da      	strb	r2, [r3, #3]
 800646e:	e006      	b.n	800647e <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8006470:	4b0e      	ldr	r3, [pc, #56]	@ (80064ac <SCSI_ModeSense10+0x98>)
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <SCSI_ModeSense10+0x98>)
 800647c:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3308      	adds	r3, #8
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	4293      	cmp	r3, r2
 800648a:	d303      	bcc.n	8006494 <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3308      	adds	r3, #8
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006494:	8afb      	ldrh	r3, [r7, #22]
 8006496:	461a      	mov	r2, r3
 8006498:	4904      	ldr	r1, [pc, #16]	@ (80064ac <SCSI_ModeSense10+0x98>)
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 fe86 	bl	80071ac <SCSI_UpdateBotData>

  return 0;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000084 	.word	0x20000084

080064b0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	460b      	mov	r3, r1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	32b0      	adds	r2, #176	@ 0xb0
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <SCSI_RequestSense+0x2a>
  {
    return -1;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	e069      	b.n	80065ae <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80064ea:	2320      	movs	r3, #32
 80064ec:	2205      	movs	r2, #5
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f861 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	e059      	b.n	80065ae <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]
 80064fe:	e007      	b.n	8006510 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4413      	add	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	3301      	adds	r3, #1
 800650e:	75fb      	strb	r3, [r7, #23]
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b11      	cmp	r3, #17
 8006514:	d9f4      	bls.n	8006500 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2270      	movs	r2, #112	@ 0x70
 800651a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	220c      	movs	r2, #12
 8006520:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800652e:	429a      	cmp	r2, r3
 8006530:	d02e      	beq.n	8006590 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006538:	461a      	mov	r2, r3
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3248      	adds	r2, #72	@ 0x48
 800653e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	3348      	adds	r3, #72	@ 0x48
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	4413      	add	r3, r2
 8006554:	791a      	ldrb	r2, [r3, #4]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	3348      	adds	r3, #72	@ 0x48
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	795a      	ldrb	r2, [r3, #5]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006574:	3301      	adds	r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8006584:	2b04      	cmp	r3, #4
 8006586:	d103      	bne.n	8006590 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2212      	movs	r2, #18
 8006594:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b12      	cmp	r3, #18
 800659e:	d805      	bhi.n	80065ac <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3304      	adds	r3, #4
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	4608      	mov	r0, r1
 80065c0:	4611      	mov	r1, r2
 80065c2:	461a      	mov	r2, r3
 80065c4:	4603      	mov	r3, r0
 80065c6:	70fb      	strb	r3, [r7, #3]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70bb      	strb	r3, [r7, #2]
 80065cc:	4613      	mov	r3, r2
 80065ce:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	@ 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02c      	beq.n	8006640 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80065ec:	461a      	mov	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3248      	adds	r2, #72	@ 0x48
 80065f2:	78b9      	ldrb	r1, [r7, #2]
 80065f4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	3348      	adds	r3, #72	@ 0x48
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4413      	add	r3, r2
 8006606:	787a      	ldrb	r2, [r7, #1]
 8006608:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	3348      	adds	r3, #72	@ 0x48
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	2200      	movs	r2, #0
 800661a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006622:	3301      	adds	r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8006632:	2b04      	cmp	r3, #4
 8006634:	d105      	bne.n	8006642 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800663e:	e000      	b.n	8006642 <SCSI_SenseCode+0x8c>
    return;
 8006640:	bf00      	nop
  }
}
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	460b      	mov	r3, r1
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	32b0      	adds	r2, #176	@ 0xb0
 8006664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006668:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8006670:	f04f 33ff 	mov.w	r3, #4294967295
 8006674:	e03b      	b.n	80066ee <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10f      	bne.n	80066a0 <SCSI_StartStopUnit+0x54>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d108      	bne.n	80066a0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 800668e:	7af9      	ldrb	r1, [r7, #11]
 8006690:	2324      	movs	r3, #36	@ 0x24
 8006692:	2205      	movs	r2, #5
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff8e 	bl	80065b6 <SCSI_SenseCode>

    return -1;
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	e026      	b.n	80066ee <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3304      	adds	r3, #4
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d104      	bne.n	80066b8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80066b6:	e016      	b.n	80066e6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3304      	adds	r3, #4
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d104      	bne.n	80066d0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80066ce:	e00a      	b.n	80066e6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d103      	bne.n	80066e6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	60da      	str	r2, [r3, #12]

  return 0;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	460b      	mov	r3, r1
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	32b0      	adds	r2, #176	@ 0xb0
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	e011      	b.n	8006744 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3304      	adds	r3, #4
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8006732:	e003      	b.n	800673c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]

  return 0;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	460b      	mov	r3, r1
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	32b0      	adds	r2, #176	@ 0xb0
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	3326      	adds	r3, #38	@ 0x26
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <SCSI_Read10+0x38>
  {
    return -1;
 8006782:	f04f 33ff 	mov.w	r3, #4294967295
 8006786:	e089      	b.n	800689c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	7a1b      	ldrb	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d17b      	bne.n	8006888 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006796:	b25b      	sxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0a      	blt.n	80067b2 <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80067a2:	2320      	movs	r3, #32
 80067a4:	2205      	movs	r2, #5
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff ff05 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	e074      	b.n	800689c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d108      	bne.n	80067ce <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80067bc:	7af9      	ldrb	r1, [r7, #11]
 80067be:	233a      	movs	r3, #58	@ 0x3a
 80067c0:	2202      	movs	r2, #2
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fef7 	bl	80065b6 <SCSI_SenseCode>

      return -1;
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	e066      	b.n	800689c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	33b0      	adds	r3, #176	@ 0xb0
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	7afa      	ldrb	r2, [r7, #11]
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80067ec:	7af9      	ldrb	r1, [r7, #11]
 80067ee:	233a      	movs	r3, #58	@ 0x3a
 80067f0:	2202      	movs	r2, #2
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fedf 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 80067f8:	f04f 33ff 	mov.w	r3, #4294967295
 80067fc:	e04e      	b.n	800689c <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3302      	adds	r3, #2
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3303      	adds	r3, #3
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800680e:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8006818:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	3205      	adds	r2, #5
 800681e:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8006820:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3307      	adds	r3, #7
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	3208      	adds	r2, #8
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	431a      	orrs	r2, r3
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	7af9      	ldrb	r1, [r7, #11]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fb6d 	bl	8006f24 <SCSI_CheckAddressRange>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	da02      	bge.n	8006856 <SCSI_Read10+0x106>
    {
      return -1; /* error */
 8006850:	f04f 33ff 	mov.w	r3, #4294967295
 8006854:	e022      	b.n	800689c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	6939      	ldr	r1, [r7, #16]
 8006862:	8809      	ldrh	r1, [r1, #0]
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	429a      	cmp	r2, r3
 800686a:	d00a      	beq.n	8006882 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006872:	2320      	movs	r3, #32
 8006874:	2205      	movs	r2, #5
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fe9d 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 800687c:	f04f 33ff 	mov.w	r3, #4294967295
 8006880:	e00c      	b.n	800689c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2202      	movs	r2, #2
 8006886:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800688e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	4619      	mov	r1, r3
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fb77 	bl	8006f88 <SCSI_ProcessRead>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	460b      	mov	r3, r1
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	32b0      	adds	r2, #176	@ 0xb0
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	3326      	adds	r3, #38	@ 0x26
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <SCSI_Read12+0x38>
  {
    return -1;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	e094      	b.n	8006a06 <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	7a1b      	ldrb	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 8086 	bne.w	80069f2 <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80068ec:	b25b      	sxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	db0a      	blt.n	8006908 <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80068f8:	2320      	movs	r3, #32
 80068fa:	2205      	movs	r2, #5
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff fe5a 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	e07e      	b.n	8006a06 <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800690e:	2b02      	cmp	r3, #2
 8006910:	d108      	bne.n	8006924 <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006912:	7af9      	ldrb	r1, [r7, #11]
 8006914:	233a      	movs	r3, #58	@ 0x3a
 8006916:	2202      	movs	r2, #2
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fe4c 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	e070      	b.n	8006a06 <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	33b0      	adds	r3, #176	@ 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	7afa      	ldrb	r2, [r7, #11]
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006942:	7af9      	ldrb	r1, [r7, #11]
 8006944:	233a      	movs	r3, #58	@ 0x3a
 8006946:	2202      	movs	r2, #2
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fe34 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 800694e:	f04f 33ff 	mov.w	r3, #4294967295
 8006952:	e058      	b.n	8006a06 <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3302      	adds	r3, #2
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3303      	adds	r3, #3
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006964:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3304      	adds	r3, #4
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 800696e:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	3205      	adds	r2, #5
 8006974:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8006976:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3306      	adds	r3, #6
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3307      	adds	r3, #7
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800698c:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3308      	adds	r3, #8
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 8006996:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	3209      	adds	r2, #9
 800699c:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 800699e:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	7af9      	ldrb	r1, [r7, #11]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fab8 	bl	8006f24 <SCSI_CheckAddressRange>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da02      	bge.n	80069c0 <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 80069ba:	f04f 33ff 	mov.w	r3, #4294967295
 80069be:	e022      	b.n	8006a06 <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	6939      	ldr	r1, [r7, #16]
 80069cc:	8809      	ldrh	r1, [r1, #0]
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d00a      	beq.n	80069ec <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80069dc:	2320      	movs	r3, #32
 80069de:	2205      	movs	r2, #5
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fde8 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	e00c      	b.n	8006a06 <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2202      	movs	r2, #2
 80069f0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069f8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80069fa:	7afb      	ldrb	r3, [r7, #11]
 80069fc:	4619      	mov	r1, r3
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 fac2 	bl	8006f88 <SCSI_ProcessRead>
 8006a04:	4603      	mov	r3, r0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	32b0      	adds	r2, #176	@ 0xb0
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	3326      	adds	r3, #38	@ 0x26
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	3304      	adds	r3, #4
 8006a3a:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <SCSI_Write10+0x38>
  {
    return -1;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295
 8006a46:	e0b4      	b.n	8006bb2 <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	7a1b      	ldrb	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f040 80aa 	bne.w	8006ba6 <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006a62:	2320      	movs	r3, #32
 8006a64:	2205      	movs	r2, #5
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fda5 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	e09f      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da0a      	bge.n	8006a94 <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006a84:	2320      	movs	r3, #32
 8006a86:	2205      	movs	r2, #5
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fd94 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	e08e      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	33b0      	adds	r3, #176	@ 0xb0
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	7afa      	ldrb	r2, [r7, #11]
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006ab2:	7af9      	ldrb	r1, [r7, #11]
 8006ab4:	233a      	movs	r3, #58	@ 0x3a
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff fd7c 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	e076      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	33b0      	adds	r3, #176	@ 0xb0
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	7afa      	ldrb	r2, [r7, #11]
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d008      	beq.n	8006af4 <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006ae2:	7af9      	ldrb	r1, [r7, #11]
 8006ae4:	2327      	movs	r3, #39	@ 0x27
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fd64 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e05e      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3302      	adds	r3, #2
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3303      	adds	r3, #3
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006b04:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8006b0e:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	3205      	adds	r2, #5
 8006b14:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8006b16:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3307      	adds	r3, #7
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	3208      	adds	r2, #8
 8006b28:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	7af9      	ldrb	r1, [r7, #11]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f9f2 	bl	8006f24 <SCSI_CheckAddressRange>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da02      	bge.n	8006b4c <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	e032      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d00a      	beq.n	8006b7c <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	2205      	movs	r2, #5
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff fd20 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	e01a      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b82:	bf28      	it	cs
 8006b84:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006b88:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006b90:	4b0a      	ldr	r3, [pc, #40]	@ (8006bbc <SCSI_Write10+0x1ac>)
 8006b92:	7819      	ldrb	r1, [r3, #0]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f103 0210 	add.w	r2, r3, #16
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f002 faaa 	bl	80090f6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e005      	b.n	8006bb2 <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fa6e 	bl	800708c <SCSI_ProcessWrite>
 8006bb0:	4603      	mov	r3, r0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	2000006f 	.word	0x2000006f

08006bc0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	32b0      	adds	r2, #176	@ 0xb0
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	3326      	adds	r3, #38	@ 0x26
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <SCSI_Write12+0x38>
  {
    return -1;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	e0c4      	b.n	8006d82 <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	7a1b      	ldrb	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 80ba 	bne.w	8006d76 <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006c12:	2320      	movs	r3, #32
 8006c14:	2205      	movs	r2, #5
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fccd 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	e0af      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da0a      	bge.n	8006c44 <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006c34:	2320      	movs	r3, #32
 8006c36:	2205      	movs	r2, #5
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fcbc 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c42:	e09e      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	33b0      	adds	r3, #176	@ 0xb0
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	7afa      	ldrb	r2, [r7, #11]
 8006c58:	4610      	mov	r0, r2
 8006c5a:	4798      	blx	r3
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006c62:	7af9      	ldrb	r1, [r7, #11]
 8006c64:	233a      	movs	r3, #58	@ 0x3a
 8006c66:	2202      	movs	r2, #2
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fca4 	bl	80065b6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2205      	movs	r2, #5
 8006c72:	721a      	strb	r2, [r3, #8]
      return -1;
 8006c74:	f04f 33ff 	mov.w	r3, #4294967295
 8006c78:	e083      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	33b0      	adds	r3, #176	@ 0xb0
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	7afa      	ldrb	r2, [r7, #11]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8006c98:	7af9      	ldrb	r1, [r7, #11]
 8006c9a:	2327      	movs	r3, #39	@ 0x27
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fc89 	bl	80065b6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2205      	movs	r2, #5
 8006ca8:	721a      	strb	r2, [r3, #8]
      return -1;
 8006caa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cae:	e068      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3303      	adds	r3, #3
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006cc0:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8006cca:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	3205      	adds	r2, #5
 8006cd0:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8006cd2:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3306      	adds	r3, #6
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3307      	adds	r3, #7
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8006ce8:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3308      	adds	r3, #8
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 8006cf2:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	3209      	adds	r2, #9
 8006cf8:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8006cfa:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	7af9      	ldrb	r1, [r7, #11]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f90a 	bl	8006f24 <SCSI_CheckAddressRange>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da02      	bge.n	8006d1c <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 8006d16:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1a:	e032      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	8812      	ldrh	r2, [r2, #0]
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d00a      	beq.n	8006d4c <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	2205      	movs	r2, #5
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fc38 	bl	80065b6 <SCSI_SenseCode>
      return -1;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4a:	e01a      	b.n	8006d82 <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d52:	bf28      	it	cs
 8006d54:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006d58:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8006d60:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <SCSI_Write12+0x1cc>)
 8006d62:	7819      	ldrb	r1, [r3, #0]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f103 0210 	add.w	r2, r3, #16
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f002 f9c2 	bl	80090f6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e005      	b.n	8006d82 <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f986 	bl	800708c <SCSI_ProcessWrite>
 8006d80:	4603      	mov	r3, r0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	2000006f 	.word	0x2000006f

08006d90 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	32b0      	adds	r2, #176	@ 0xb0
 8006da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dac:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	3326      	adds	r3, #38	@ 0x26
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4413      	add	r3, r2
 8006db8:	3304      	adds	r3, #4
 8006dba:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <SCSI_Verify10+0x38>
  {
    return -1;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc6:	e021      	b.n	8006e0c <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 8006dd6:	7af9      	ldrb	r1, [r7, #11]
 8006dd8:	2324      	movs	r3, #36	@ 0x24
 8006dda:	2205      	movs	r2, #5
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fbea 	bl	80065b6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	e011      	b.n	8006e0c <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	7af9      	ldrb	r1, [r7, #11]
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f896 	bl	8006f24 <SCSI_CheckAddressRange>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da02      	bge.n	8006e04 <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	e003      	b.n	8006e0c <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2200      	movs	r2, #0
 8006e08:	60da      	str	r2, [r3, #12]

  return 0;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	32b0      	adds	r2, #176	@ 0xb0
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <SCSI_ReportLuns+0x2a>
  {
    return -1;
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	e038      	b.n	8006eb0 <SCSI_ReportLuns+0x9c>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 8006e3e:	2218      	movs	r2, #24
 8006e40:	2100      	movs	r1, #0
 8006e42:	481d      	ldr	r0, [pc, #116]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e44:	f002 fbda 	bl	80095fc <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	0e1b      	lsrs	r3, r3, #24
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e5a:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	4b15      	ldr	r3, [pc, #84]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e64:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	4b12      	ldr	r3, [pc, #72]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e6e:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	4b10      	ldr	r3, [pc, #64]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e76:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e008      	b.n	8006e90 <SCSI_ReportLuns+0x7c>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 8006e7e:	7ffb      	ldrb	r3, [r7, #31]
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	3309      	adds	r3, #9
 8006e84:	490c      	ldr	r1, [pc, #48]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006e86:	7ffa      	ldrb	r2, [r7, #31]
 8006e88:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	7ffa      	ldrb	r2, [r7, #31]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d9f1      	bls.n	8006e7e <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4904      	ldr	r1, [pc, #16]	@ (8006eb8 <SCSI_ReportLuns+0xa4>)
 8006ea8:	69b8      	ldr	r0, [r7, #24]
 8006eaa:	f000 f97f 	bl	80071ac <SCSI_UpdateBotData>

  return 0;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	2001898c 	.word	0x2001898c

08006ebc <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	32b0      	adds	r2, #176	@ 0xb0
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3303      	adds	r3, #3
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b21b      	sxth	r3, r3
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	b21a      	sxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	b21b      	sxth	r3, r3
 8006ef2:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 8006ef4:	8afb      	ldrh	r3, [r7, #22]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <SCSI_ReceiveDiagnosticResults+0x42>
  {
    return 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e00b      	b.n	8006f16 <SCSI_ReceiveDiagnosticResults+0x5a>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d901      	bls.n	8006f08 <SCSI_ReceiveDiagnosticResults+0x4c>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 8006f04:	2308      	movs	r3, #8
 8006f06:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 8006f08:	8afb      	ldrh	r3, [r7, #22]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4904      	ldr	r1, [pc, #16]	@ (8006f20 <SCSI_ReceiveDiagnosticResults+0x64>)
 8006f0e:	6938      	ldr	r0, [r7, #16]
 8006f10:	f000 f94c 	bl	80071ac <SCSI_UpdateBotData>

  return 0;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20018984 	.word	0x20018984

08006f24 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	460b      	mov	r3, r1
 8006f32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	32b0      	adds	r2, #176	@ 0xb0
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006f44:	7afb      	ldrb	r3, [r7, #11]
 8006f46:	3326      	adds	r3, #38	@ 0x26
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3304      	adds	r3, #4
 8006f50:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 8006f58:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5c:	e010      	b.n	8006f80 <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	441a      	add	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d908      	bls.n	8006f7e <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8006f6c:	7af9      	ldrb	r1, [r7, #11]
 8006f6e:	2321      	movs	r3, #33	@ 0x21
 8006f70:	2205      	movs	r2, #5
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f7ff fb1f 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	e000      	b.n	8006f80 <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32b0      	adds	r2, #176	@ 0xb0
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	3326      	adds	r3, #38	@ 0x26
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4413      	add	r3, r2
 8006fae:	3304      	adds	r3, #4
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <SCSI_ProcessRead+0x36>
  {
    return -1;
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbc:	e05f      	b.n	800707e <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	fb02 f303 	mul.w	r3, r2, r3
 8006fca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd2:	bf28      	it	cs
 8006fd4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8006fd8:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	33b0      	adds	r3, #176	@ 0xb0
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	691c      	ldr	r4, [r3, #16]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f103 0110 	add.w	r1, r3, #16
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8007002:	b29b      	uxth	r3, r3
 8007004:	78f8      	ldrb	r0, [r7, #3]
 8007006:	47a0      	blx	r4
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	da08      	bge.n	8007020 <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800700e:	78f9      	ldrb	r1, [r7, #3]
 8007010:	2311      	movs	r3, #17
 8007012:	2204      	movs	r2, #4
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff face 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 800701a:	f04f 33ff 	mov.w	r3, #4294967295
 800701e:	e02e      	b.n	800707e <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8007020:	4b19      	ldr	r3, [pc, #100]	@ (8007088 <SCSI_ProcessRead+0x100>)
 8007022:	7819      	ldrb	r1, [r3, #0]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f103 0210 	add.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f002 f841 	bl	80090b4 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	4619      	mov	r1, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007042:	441a      	add	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	fbb3 f3f1 	udiv	r3, r3, r1
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2203      	movs	r2, #3
 800707a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bd90      	pop	{r4, r7, pc}
 8007086:	bf00      	nop
 8007088:	2000006e 	.word	0x2000006e

0800708c <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32b0      	adds	r2, #176	@ 0xb0
 80070a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a6:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	3326      	adds	r3, #38	@ 0x26
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	3304      	adds	r3, #4
 80070b4:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <SCSI_ProcessWrite+0x36>
  {
    return -1;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295
 80070c0:	e06d      	b.n	800719e <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	8812      	ldrh	r2, [r2, #0]
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d6:	bf28      	it	cs
 80070d8:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80070dc:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	33b0      	adds	r3, #176	@ 0xb0
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	695c      	ldr	r4, [r3, #20]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f103 0110 	add.w	r1, r3, #16
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8007106:	b29b      	uxth	r3, r3
 8007108:	78f8      	ldrb	r0, [r7, #3]
 800710a:	47a0      	blx	r4
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	da08      	bge.n	8007124 <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007112:	78f9      	ldrb	r1, [r7, #3]
 8007114:	2303      	movs	r3, #3
 8007116:	2204      	movs	r2, #4
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff fa4c 	bl	80065b6 <SCSI_SenseCode>
    return -1;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	e03c      	b.n	800719e <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	fbb3 f3f1 	udiv	r3, r3, r1
 8007134:	441a      	add	r2, r3
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	4619      	mov	r1, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	fbb3 f3f1 	udiv	r3, r3, r1
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad2      	subs	r2, r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007168:	2100      	movs	r1, #0
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fe fc26 	bl	80059bc <MSC_BOT_SendCSW>
 8007170:	e014      	b.n	800719c <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	8812      	ldrh	r2, [r2, #0]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007182:	bf28      	it	cs
 8007184:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8007188:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800718a:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <SCSI_ProcessWrite+0x11c>)
 800718c:	7819      	ldrb	r1, [r3, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f103 0210 	add.w	r2, r3, #16
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 ffad 	bl	80090f6 <USBD_LL_PrepareReceive>
  }

  return 0;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd90      	pop	{r4, r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000006f 	.word	0x2000006f

080071ac <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d102      	bne.n	80071ca <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80071c4:	f04f 33ff 	mov.w	r3, #4294967295
 80071c8:	e013      	b.n	80071f2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80071ca:	8afa      	ldrh	r2, [r7, #22]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80071d0:	e00b      	b.n	80071ea <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80071d2:	8afb      	ldrh	r3, [r7, #22]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80071d8:	8afb      	ldrh	r3, [r7, #22]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	441a      	add	r2, r3
 80071de:	8afb      	ldrh	r3, [r7, #22]
 80071e0:	7811      	ldrb	r1, [r2, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	460a      	mov	r2, r1
 80071e8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80071ea:	8afb      	ldrh	r3, [r7, #22]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f0      	bne.n	80071d2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	e01f      	b.n	8007256 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	79fa      	ldrb	r2, [r7, #7]
 8007248:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 fdde 	bl	8008e0c <USBD_LL_Init>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	e025      	b.n	80072c2 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	32ae      	adds	r2, #174	@ 0xae
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00f      	beq.n	80072b2 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	32ae      	adds	r2, #174	@ 0xae
 800729c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	f107 020e 	add.w	r2, r7, #14
 80072a6:	4610      	mov	r0, r2
 80072a8:	4798      	blx	r3
 80072aa:	4602      	mov	r2, r0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fde6 	bl	8008ea4 <USBD_LL_Start>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	4611      	mov	r1, r2
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	4611      	mov	r1, r2
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f001 f921 	bl	80085be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b02      	cmp	r3, #2
 800739e:	d01a      	beq.n	80073d6 <USBD_LL_SetupStage+0x72>
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d822      	bhi.n	80073ea <USBD_LL_SetupStage+0x86>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <USBD_LL_SetupStage+0x4a>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d00a      	beq.n	80073c2 <USBD_LL_SetupStage+0x5e>
 80073ac:	e01d      	b.n	80073ea <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fb76 	bl	8007aa8 <USBD_StdDevReq>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	e020      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fbde 	bl	8007b8c <USBD_StdItfReq>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e016      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fc40 	bl	8007c64 <USBD_StdEPReq>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e00c      	b.n	8007404 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fdd2 	bl	8008fa2 <USBD_LL_StallEP>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	bf00      	nop
  }

  return ret;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b086      	sub	sp, #24
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	460b      	mov	r3, r1
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d177      	bne.n	8007516 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800742c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007434:	2b03      	cmp	r3, #3
 8007436:	f040 80a1 	bne.w	800757c <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	8992      	ldrh	r2, [r2, #12]
 8007442:	4293      	cmp	r3, r2
 8007444:	d91c      	bls.n	8007480 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	8992      	ldrh	r2, [r2, #12]
 800744e:	1a9a      	subs	r2, r3, r2
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	8992      	ldrh	r2, [r2, #12]
 800745c:	441a      	add	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6919      	ldr	r1, [r3, #16]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4293      	cmp	r3, r2
 8007472:	bf38      	it	cc
 8007474:	4613      	movcc	r3, r2
 8007476:	461a      	mov	r2, r3
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f001 f986 	bl	800878a <USBD_CtlContinueRx>
 800747e:	e07d      	b.n	800757c <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2b02      	cmp	r3, #2
 800748c:	d014      	beq.n	80074b8 <USBD_LL_DataOutStage+0xaa>
 800748e:	2b02      	cmp	r3, #2
 8007490:	d81d      	bhi.n	80074ce <USBD_LL_DataOutStage+0xc0>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <USBD_LL_DataOutStage+0x8e>
 8007496:	2b01      	cmp	r3, #1
 8007498:	d003      	beq.n	80074a2 <USBD_LL_DataOutStage+0x94>
 800749a:	e018      	b.n	80074ce <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	75bb      	strb	r3, [r7, #22]
            break;
 80074a0:	e018      	b.n	80074d4 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	4619      	mov	r1, r3
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa6e 	bl	800798e <USBD_CoreFindIF>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75bb      	strb	r3, [r7, #22]
            break;
 80074b6:	e00d      	b.n	80074d4 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fa70 	bl	80079a8 <USBD_CoreFindEP>
 80074c8:	4603      	mov	r3, r0
 80074ca:	75bb      	strb	r3, [r7, #22]
            break;
 80074cc:	e002      	b.n	80074d4 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75bb      	strb	r3, [r7, #22]
            break;
 80074d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074d4:	7dbb      	ldrb	r3, [r7, #22]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d119      	bne.n	800750e <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d113      	bne.n	800750e <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80074e6:	7dba      	ldrb	r2, [r7, #22]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	32ae      	adds	r2, #174	@ 0xae
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80074f6:	7dba      	ldrb	r2, [r7, #22]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074fe:	7dba      	ldrb	r2, [r7, #22]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	32ae      	adds	r2, #174	@ 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f001 f94c 	bl	80087ac <USBD_CtlSendStatus>
 8007514:	e032      	b.n	800757c <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800751c:	b2db      	uxtb	r3, r3
 800751e:	4619      	mov	r1, r3
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fa41 	bl	80079a8 <USBD_CoreFindEP>
 8007526:	4603      	mov	r3, r0
 8007528:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800752a:	7dbb      	ldrb	r3, [r7, #22]
 800752c:	2bff      	cmp	r3, #255	@ 0xff
 800752e:	d025      	beq.n	800757c <USBD_LL_DataOutStage+0x16e>
 8007530:	7dbb      	ldrb	r3, [r7, #22]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d122      	bne.n	800757c <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d117      	bne.n	8007572 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007542:	7dba      	ldrb	r2, [r7, #22]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	32ae      	adds	r2, #174	@ 0xae
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00f      	beq.n	8007572 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007552:	7dba      	ldrb	r2, [r7, #22]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800755a:	7dba      	ldrb	r2, [r7, #22]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	32ae      	adds	r2, #174	@ 0xae
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	7afa      	ldrb	r2, [r7, #11]
 8007568:	4611      	mov	r1, r2
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d001      	beq.n	800757c <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	e000      	b.n	800757e <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	460b      	mov	r3, r1
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d178      	bne.n	800768c <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3314      	adds	r3, #20
 800759e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d163      	bne.n	8007672 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	8992      	ldrh	r2, [r2, #12]
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d91c      	bls.n	80075f0 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	8992      	ldrh	r2, [r2, #12]
 80075be:	1a9a      	subs	r2, r3, r2
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	8992      	ldrh	r2, [r2, #12]
 80075cc:	441a      	add	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6919      	ldr	r1, [r3, #16]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	461a      	mov	r2, r3
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f001 f8c3 	bl	8008768 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	2100      	movs	r1, #0
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f001 fd84 	bl	80090f6 <USBD_LL_PrepareReceive>
 80075ee:	e040      	b.n	8007672 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	899b      	ldrh	r3, [r3, #12]
 80075f4:	461a      	mov	r2, r3
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d11c      	bne.n	8007638 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007606:	4293      	cmp	r3, r2
 8007608:	d316      	bcc.n	8007638 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007614:	429a      	cmp	r2, r3
 8007616:	d20f      	bcs.n	8007638 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 f8a3 	bl	8008768 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800762a:	2300      	movs	r3, #0
 800762c:	2200      	movs	r2, #0
 800762e:	2100      	movs	r1, #0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 fd60 	bl	80090f6 <USBD_LL_PrepareReceive>
 8007636:	e01c      	b.n	8007672 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d10f      	bne.n	8007664 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007664:	2180      	movs	r1, #128	@ 0x80
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f001 fc9b 	bl	8008fa2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f001 f8b0 	bl	80087d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d03a      	beq.n	80076f2 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fe30 	bl	80072e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800768a:	e032      	b.n	80076f2 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007692:	b2db      	uxtb	r3, r3
 8007694:	4619      	mov	r1, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f986 	bl	80079a8 <USBD_CoreFindEP>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2bff      	cmp	r3, #255	@ 0xff
 80076a4:	d025      	beq.n	80076f2 <USBD_LL_DataInStage+0x16c>
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d122      	bne.n	80076f2 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d11c      	bne.n	80076f2 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076b8:	7dfa      	ldrb	r2, [r7, #23]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	32ae      	adds	r2, #174	@ 0xae
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d014      	beq.n	80076f2 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80076c8:	7dfa      	ldrb	r2, [r7, #23]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076d0:	7dfa      	ldrb	r2, [r7, #23]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	32ae      	adds	r2, #174	@ 0xae
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	4611      	mov	r1, r2
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	4798      	blx	r3
 80076e4:	4603      	mov	r3, r0
 80076e6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076e8:	7dbb      	ldrb	r3, [r7, #22]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80076ee:	7dbb      	ldrb	r3, [r7, #22]
 80076f0:	e000      	b.n	80076f4 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d014      	beq.n	8007762 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6852      	ldr	r2, [r2, #4]
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	4611      	mov	r1, r2
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007762:	2340      	movs	r3, #64	@ 0x40
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fbb6 	bl	8008eda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2240      	movs	r2, #64	@ 0x40
 800777a:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800777e:	2340      	movs	r3, #64	@ 0x40
 8007780:	2200      	movs	r2, #0
 8007782:	2180      	movs	r1, #128	@ 0x80
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fba8 	bl	8008eda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2240      	movs	r2, #64	@ 0x40
 8007796:	841a      	strh	r2, [r3, #32]

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d006      	beq.n	80077e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2204      	movs	r2, #4
 80077e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b04      	cmp	r3, #4
 800780c:	d106      	bne.n	800781c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007814:	b2da      	uxtb	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b03      	cmp	r3, #3
 800783c:	d110      	bne.n	8007860 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	32ae      	adds	r2, #174	@ 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	e01c      	b.n	80078c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b03      	cmp	r3, #3
 8007896:	d115      	bne.n	80078c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32ae      	adds	r2, #174	@ 0xae
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	32ae      	adds	r2, #174	@ 0xae
 80078b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	4611      	mov	r1, r2
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	460b      	mov	r3, r1
 80078d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	32ae      	adds	r2, #174	@ 0xae
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e01c      	b.n	800792a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d115      	bne.n	8007928 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	@ 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	32ae      	adds	r2, #174	@ 0xae
 800791a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	4611      	mov	r1, r2
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6852      	ldr	r2, [r2, #4]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	4611      	mov	r1, r2
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007980:	2303      	movs	r3, #3
 8007982:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800799a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b086      	sub	sp, #24
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	7812      	ldrb	r2, [r2, #0]
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d91f      	bls.n	8007a28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079ee:	e013      	b.n	8007a18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079f0:	f107 030a 	add.w	r3, r7, #10
 80079f4:	4619      	mov	r1, r3
 80079f6:	6978      	ldr	r0, [r7, #20]
 80079f8:	f000 f81b 	bl	8007a32 <USBD_GetNextDesc>
 80079fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d108      	bne.n	8007a18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	789b      	ldrb	r3, [r3, #2]
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d008      	beq.n	8007a26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	885b      	ldrh	r3, [r3, #2]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	897b      	ldrh	r3, [r7, #10]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d8e5      	bhi.n	80079f0 <USBD_GetEpDesc+0x2e>
 8007a24:	e000      	b.n	8007a28 <USBD_GetEpDesc+0x66>
          break;
 8007a26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a28:	693b      	ldr	r3, [r7, #16]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	7812      	ldrb	r2, [r2, #0]
 8007a48:	4413      	add	r3, r2
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a9a:	89fb      	ldrh	r3, [r7, #14]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007abe:	2b40      	cmp	r3, #64	@ 0x40
 8007ac0:	d005      	beq.n	8007ace <USBD_StdDevReq+0x26>
 8007ac2:	2b40      	cmp	r3, #64	@ 0x40
 8007ac4:	d857      	bhi.n	8007b76 <USBD_StdDevReq+0xce>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00f      	beq.n	8007aea <USBD_StdDevReq+0x42>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d153      	bne.n	8007b76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	32ae      	adds	r2, #174	@ 0xae
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e04a      	b.n	8007b80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	785b      	ldrb	r3, [r3, #1]
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d83b      	bhi.n	8007b6a <USBD_StdDevReq+0xc2>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <USBD_StdDevReq+0x50>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007b61 	.word	0x08007b61
 8007b00:	08007b6b 	.word	0x08007b6b
 8007b04:	08007b57 	.word	0x08007b57
 8007b08:	08007b6b 	.word	0x08007b6b
 8007b0c:	08007b2b 	.word	0x08007b2b
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b6b 	.word	0x08007b6b
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b35 	.word	0x08007b35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa3e 	bl	8007fa4 <USBD_GetDescriptor>
          break;
 8007b28:	e024      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fba3 	bl	8008278 <USBD_SetAddress>
          break;
 8007b32:	e01f      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fbe2 	bl	8008300 <USBD_SetConfig>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b40:	e018      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc85 	bl	8008454 <USBD_GetConfig>
          break;
 8007b4a:	e013      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fcb6 	bl	80084c0 <USBD_GetStatus>
          break;
 8007b54:	e00e      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fce5 	bl	8008528 <USBD_SetFeature>
          break;
 8007b5e:	e009      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fd09 	bl	800857a <USBD_ClrFeature>
          break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fd60 	bl	8008632 <USBD_CtlError>
          break;
 8007b72:	bf00      	nop
      }
      break;
 8007b74:	e004      	b.n	8007b80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fd5a 	bl	8008632 <USBD_CtlError>
      break;
 8007b7e:	bf00      	nop
  }

  return ret;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop

08007b8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ba2:	2b40      	cmp	r3, #64	@ 0x40
 8007ba4:	d005      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007ba6:	2b40      	cmp	r3, #64	@ 0x40
 8007ba8:	d852      	bhi.n	8007c50 <USBD_StdItfReq+0xc4>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <USBD_StdItfReq+0x26>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d14e      	bne.n	8007c50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d840      	bhi.n	8007c42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	889b      	ldrh	r3, [r3, #4]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d836      	bhi.n	8007c38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	889b      	ldrh	r3, [r3, #4]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fedb 	bl	800798e <USBD_CoreFindIF>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2bff      	cmp	r3, #255	@ 0xff
 8007be0:	d01d      	beq.n	8007c1e <USBD_StdItfReq+0x92>
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11a      	bne.n	8007c1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007be8:	7bba      	ldrb	r2, [r7, #14]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	32ae      	adds	r2, #174	@ 0xae
 8007bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00f      	beq.n	8007c18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007bf8:	7bba      	ldrb	r2, [r7, #14]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c00:	7bba      	ldrb	r2, [r7, #14]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	32ae      	adds	r2, #174	@ 0xae
 8007c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c16:	e004      	b.n	8007c22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c1c:	e001      	b.n	8007c22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d110      	bne.n	8007c4c <USBD_StdItfReq+0xc0>
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fdbb 	bl	80087ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c36:	e009      	b.n	8007c4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fcf9 	bl	8008632 <USBD_CtlError>
          break;
 8007c40:	e004      	b.n	8007c4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fcf4 	bl	8008632 <USBD_CtlError>
          break;
 8007c4a:	e000      	b.n	8007c4e <USBD_StdItfReq+0xc2>
          break;
 8007c4c:	bf00      	nop
      }
      break;
 8007c4e:	e004      	b.n	8007c5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fced 	bl	8008632 <USBD_CtlError>
      break;
 8007c58:	bf00      	nop
  }

  return ret;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	889b      	ldrh	r3, [r3, #4]
 8007c76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c80:	2b40      	cmp	r3, #64	@ 0x40
 8007c82:	d007      	beq.n	8007c94 <USBD_StdEPReq+0x30>
 8007c84:	2b40      	cmp	r3, #64	@ 0x40
 8007c86:	f200 8181 	bhi.w	8007f8c <USBD_StdEPReq+0x328>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d02a      	beq.n	8007ce4 <USBD_StdEPReq+0x80>
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	f040 817c 	bne.w	8007f8c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff fe85 	bl	80079a8 <USBD_CoreFindEP>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ca2:	7b7b      	ldrb	r3, [r7, #13]
 8007ca4:	2bff      	cmp	r3, #255	@ 0xff
 8007ca6:	f000 8176 	beq.w	8007f96 <USBD_StdEPReq+0x332>
 8007caa:	7b7b      	ldrb	r3, [r7, #13]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f040 8172 	bne.w	8007f96 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007cb2:	7b7a      	ldrb	r2, [r7, #13]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cba:	7b7a      	ldrb	r2, [r7, #13]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	32ae      	adds	r2, #174	@ 0xae
 8007cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8165 	beq.w	8007f96 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ccc:	7b7a      	ldrb	r2, [r7, #13]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32ae      	adds	r2, #174	@ 0xae
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ce2:	e158      	b.n	8007f96 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	785b      	ldrb	r3, [r3, #1]
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d008      	beq.n	8007cfe <USBD_StdEPReq+0x9a>
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	f300 8147 	bgt.w	8007f80 <USBD_StdEPReq+0x31c>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 809b 	beq.w	8007e2e <USBD_StdEPReq+0x1ca>
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d03c      	beq.n	8007d76 <USBD_StdEPReq+0x112>
 8007cfc:	e140      	b.n	8007f80 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d002      	beq.n	8007d10 <USBD_StdEPReq+0xac>
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d016      	beq.n	8007d3c <USBD_StdEPReq+0xd8>
 8007d0e:	e02c      	b.n	8007d6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <USBD_StdEPReq+0xce>
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b80      	cmp	r3, #128	@ 0x80
 8007d1a:	d00a      	beq.n	8007d32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 f93e 	bl	8008fa2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d26:	2180      	movs	r1, #128	@ 0x80
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f93a 	bl	8008fa2 <USBD_LL_StallEP>
 8007d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d30:	e020      	b.n	8007d74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fc7c 	bl	8008632 <USBD_CtlError>
              break;
 8007d3a:	e01b      	b.n	8007d74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	885b      	ldrh	r3, [r3, #2]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10e      	bne.n	8007d62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <USBD_StdEPReq+0xfe>
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b80      	cmp	r3, #128	@ 0x80
 8007d4e:	d008      	beq.n	8007d62 <USBD_StdEPReq+0xfe>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	88db      	ldrh	r3, [r3, #6]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f920 	bl	8008fa2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fd22 	bl	80087ac <USBD_CtlSendStatus>

              break;
 8007d68:	e004      	b.n	8007d74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fc60 	bl	8008632 <USBD_CtlError>
              break;
 8007d72:	bf00      	nop
          }
          break;
 8007d74:	e109      	b.n	8007f8a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d002      	beq.n	8007d88 <USBD_StdEPReq+0x124>
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d016      	beq.n	8007db4 <USBD_StdEPReq+0x150>
 8007d86:	e04b      	b.n	8007e20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00d      	beq.n	8007daa <USBD_StdEPReq+0x146>
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b80      	cmp	r3, #128	@ 0x80
 8007d92:	d00a      	beq.n	8007daa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 f902 	bl	8008fa2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d9e:	2180      	movs	r1, #128	@ 0x80
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f8fe 	bl	8008fa2 <USBD_LL_StallEP>
 8007da6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007da8:	e040      	b.n	8007e2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fc40 	bl	8008632 <USBD_CtlError>
              break;
 8007db2:	e03b      	b.n	8007e2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d136      	bne.n	8007e2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 f908 	bl	8008fe0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fceb 	bl	80087ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff fde4 	bl	80079a8 <USBD_CoreFindEP>
 8007de0:	4603      	mov	r3, r0
 8007de2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007de4:	7b7b      	ldrb	r3, [r7, #13]
 8007de6:	2bff      	cmp	r3, #255	@ 0xff
 8007de8:	d01f      	beq.n	8007e2a <USBD_StdEPReq+0x1c6>
 8007dea:	7b7b      	ldrb	r3, [r7, #13]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d11c      	bne.n	8007e2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007df0:	7b7a      	ldrb	r2, [r7, #13]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007df8:	7b7a      	ldrb	r2, [r7, #13]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32ae      	adds	r2, #174	@ 0xae
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d010      	beq.n	8007e2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e08:	7b7a      	ldrb	r2, [r7, #13]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32ae      	adds	r2, #174	@ 0xae
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e1e:	e004      	b.n	8007e2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fc05 	bl	8008632 <USBD_CtlError>
              break;
 8007e28:	e000      	b.n	8007e2c <USBD_StdEPReq+0x1c8>
              break;
 8007e2a:	bf00      	nop
          }
          break;
 8007e2c:	e0ad      	b.n	8007f8a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d002      	beq.n	8007e40 <USBD_StdEPReq+0x1dc>
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d033      	beq.n	8007ea6 <USBD_StdEPReq+0x242>
 8007e3e:	e099      	b.n	8007f74 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d007      	beq.n	8007e56 <USBD_StdEPReq+0x1f2>
 8007e46:	7bbb      	ldrb	r3, [r7, #14]
 8007e48:	2b80      	cmp	r3, #128	@ 0x80
 8007e4a:	d004      	beq.n	8007e56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fbef 	bl	8008632 <USBD_CtlError>
                break;
 8007e54:	e093      	b.n	8007f7e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	da0b      	bge.n	8007e76 <USBD_StdEPReq+0x212>
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	3310      	adds	r3, #16
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	3304      	adds	r3, #4
 8007e74:	e00b      	b.n	8007e8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	330e      	adds	r3, #14
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fc44 	bl	800872c <USBD_CtlSendData>
              break;
 8007ea4:	e06b      	b.n	8007f7e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da11      	bge.n	8007ed2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	f003 020f 	and.w	r2, r3, #15
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	3323      	adds	r3, #35	@ 0x23
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d117      	bne.n	8007ef8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fbb1 	bl	8008632 <USBD_CtlError>
                  break;
 8007ed0:	e055      	b.n	8007f7e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	f003 020f 	and.w	r2, r3, #15
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fb9e 	bl	8008632 <USBD_CtlError>
                  break;
 8007ef6:	e042      	b.n	8007f7e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da0b      	bge.n	8007f18 <USBD_StdEPReq+0x2b4>
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	3310      	adds	r3, #16
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4413      	add	r3, r2
 8007f14:	3304      	adds	r3, #4
 8007f16:	e00b      	b.n	8007f30 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3304      	adds	r3, #4
 8007f30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <USBD_StdEPReq+0x2da>
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b80      	cmp	r3, #128	@ 0x80
 8007f3c:	d103      	bne.n	8007f46 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	739a      	strb	r2, [r3, #14]
 8007f44:	e00e      	b.n	8007f64 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 f867 	bl	800901e <USBD_LL_IsStallEP>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	739a      	strb	r2, [r3, #14]
 8007f5c:	e002      	b.n	8007f64 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	330e      	adds	r3, #14
 8007f68:	2202      	movs	r2, #2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbdd 	bl	800872c <USBD_CtlSendData>
              break;
 8007f72:	e004      	b.n	8007f7e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fb5b 	bl	8008632 <USBD_CtlError>
              break;
 8007f7c:	bf00      	nop
          }
          break;
 8007f7e:	e004      	b.n	8007f8a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fb55 	bl	8008632 <USBD_CtlError>
          break;
 8007f88:	bf00      	nop
      }
      break;
 8007f8a:	e005      	b.n	8007f98 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fb4f 	bl	8008632 <USBD_CtlError>
      break;
 8007f94:	e000      	b.n	8007f98 <USBD_StdEPReq+0x334>
      break;
 8007f96:	bf00      	nop
  }

  return ret;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	885b      	ldrh	r3, [r3, #2]
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	f200 8128 	bhi.w	800821a <USBD_GetDescriptor+0x276>
 8007fca:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <USBD_GetDescriptor+0x2c>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08008005 	.word	0x08008005
 8007fd8:	08008045 	.word	0x08008045
 8007fdc:	0800821b 	.word	0x0800821b
 8007fe0:	0800821b 	.word	0x0800821b
 8007fe4:	080081bb 	.word	0x080081bb
 8007fe8:	080081e7 	.word	0x080081e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7c12      	ldrb	r2, [r2, #16]
 8007ff8:	f107 0108 	add.w	r1, r7, #8
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4798      	blx	r3
 8008000:	60f8      	str	r0, [r7, #12]
      break;
 8008002:	e112      	b.n	800822a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7c1b      	ldrb	r3, [r3, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10d      	bne.n	8008028 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	f107 0208 	add.w	r2, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	2202      	movs	r2, #2
 8008024:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008026:	e100      	b.n	800822a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	f107 0208 	add.w	r2, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
      break;
 8008042:	e0f2      	b.n	800822a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	885b      	ldrh	r3, [r3, #2]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b05      	cmp	r3, #5
 800804c:	f200 80ac 	bhi.w	80081a8 <USBD_GetDescriptor+0x204>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <USBD_GetDescriptor+0xb4>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	08008071 	.word	0x08008071
 800805c:	080080a5 	.word	0x080080a5
 8008060:	080080d9 	.word	0x080080d9
 8008064:	0800810d 	.word	0x0800810d
 8008068:	08008141 	.word	0x08008141
 800806c:	08008175 	.word	0x08008175
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	7c12      	ldrb	r2, [r2, #16]
 8008088:	f107 0108 	add.w	r1, r7, #8
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
 8008090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008092:	e091      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 facb 	bl	8008632 <USBD_CtlError>
            err++;
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	3301      	adds	r3, #1
 80080a0:	72fb      	strb	r3, [r7, #11]
          break;
 80080a2:	e089      	b.n	80081b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7c12      	ldrb	r2, [r2, #16]
 80080bc:	f107 0108 	add.w	r1, r7, #8
 80080c0:	4610      	mov	r0, r2
 80080c2:	4798      	blx	r3
 80080c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c6:	e077      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fab1 	bl	8008632 <USBD_CtlError>
            err++;
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	3301      	adds	r3, #1
 80080d4:	72fb      	strb	r3, [r7, #11]
          break;
 80080d6:	e06f      	b.n	80081b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7c12      	ldrb	r2, [r2, #16]
 80080f0:	f107 0108 	add.w	r1, r7, #8
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fa:	e05d      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa97 	bl	8008632 <USBD_CtlError>
            err++;
 8008104:	7afb      	ldrb	r3, [r7, #11]
 8008106:	3301      	adds	r3, #1
 8008108:	72fb      	strb	r3, [r7, #11]
          break;
 800810a:	e055      	b.n	80081b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7c12      	ldrb	r2, [r2, #16]
 8008124:	f107 0108 	add.w	r1, r7, #8
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812e:	e043      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa7d 	bl	8008632 <USBD_CtlError>
            err++;
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	3301      	adds	r3, #1
 800813c:	72fb      	strb	r3, [r7, #11]
          break;
 800813e:	e03b      	b.n	80081b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	7c12      	ldrb	r2, [r2, #16]
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008162:	e029      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa63 	bl	8008632 <USBD_CtlError>
            err++;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	3301      	adds	r3, #1
 8008170:	72fb      	strb	r3, [r7, #11]
          break;
 8008172:	e021      	b.n	80081b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008196:	e00f      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa49 	bl	8008632 <USBD_CtlError>
            err++;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	3301      	adds	r3, #1
 80081a4:	72fb      	strb	r3, [r7, #11]
          break;
 80081a6:	e007      	b.n	80081b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa41 	bl	8008632 <USBD_CtlError>
          err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081b6:	bf00      	nop
      }
      break;
 80081b8:	e037      	b.n	800822a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7c1b      	ldrb	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d109      	bne.n	80081d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ca:	f107 0208 	add.w	r2, r7, #8
 80081ce:	4610      	mov	r0, r2
 80081d0:	4798      	blx	r3
 80081d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081d4:	e029      	b.n	800822a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fa2a 	bl	8008632 <USBD_CtlError>
        err++;
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	3301      	adds	r3, #1
 80081e2:	72fb      	strb	r3, [r7, #11]
      break;
 80081e4:	e021      	b.n	800822a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7c1b      	ldrb	r3, [r3, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10d      	bne.n	800820a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f6:	f107 0208 	add.w	r2, r7, #8
 80081fa:	4610      	mov	r0, r2
 80081fc:	4798      	blx	r3
 80081fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	2207      	movs	r2, #7
 8008206:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008208:	e00f      	b.n	800822a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fa10 	bl	8008632 <USBD_CtlError>
        err++;
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	3301      	adds	r3, #1
 8008216:	72fb      	strb	r3, [r7, #11]
      break;
 8008218:	e007      	b.n	800822a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fa08 	bl	8008632 <USBD_CtlError>
      err++;
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	3301      	adds	r3, #1
 8008226:	72fb      	strb	r3, [r7, #11]
      break;
 8008228:	bf00      	nop
  }

  if (err != 0U)
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11e      	bne.n	800826e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d016      	beq.n	8008266 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00e      	beq.n	800825c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	88da      	ldrh	r2, [r3, #6]
 8008242:	893b      	ldrh	r3, [r7, #8]
 8008244:	4293      	cmp	r3, r2
 8008246:	bf28      	it	cs
 8008248:	4613      	movcs	r3, r2
 800824a:	b29b      	uxth	r3, r3
 800824c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800824e:	893b      	ldrh	r3, [r7, #8]
 8008250:	461a      	mov	r2, r3
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fa69 	bl	800872c <USBD_CtlSendData>
 800825a:	e009      	b.n	8008270 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9e7 	bl	8008632 <USBD_CtlError>
 8008264:	e004      	b.n	8008270 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 faa0 	bl	80087ac <USBD_CtlSendStatus>
 800826c:	e000      	b.n	8008270 <USBD_GetDescriptor+0x2cc>
    return;
 800826e:	bf00      	nop
  }
}
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop

08008278 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	889b      	ldrh	r3, [r3, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d131      	bne.n	80082ee <USBD_SetAddress+0x76>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	88db      	ldrh	r3, [r3, #6]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d12d      	bne.n	80082ee <USBD_SetAddress+0x76>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	2b7f      	cmp	r3, #127	@ 0x7f
 8008298:	d829      	bhi.n	80082ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	885b      	ldrh	r3, [r3, #2]
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d104      	bne.n	80082bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f9bc 	bl	8008632 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ba:	e01d      	b.n	80082f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7bfa      	ldrb	r2, [r7, #15]
 80082c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fed4 	bl	8009076 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa6c 	bl	80087ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2202      	movs	r2, #2
 80082de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e2:	e009      	b.n	80082f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ec:	e004      	b.n	80082f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f99e 	bl	8008632 <USBD_CtlError>
  }
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	885b      	ldrh	r3, [r3, #2]
 8008312:	b2da      	uxtb	r2, r3
 8008314:	4b4e      	ldr	r3, [pc, #312]	@ (8008450 <USBD_SetConfig+0x150>)
 8008316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008318:	4b4d      	ldr	r3, [pc, #308]	@ (8008450 <USBD_SetConfig+0x150>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d905      	bls.n	800832c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f985 	bl	8008632 <USBD_CtlError>
    return USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	e08c      	b.n	8008446 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b02      	cmp	r3, #2
 8008336:	d002      	beq.n	800833e <USBD_SetConfig+0x3e>
 8008338:	2b03      	cmp	r3, #3
 800833a:	d029      	beq.n	8008390 <USBD_SetConfig+0x90>
 800833c:	e075      	b.n	800842a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800833e:	4b44      	ldr	r3, [pc, #272]	@ (8008450 <USBD_SetConfig+0x150>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d020      	beq.n	8008388 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008346:	4b42      	ldr	r3, [pc, #264]	@ (8008450 <USBD_SetConfig+0x150>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008350:	4b3f      	ldr	r3, [pc, #252]	@ (8008450 <USBD_SetConfig+0x150>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7fe ffce 	bl	80072f8 <USBD_SetClassConfig>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d008      	beq.n	8008378 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f962 	bl	8008632 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008376:	e065      	b.n	8008444 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fa17 	bl	80087ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2203      	movs	r2, #3
 8008382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008386:	e05d      	b.n	8008444 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa0f 	bl	80087ac <USBD_CtlSendStatus>
      break;
 800838e:	e059      	b.n	8008444 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008390:	4b2f      	ldr	r3, [pc, #188]	@ (8008450 <USBD_SetConfig+0x150>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d112      	bne.n	80083be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008450 <USBD_SetConfig+0x150>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083aa:	4b29      	ldr	r3, [pc, #164]	@ (8008450 <USBD_SetConfig+0x150>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7fe ffbd 	bl	8007330 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9f8 	bl	80087ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083bc:	e042      	b.n	8008444 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083be:	4b24      	ldr	r3, [pc, #144]	@ (8008450 <USBD_SetConfig+0x150>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d02a      	beq.n	8008422 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7fe ffab 	bl	8007330 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083da:	4b1d      	ldr	r3, [pc, #116]	@ (8008450 <USBD_SetConfig+0x150>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008450 <USBD_SetConfig+0x150>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fe ff84 	bl	80072f8 <USBD_SetClassConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f918 	bl	8008632 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7fe ff90 	bl	8007330 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008418:	e014      	b.n	8008444 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9c6 	bl	80087ac <USBD_CtlSendStatus>
      break;
 8008420:	e010      	b.n	8008444 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9c2 	bl	80087ac <USBD_CtlSendStatus>
      break;
 8008428:	e00c      	b.n	8008444 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f900 	bl	8008632 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008432:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <USBD_SetConfig+0x150>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7fe ff79 	bl	8007330 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800843e:	2303      	movs	r3, #3
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	bf00      	nop
  }

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200189a4 	.word	0x200189a4

08008454 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	88db      	ldrh	r3, [r3, #6]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d004      	beq.n	8008470 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f8e2 	bl	8008632 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800846e:	e023      	b.n	80084b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	dc02      	bgt.n	8008482 <USBD_GetConfig+0x2e>
 800847c:	2b00      	cmp	r3, #0
 800847e:	dc03      	bgt.n	8008488 <USBD_GetConfig+0x34>
 8008480:	e015      	b.n	80084ae <USBD_GetConfig+0x5a>
 8008482:	2b03      	cmp	r3, #3
 8008484:	d00b      	beq.n	800849e <USBD_GetConfig+0x4a>
 8008486:	e012      	b.n	80084ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3308      	adds	r3, #8
 8008492:	2201      	movs	r2, #1
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f948 	bl	800872c <USBD_CtlSendData>
        break;
 800849c:	e00c      	b.n	80084b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3304      	adds	r3, #4
 80084a2:	2201      	movs	r2, #1
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f940 	bl	800872c <USBD_CtlSendData>
        break;
 80084ac:	e004      	b.n	80084b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f8be 	bl	8008632 <USBD_CtlError>
        break;
 80084b6:	bf00      	nop
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d81e      	bhi.n	8008516 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	88db      	ldrh	r3, [r3, #6]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d004      	beq.n	80084ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8a5 	bl	8008632 <USBD_CtlError>
        break;
 80084e8:	e01a      	b.n	8008520 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f043 0202 	orr.w	r2, r3, #2
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	330c      	adds	r3, #12
 800850a:	2202      	movs	r2, #2
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f90c 	bl	800872c <USBD_CtlSendData>
      break;
 8008514:	e004      	b.n	8008520 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f88a 	bl	8008632 <USBD_CtlError>
      break;
 800851e:	bf00      	nop
  }
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d107      	bne.n	800854a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f932 	bl	80087ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008548:	e013      	b.n	8008572 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d10b      	bne.n	800856a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	b29b      	uxth	r3, r3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f922 	bl	80087ac <USBD_CtlSendStatus>
}
 8008568:	e003      	b.n	8008572 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f860 	bl	8008632 <USBD_CtlError>
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	2b02      	cmp	r3, #2
 8008590:	d80b      	bhi.n	80085aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d10c      	bne.n	80085b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f902 	bl	80087ac <USBD_CtlSendStatus>
      }
      break;
 80085a8:	e004      	b.n	80085b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f840 	bl	8008632 <USBD_CtlError>
      break;
 80085b2:	e000      	b.n	80085b6 <USBD_ClrFeature+0x3c>
      break;
 80085b4:	bf00      	nop
  }
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3301      	adds	r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff fa3e 	bl	8007a6a <SWAPBYTE>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fa31 	bl	8007a6a <SWAPBYTE>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff fa24 	bl	8007a6a <SWAPBYTE>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	80da      	strh	r2, [r3, #6]
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800863c:	2180      	movs	r1, #128	@ 0x80
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fcaf 	bl	8008fa2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008644:	2100      	movs	r1, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fcab 	bl	8008fa2 <USBD_LL_StallEP>
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d042      	beq.n	80086f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800866e:	6938      	ldr	r0, [r7, #16]
 8008670:	f000 f842 	bl	80086f8 <USBD_GetLen>
 8008674:	4603      	mov	r3, r0
 8008676:	3301      	adds	r3, #1
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800867e:	d808      	bhi.n	8008692 <USBD_GetString+0x3e>
 8008680:	6938      	ldr	r0, [r7, #16]
 8008682:	f000 f839 	bl	80086f8 <USBD_GetLen>
 8008686:	4603      	mov	r3, r0
 8008688:	3301      	adds	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	e001      	b.n	8008696 <USBD_GetString+0x42>
 8008692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	4413      	add	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	3301      	adds	r3, #1
 80086aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	2203      	movs	r2, #3
 80086b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	3301      	adds	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086bc:	e013      	b.n	80086e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	3301      	adds	r3, #1
 80086ce:	613b      	str	r3, [r7, #16]
    idx++;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	3301      	adds	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	4413      	add	r3, r2
 80086dc:	2200      	movs	r2, #0
 80086de:	701a      	strb	r2, [r3, #0]
    idx++;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	3301      	adds	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e7      	bne.n	80086be <USBD_GetString+0x6a>
 80086ee:	e000      	b.n	80086f2 <USBD_GetString+0x9e>
    return;
 80086f0:	bf00      	nop
  }
}
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008708:	e005      	b.n	8008716 <USBD_GetLen+0x1e>
  {
    len++;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	3301      	adds	r3, #1
 800870e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	3301      	adds	r3, #1
 8008714:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f5      	bne.n	800870a <USBD_GetLen+0x12>
  }

  return len;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2202      	movs	r2, #2
 800873c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	2100      	movs	r1, #0
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fcab 	bl	80090b4 <USBD_LL_Transmit>

  return USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	2100      	movs	r1, #0
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 fc9a 	bl	80090b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	60f8      	str	r0, [r7, #12]
 8008792:	60b9      	str	r1, [r7, #8]
 8008794:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	2100      	movs	r1, #0
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fcaa 	bl	80090f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2204      	movs	r2, #4
 80087b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fc76 	bl	80090b4 <USBD_LL_Transmit>

  return USBD_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2205      	movs	r2, #5
 80087de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087e2:	2300      	movs	r3, #0
 80087e4:	2200      	movs	r2, #0
 80087e6:	2100      	movs	r1, #0
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fc84 	bl	80090f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087fc:	2200      	movs	r2, #0
 80087fe:	4912      	ldr	r1, [pc, #72]	@ (8008848 <MX_USB_DEVICE_Init+0x50>)
 8008800:	4812      	ldr	r0, [pc, #72]	@ (800884c <MX_USB_DEVICE_Init+0x54>)
 8008802:	f7fe fcfc 	bl	80071fe <USBD_Init>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800880c:	f7f8 fa0a 	bl	8000c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008810:	490f      	ldr	r1, [pc, #60]	@ (8008850 <MX_USB_DEVICE_Init+0x58>)
 8008812:	480e      	ldr	r0, [pc, #56]	@ (800884c <MX_USB_DEVICE_Init+0x54>)
 8008814:	f7fe fd23 	bl	800725e <USBD_RegisterClass>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800881e:	f7f8 fa01 	bl	8000c24 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008822:	490c      	ldr	r1, [pc, #48]	@ (8008854 <MX_USB_DEVICE_Init+0x5c>)
 8008824:	4809      	ldr	r0, [pc, #36]	@ (800884c <MX_USB_DEVICE_Init+0x54>)
 8008826:	f7fc fedf 	bl	80055e8 <USBD_MSC_RegisterStorage>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008830:	f7f8 f9f8 	bl	8000c24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008834:	4805      	ldr	r0, [pc, #20]	@ (800884c <MX_USB_DEVICE_Init+0x54>)
 8008836:	f7fe fd48 	bl	80072ca <USBD_Start>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008840:	f7f8 f9f0 	bl	8000c24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008844:	bf00      	nop
 8008846:	bd80      	pop	{r7, pc}
 8008848:	2000008c 	.word	0x2000008c
 800884c:	200189a8 	.word	0x200189a8
 8008850:	2000000c 	.word	0x2000000c
 8008854:	200000dc 	.word	0x200000dc

08008858 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2212      	movs	r2, #18
 8008868:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	@ (8008878 <USBD_FS_DeviceDescriptor+0x20>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	200000a8 	.word	0x200000a8

0800887c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2204      	movs	r2, #4
 800888c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800888e:	4b03      	ldr	r3, [pc, #12]	@ (800889c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	200000bc 	.word	0x200000bc

080088a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	4907      	ldr	r1, [pc, #28]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80088b6:	4808      	ldr	r0, [pc, #32]	@ (80088d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80088b8:	f7ff fecc 	bl	8008654 <USBD_GetString>
 80088bc:	e004      	b.n	80088c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4904      	ldr	r1, [pc, #16]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80088c2:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80088c4:	f7ff fec6 	bl	8008654 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c8:	4b02      	ldr	r3, [pc, #8]	@ (80088d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20018c84 	.word	0x20018c84
 80088d8:	0800a33c 	.word	0x0800a33c

080088dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	4904      	ldr	r1, [pc, #16]	@ (80088fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80088ec:	4804      	ldr	r0, [pc, #16]	@ (8008900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80088ee:	f7ff feb1 	bl	8008654 <USBD_GetString>
  return USBD_StrDesc;
 80088f2:	4b02      	ldr	r3, [pc, #8]	@ (80088fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20018c84 	.word	0x20018c84
 8008900:	0800a350 	.word	0x0800a350

08008904 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	6039      	str	r1, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	221a      	movs	r2, #26
 8008914:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008916:	f000 f843 	bl	80089a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800891a:	4b02      	ldr	r3, [pc, #8]	@ (8008924 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	200000c0 	.word	0x200000c0

08008928 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	4907      	ldr	r1, [pc, #28]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
 800893e:	4808      	ldr	r0, [pc, #32]	@ (8008960 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008940:	f7ff fe88 	bl	8008654 <USBD_GetString>
 8008944:	e004      	b.n	8008950 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	4904      	ldr	r1, [pc, #16]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
 800894a:	4805      	ldr	r0, [pc, #20]	@ (8008960 <USBD_FS_ConfigStrDescriptor+0x38>)
 800894c:	f7ff fe82 	bl	8008654 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008950:	4b02      	ldr	r3, [pc, #8]	@ (800895c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	20018c84 	.word	0x20018c84
 8008960:	0800a364 	.word	0x0800a364

08008964 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	@ (800899c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800897c:	f7ff fe6a 	bl	8008654 <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	@ (800899c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008988:	f7ff fe64 	bl	8008654 <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	@ (8008998 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20018c84 	.word	0x20018c84
 800899c:	0800a370 	.word	0x0800a370

080089a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089a6:	4b0f      	ldr	r3, [pc, #60]	@ (80089e4 <Get_SerialNum+0x44>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089ac:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <Get_SerialNum+0x48>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089b2:	4b0e      	ldr	r3, [pc, #56]	@ (80089ec <Get_SerialNum+0x4c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4413      	add	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80089c6:	2208      	movs	r2, #8
 80089c8:	4909      	ldr	r1, [pc, #36]	@ (80089f0 <Get_SerialNum+0x50>)
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f814 	bl	80089f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80089d0:	2204      	movs	r2, #4
 80089d2:	4908      	ldr	r1, [pc, #32]	@ (80089f4 <Get_SerialNum+0x54>)
 80089d4:	68b8      	ldr	r0, [r7, #8]
 80089d6:	f000 f80f 	bl	80089f8 <IntToUnicode>
  }
}
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	1fff7a10 	.word	0x1fff7a10
 80089e8:	1fff7a14 	.word	0x1fff7a14
 80089ec:	1fff7a18 	.word	0x1fff7a18
 80089f0:	200000c2 	.word	0x200000c2
 80089f4:	200000d2 	.word	0x200000d2

080089f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4613      	mov	r3, r2
 8008a04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
 8008a0e:	e027      	b.n	8008a60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	0f1b      	lsrs	r3, r3, #28
 8008a14:	2b09      	cmp	r3, #9
 8008a16:	d80b      	bhi.n	8008a30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	0f1b      	lsrs	r3, r3, #28
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4619      	mov	r1, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	440b      	add	r3, r1
 8008a28:	3230      	adds	r2, #48	@ 0x30
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	e00a      	b.n	8008a46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	0f1b      	lsrs	r3, r3, #28
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	440b      	add	r3, r1
 8008a40:	3237      	adds	r2, #55	@ 0x37
 8008a42:	b2d2      	uxtb	r2, r2
 8008a44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	3301      	adds	r3, #1
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	4413      	add	r3, r2
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	75fb      	strb	r3, [r7, #23]
 8008a60:	7dfa      	ldrb	r2, [r7, #23]
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3d3      	bcc.n	8008a10 <IntToUnicode+0x18>
  }
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <STORAGE_Init_FS>:
/**
 * @brief  Initializes the storage unit (medium) over USB FS IP
 * @param  lun: Logical unit number.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_Init_FS(uint8_t lun) {
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN 2 */
	UNUSED(lun);

	return (USBD_OK);
 8008a80:	2300      	movs	r3, #0
	/* USER CODE END 2 */
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <STORAGE_GetCapacity_FS>:
 * @param  block_num: Number of total block number.
 * @param  block_size: Block size.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num,
		uint16_t *block_size) {
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	4603      	mov	r3, r0
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	607a      	str	r2, [r7, #4]
 8008a9a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 3 */
	UNUSED(lun);

	*block_num = STORAGE_BLK_NBR - 1;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	22bf      	movs	r2, #191	@ 0xbf
 8008aa0:	601a      	str	r2, [r3, #0]
	*block_size = STORAGE_BLK_SIZ;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aa8:	801a      	strh	r2, [r3, #0]
	return (USBD_OK);
 8008aaa:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <STORAGE_IsReady_FS>:
/**
 * @brief   Checks whether the medium is ready.
 * @param  lun:  Logical unit number.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_IsReady_FS(uint8_t lun) {
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN 4 */
	UNUSED(lun);

	return (USBD_OK);
 8008ac2:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <STORAGE_IsWriteProtected_FS>:
/**
 * @brief  Checks whether the medium is write protected.
 * @param  lun: Logical unit number.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun) {
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN 5 */
	UNUSED(lun);

	return (USBD_OK);
 8008ada:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <STORAGE_Read_FS>:
 * @param  blk_addr: Logical block address.
 * @param  blk_len: Blocks number.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr,
		uint16_t blk_len) {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
 8008af2:	461a      	mov	r2, r3
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
 8008af8:	4613      	mov	r3, r2
 8008afa:	81bb      	strh	r3, [r7, #12]
	/* USER CODE BEGIN 6 */

	for (uint16_t i = 0; i < blk_len; i++) {
 8008afc:	2300      	movs	r3, #0
 8008afe:	82fb      	strh	r3, [r7, #22]
 8008b00:	e010      	b.n	8008b24 <STORAGE_Read_FS+0x3c>
		FTL_Read(blk_addr + i, buf + i * NAND_PAGE_SIZE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	8afb      	ldrh	r3, [r7, #22]
 8008b08:	4413      	add	r3, r2
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	8afb      	ldrh	r3, [r7, #22]
 8008b0e:	025b      	lsls	r3, r3, #9
 8008b10:	4619      	mov	r1, r3
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	440b      	add	r3, r1
 8008b16:	4619      	mov	r1, r3
 8008b18:	4610      	mov	r0, r2
 8008b1a:	f7f7 fd69 	bl	80005f0 <FTL_Read>
	for (uint16_t i = 0; i < blk_len; i++) {
 8008b1e:	8afb      	ldrh	r3, [r7, #22]
 8008b20:	3301      	adds	r3, #1
 8008b22:	82fb      	strh	r3, [r7, #22]
 8008b24:	8afa      	ldrh	r2, [r7, #22]
 8008b26:	89bb      	ldrh	r3, [r7, #12]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d3ea      	bcc.n	8008b02 <STORAGE_Read_FS+0x1a>
	}

	return (USBD_OK);
 8008b2c:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <STORAGE_Write_FS>:
 * @param  blk_addr: Logical block address.
 * @param  blk_len: Blocks number.
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr,
		uint16_t blk_len) {
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b086      	sub	sp, #24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	461a      	mov	r2, r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]
 8008b46:	4613      	mov	r3, r2
 8008b48:	81bb      	strh	r3, [r7, #12]
	/* USER CODE BEGIN 7 */

	for (uint16_t i = 0; i < blk_len; i++) {
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	82fb      	strh	r3, [r7, #22]
 8008b4e:	e010      	b.n	8008b72 <STORAGE_Write_FS+0x3c>
		FTL_Write(blk_addr + i, buf + i * NAND_PAGE_SIZE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	8afb      	ldrh	r3, [r7, #22]
 8008b56:	4413      	add	r3, r2
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	8afb      	ldrh	r3, [r7, #22]
 8008b5c:	025b      	lsls	r3, r3, #9
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	440b      	add	r3, r1
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7f7 fd86 	bl	8000678 <FTL_Write>
	for (uint16_t i = 0; i < blk_len; i++) {
 8008b6c:	8afb      	ldrh	r3, [r7, #22]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	82fb      	strh	r3, [r7, #22]
 8008b72:	8afa      	ldrh	r2, [r7, #22]
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d3ea      	bcc.n	8008b50 <STORAGE_Write_FS+0x1a>
	}

	return (USBD_OK);
 8008b7a:	2300      	movs	r3, #0
	/* USER CODE END 7 */
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <STORAGE_GetMaxLun_FS>:
/**
 * @brief  Returns the Max Supported LUNs.
 * @param  None
 * @retval Lun(s) number.
 */
int8_t STORAGE_GetMaxLun_FS(void) {
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 8 */
	return (STORAGE_LUN_NBR - 1);
 8008b88:	2300      	movs	r3, #0
	/* USER CODE END 8 */
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	@ 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b9c:	f107 0314 	add.w	r3, r7, #20
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	609a      	str	r2, [r3, #8]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bb4:	d13a      	bne.n	8008c2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	4b1e      	ldr	r3, [pc, #120]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008be0:	2303      	movs	r3, #3
 8008be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008be4:	230a      	movs	r3, #10
 8008be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	4619      	mov	r1, r3
 8008bee:	4812      	ldr	r0, [pc, #72]	@ (8008c38 <HAL_PCD_MspInit+0xa4>)
 8008bf0:	f7f8 fbb0 	bl	8001354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfe:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c08:	4a0a      	ldr	r2, [pc, #40]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c10:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <HAL_PCD_MspInit+0xa0>)
 8008c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2100      	movs	r1, #0
 8008c20:	2043      	movs	r0, #67	@ 0x43
 8008c22:	f7f8 fb60 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c26:	2043      	movs	r0, #67	@ 0x43
 8008c28:	f7f8 fb79 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	3728      	adds	r7, #40	@ 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	40023800 	.word	0x40023800
 8008c38:	40020000 	.word	0x40020000

08008c3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fb86 	bl	8007364 <USBD_LL_SetupStage>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f7fe fbc0 	bl	800740e <USBD_LL_DataOutStage>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3320      	adds	r3, #32
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f7fe fc62 	bl	8007586 <USBD_LL_DataInStage>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe fda6 	bl	800782a <USBD_LL_SOF>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	79db      	ldrb	r3, [r3, #7]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d001      	beq.n	8008cfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008cfa:	f7f7 ff93 	bl	8000c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d04:	7bfa      	ldrb	r2, [r7, #15]
 8008d06:	4611      	mov	r1, r2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fd4a 	bl	80077a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fcf1 	bl	80076fc <USBD_LL_Reset>
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe fd45 	bl	80077c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	6812      	ldr	r2, [r2, #0]
 8008d46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7adb      	ldrb	r3, [r3, #11]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d58:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <HAL_PCD_SuspendCallback+0x48>)
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	4a03      	ldr	r2, [pc, #12]	@ (8008d6c <HAL_PCD_SuspendCallback+0x48>)
 8008d5e:	f043 0306 	orr.w	r3, r3, #6
 8008d62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	e000ed00 	.word	0xe000ed00

08008d70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fd3b 	bl	80077fa <USBD_LL_Resume>
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fd93 	bl	80078ce <USBD_LL_IsoOUTIncomplete>
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fd4f 	bl	800786a <USBD_LL_IsoINIncomplete>
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fda5 	bl	8007932 <USBD_LL_DevConnected>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fda2 	bl	8007948 <USBD_LL_DevDisconnected>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d13c      	bne.n	8008e96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e1c:	4a20      	ldr	r2, [pc, #128]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e36:	2204      	movs	r2, #4
 8008e38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e3a:	4b19      	ldr	r3, [pc, #100]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e40:	4b17      	ldr	r3, [pc, #92]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e46:	4b16      	ldr	r3, [pc, #88]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e48:	2202      	movs	r2, #2
 8008e4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e52:	4b13      	ldr	r3, [pc, #76]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e58:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e6a:	480d      	ldr	r0, [pc, #52]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e6c:	f7f8 fbf6 	bl	800165c <HAL_PCD_Init>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e76:	f7f7 fed5 	bl	8000c24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e7a:	2180      	movs	r1, #128	@ 0x80
 8008e7c:	4808      	ldr	r0, [pc, #32]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e7e:	f7f9 fe50 	bl	8002b22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e82:	2240      	movs	r2, #64	@ 0x40
 8008e84:	2100      	movs	r1, #0
 8008e86:	4806      	ldr	r0, [pc, #24]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e88:	f7f9 fe04 	bl	8002a94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e8c:	2280      	movs	r2, #128	@ 0x80
 8008e8e:	2101      	movs	r1, #1
 8008e90:	4803      	ldr	r0, [pc, #12]	@ (8008ea0 <USBD_LL_Init+0x94>)
 8008e92:	f7f9 fdff 	bl	8002a94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20018e84 	.word	0x20018e84

08008ea4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7f8 fcdd 	bl	800187a <HAL_PCD_Start>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f962 	bl	8009190 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	4603      	mov	r3, r0
 8008eea:	70fb      	strb	r3, [r7, #3]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70bb      	strb	r3, [r7, #2]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f02:	78bb      	ldrb	r3, [r7, #2]
 8008f04:	883a      	ldrh	r2, [r7, #0]
 8008f06:	78f9      	ldrb	r1, [r7, #3]
 8008f08:	f7f9 f9b1 	bl	800226e <HAL_PCD_EP_Open>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f93c 	bl	8009190 <USBD_Get_USB_Status>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f9 f9fc 	bl	8002342 <HAL_PCD_EP_Close>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f91d 	bl	8009190 <USBD_Get_USB_Status>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f7e:	78fa      	ldrb	r2, [r7, #3]
 8008f80:	4611      	mov	r1, r2
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f9 fb9e 	bl	80026c4 <HAL_PCD_EP_Flush>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f8fe 	bl	8009190 <USBD_Get_USB_Status>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fbc:	78fa      	ldrb	r2, [r7, #3]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f9 fa95 	bl	80024f0 <HAL_PCD_EP_SetStall>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f8df 	bl	8009190 <USBD_Get_USB_Status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f9 fad9 	bl	80025b6 <HAL_PCD_EP_ClrStall>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f8c0 	bl	8009190 <USBD_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009030:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009036:	2b00      	cmp	r3, #0
 8009038:	da0b      	bge.n	8009052 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009040:	68f9      	ldr	r1, [r7, #12]
 8009042:	4613      	mov	r3, r2
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	3316      	adds	r3, #22
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	e00b      	b.n	800906a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009052:	78fb      	ldrb	r3, [r7, #3]
 8009054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009058:	68f9      	ldr	r1, [r7, #12]
 800905a:	4613      	mov	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	440b      	add	r3, r1
 8009064:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009068:	781b      	ldrb	r3, [r3, #0]
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	460b      	mov	r3, r1
 8009080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009090:	78fa      	ldrb	r2, [r7, #3]
 8009092:	4611      	mov	r1, r2
 8009094:	4618      	mov	r0, r3
 8009096:	f7f9 f8c6 	bl	8002226 <HAL_PCD_SetAddress>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f875 	bl	8009190 <USBD_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090d2:	7af9      	ldrb	r1, [r7, #11]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	f7f9 f9d0 	bl	800247c <HAL_PCD_EP_Transmit>
 80090dc:	4603      	mov	r3, r0
 80090de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090e0:	7dfb      	ldrb	r3, [r7, #23]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f854 	bl	8009190 <USBD_Get_USB_Status>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	460b      	mov	r3, r1
 8009104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009114:	7af9      	ldrb	r1, [r7, #11]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	f7f9 f95c 	bl	80023d6 <HAL_PCD_EP_Receive>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	4618      	mov	r0, r3
 8009126:	f000 f833 	bl	8009190 <USBD_Get_USB_Status>
 800912a:	4603      	mov	r3, r0
 800912c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800912e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7f9 f97c 	bl	800244c <HAL_PCD_EP_GetRxCount>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009168:	4b03      	ldr	r3, [pc, #12]	@ (8009178 <USBD_static_malloc+0x18>)
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	20019368 	.word	0x20019368

0800917c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800919e:	79fb      	ldrb	r3, [r7, #7]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d817      	bhi.n	80091d4 <USBD_Get_USB_Status+0x44>
 80091a4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ac <USBD_Get_USB_Status+0x1c>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091c3 	.word	0x080091c3
 80091b4:	080091c9 	.word	0x080091c9
 80091b8:	080091cf 	.word	0x080091cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
    break;
 80091c0:	e00b      	b.n	80091da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091c2:	2303      	movs	r3, #3
 80091c4:	73fb      	strb	r3, [r7, #15]
    break;
 80091c6:	e008      	b.n	80091da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091c8:	2301      	movs	r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]
    break;
 80091cc:	e005      	b.n	80091da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ce:	2303      	movs	r3, #3
 80091d0:	73fb      	strb	r3, [r7, #15]
    break;
 80091d2:	e002      	b.n	80091da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091d4:	2303      	movs	r3, #3
 80091d6:	73fb      	strb	r3, [r7, #15]
    break;
 80091d8:	bf00      	nop
  }
  return usb_status;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <std>:
 80091e8:	2300      	movs	r3, #0
 80091ea:	b510      	push	{r4, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	e9c0 3300 	strd	r3, r3, [r0]
 80091f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091f6:	6083      	str	r3, [r0, #8]
 80091f8:	8181      	strh	r1, [r0, #12]
 80091fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80091fc:	81c2      	strh	r2, [r0, #14]
 80091fe:	6183      	str	r3, [r0, #24]
 8009200:	4619      	mov	r1, r3
 8009202:	2208      	movs	r2, #8
 8009204:	305c      	adds	r0, #92	@ 0x5c
 8009206:	f000 f9f9 	bl	80095fc <memset>
 800920a:	4b0d      	ldr	r3, [pc, #52]	@ (8009240 <std+0x58>)
 800920c:	6263      	str	r3, [r4, #36]	@ 0x24
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <std+0x5c>)
 8009210:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009212:	4b0d      	ldr	r3, [pc, #52]	@ (8009248 <std+0x60>)
 8009214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009216:	4b0d      	ldr	r3, [pc, #52]	@ (800924c <std+0x64>)
 8009218:	6323      	str	r3, [r4, #48]	@ 0x30
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <std+0x68>)
 800921c:	6224      	str	r4, [r4, #32]
 800921e:	429c      	cmp	r4, r3
 8009220:	d006      	beq.n	8009230 <std+0x48>
 8009222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009226:	4294      	cmp	r4, r2
 8009228:	d002      	beq.n	8009230 <std+0x48>
 800922a:	33d0      	adds	r3, #208	@ 0xd0
 800922c:	429c      	cmp	r4, r3
 800922e:	d105      	bne.n	800923c <std+0x54>
 8009230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009238:	f000 ba58 	b.w	80096ec <__retarget_lock_init_recursive>
 800923c:	bd10      	pop	{r4, pc}
 800923e:	bf00      	nop
 8009240:	0800944d 	.word	0x0800944d
 8009244:	0800946f 	.word	0x0800946f
 8009248:	080094a7 	.word	0x080094a7
 800924c:	080094cb 	.word	0x080094cb
 8009250:	200195f0 	.word	0x200195f0

08009254 <stdio_exit_handler>:
 8009254:	4a02      	ldr	r2, [pc, #8]	@ (8009260 <stdio_exit_handler+0xc>)
 8009256:	4903      	ldr	r1, [pc, #12]	@ (8009264 <stdio_exit_handler+0x10>)
 8009258:	4803      	ldr	r0, [pc, #12]	@ (8009268 <stdio_exit_handler+0x14>)
 800925a:	f000 b869 	b.w	8009330 <_fwalk_sglue>
 800925e:	bf00      	nop
 8009260:	200000fc 	.word	0x200000fc
 8009264:	08009fa5 	.word	0x08009fa5
 8009268:	2000010c 	.word	0x2000010c

0800926c <cleanup_stdio>:
 800926c:	6841      	ldr	r1, [r0, #4]
 800926e:	4b0c      	ldr	r3, [pc, #48]	@ (80092a0 <cleanup_stdio+0x34>)
 8009270:	4299      	cmp	r1, r3
 8009272:	b510      	push	{r4, lr}
 8009274:	4604      	mov	r4, r0
 8009276:	d001      	beq.n	800927c <cleanup_stdio+0x10>
 8009278:	f000 fe94 	bl	8009fa4 <_fflush_r>
 800927c:	68a1      	ldr	r1, [r4, #8]
 800927e:	4b09      	ldr	r3, [pc, #36]	@ (80092a4 <cleanup_stdio+0x38>)
 8009280:	4299      	cmp	r1, r3
 8009282:	d002      	beq.n	800928a <cleanup_stdio+0x1e>
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fe8d 	bl	8009fa4 <_fflush_r>
 800928a:	68e1      	ldr	r1, [r4, #12]
 800928c:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <cleanup_stdio+0x3c>)
 800928e:	4299      	cmp	r1, r3
 8009290:	d004      	beq.n	800929c <cleanup_stdio+0x30>
 8009292:	4620      	mov	r0, r4
 8009294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009298:	f000 be84 	b.w	8009fa4 <_fflush_r>
 800929c:	bd10      	pop	{r4, pc}
 800929e:	bf00      	nop
 80092a0:	200195f0 	.word	0x200195f0
 80092a4:	20019658 	.word	0x20019658
 80092a8:	200196c0 	.word	0x200196c0

080092ac <global_stdio_init.part.0>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <global_stdio_init.part.0+0x30>)
 80092b0:	4c0b      	ldr	r4, [pc, #44]	@ (80092e0 <global_stdio_init.part.0+0x34>)
 80092b2:	4a0c      	ldr	r2, [pc, #48]	@ (80092e4 <global_stdio_init.part.0+0x38>)
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	4620      	mov	r0, r4
 80092b8:	2200      	movs	r2, #0
 80092ba:	2104      	movs	r1, #4
 80092bc:	f7ff ff94 	bl	80091e8 <std>
 80092c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092c4:	2201      	movs	r2, #1
 80092c6:	2109      	movs	r1, #9
 80092c8:	f7ff ff8e 	bl	80091e8 <std>
 80092cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092d0:	2202      	movs	r2, #2
 80092d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d6:	2112      	movs	r1, #18
 80092d8:	f7ff bf86 	b.w	80091e8 <std>
 80092dc:	20019728 	.word	0x20019728
 80092e0:	200195f0 	.word	0x200195f0
 80092e4:	08009255 	.word	0x08009255

080092e8 <__sfp_lock_acquire>:
 80092e8:	4801      	ldr	r0, [pc, #4]	@ (80092f0 <__sfp_lock_acquire+0x8>)
 80092ea:	f000 ba00 	b.w	80096ee <__retarget_lock_acquire_recursive>
 80092ee:	bf00      	nop
 80092f0:	20019731 	.word	0x20019731

080092f4 <__sfp_lock_release>:
 80092f4:	4801      	ldr	r0, [pc, #4]	@ (80092fc <__sfp_lock_release+0x8>)
 80092f6:	f000 b9fb 	b.w	80096f0 <__retarget_lock_release_recursive>
 80092fa:	bf00      	nop
 80092fc:	20019731 	.word	0x20019731

08009300 <__sinit>:
 8009300:	b510      	push	{r4, lr}
 8009302:	4604      	mov	r4, r0
 8009304:	f7ff fff0 	bl	80092e8 <__sfp_lock_acquire>
 8009308:	6a23      	ldr	r3, [r4, #32]
 800930a:	b11b      	cbz	r3, 8009314 <__sinit+0x14>
 800930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009310:	f7ff bff0 	b.w	80092f4 <__sfp_lock_release>
 8009314:	4b04      	ldr	r3, [pc, #16]	@ (8009328 <__sinit+0x28>)
 8009316:	6223      	str	r3, [r4, #32]
 8009318:	4b04      	ldr	r3, [pc, #16]	@ (800932c <__sinit+0x2c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f5      	bne.n	800930c <__sinit+0xc>
 8009320:	f7ff ffc4 	bl	80092ac <global_stdio_init.part.0>
 8009324:	e7f2      	b.n	800930c <__sinit+0xc>
 8009326:	bf00      	nop
 8009328:	0800926d 	.word	0x0800926d
 800932c:	20019728 	.word	0x20019728

08009330 <_fwalk_sglue>:
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	4607      	mov	r7, r0
 8009336:	4688      	mov	r8, r1
 8009338:	4614      	mov	r4, r2
 800933a:	2600      	movs	r6, #0
 800933c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009340:	f1b9 0901 	subs.w	r9, r9, #1
 8009344:	d505      	bpl.n	8009352 <_fwalk_sglue+0x22>
 8009346:	6824      	ldr	r4, [r4, #0]
 8009348:	2c00      	cmp	r4, #0
 800934a:	d1f7      	bne.n	800933c <_fwalk_sglue+0xc>
 800934c:	4630      	mov	r0, r6
 800934e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d907      	bls.n	8009368 <_fwalk_sglue+0x38>
 8009358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800935c:	3301      	adds	r3, #1
 800935e:	d003      	beq.n	8009368 <_fwalk_sglue+0x38>
 8009360:	4629      	mov	r1, r5
 8009362:	4638      	mov	r0, r7
 8009364:	47c0      	blx	r8
 8009366:	4306      	orrs	r6, r0
 8009368:	3568      	adds	r5, #104	@ 0x68
 800936a:	e7e9      	b.n	8009340 <_fwalk_sglue+0x10>

0800936c <iprintf>:
 800936c:	b40f      	push	{r0, r1, r2, r3}
 800936e:	b507      	push	{r0, r1, r2, lr}
 8009370:	4906      	ldr	r1, [pc, #24]	@ (800938c <iprintf+0x20>)
 8009372:	ab04      	add	r3, sp, #16
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	f853 2b04 	ldr.w	r2, [r3], #4
 800937a:	6881      	ldr	r1, [r0, #8]
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f000 fae9 	bl	8009954 <_vfiprintf_r>
 8009382:	b003      	add	sp, #12
 8009384:	f85d eb04 	ldr.w	lr, [sp], #4
 8009388:	b004      	add	sp, #16
 800938a:	4770      	bx	lr
 800938c:	20000108 	.word	0x20000108

08009390 <_puts_r>:
 8009390:	6a03      	ldr	r3, [r0, #32]
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	6884      	ldr	r4, [r0, #8]
 8009396:	4605      	mov	r5, r0
 8009398:	460e      	mov	r6, r1
 800939a:	b90b      	cbnz	r3, 80093a0 <_puts_r+0x10>
 800939c:	f7ff ffb0 	bl	8009300 <__sinit>
 80093a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093a2:	07db      	lsls	r3, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_puts_r+0x22>
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	0598      	lsls	r0, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_puts_r+0x22>
 80093ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ae:	f000 f99e 	bl	80096ee <__retarget_lock_acquire_recursive>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	0719      	lsls	r1, r3, #28
 80093b6:	d502      	bpl.n	80093be <_puts_r+0x2e>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d135      	bne.n	800942a <_puts_r+0x9a>
 80093be:	4621      	mov	r1, r4
 80093c0:	4628      	mov	r0, r5
 80093c2:	f000 f8c5 	bl	8009550 <__swsetup_r>
 80093c6:	b380      	cbz	r0, 800942a <_puts_r+0x9a>
 80093c8:	f04f 35ff 	mov.w	r5, #4294967295
 80093cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ce:	07da      	lsls	r2, r3, #31
 80093d0:	d405      	bmi.n	80093de <_puts_r+0x4e>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	059b      	lsls	r3, r3, #22
 80093d6:	d402      	bmi.n	80093de <_puts_r+0x4e>
 80093d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093da:	f000 f989 	bl	80096f0 <__retarget_lock_release_recursive>
 80093de:	4628      	mov	r0, r5
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da04      	bge.n	80093f0 <_puts_r+0x60>
 80093e6:	69a2      	ldr	r2, [r4, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	dc17      	bgt.n	800941c <_puts_r+0x8c>
 80093ec:	290a      	cmp	r1, #10
 80093ee:	d015      	beq.n	800941c <_puts_r+0x8c>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	6022      	str	r2, [r4, #0]
 80093f6:	7019      	strb	r1, [r3, #0]
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093fe:	3b01      	subs	r3, #1
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	2900      	cmp	r1, #0
 8009404:	d1ed      	bne.n	80093e2 <_puts_r+0x52>
 8009406:	2b00      	cmp	r3, #0
 8009408:	da11      	bge.n	800942e <_puts_r+0x9e>
 800940a:	4622      	mov	r2, r4
 800940c:	210a      	movs	r1, #10
 800940e:	4628      	mov	r0, r5
 8009410:	f000 f85f 	bl	80094d2 <__swbuf_r>
 8009414:	3001      	adds	r0, #1
 8009416:	d0d7      	beq.n	80093c8 <_puts_r+0x38>
 8009418:	250a      	movs	r5, #10
 800941a:	e7d7      	b.n	80093cc <_puts_r+0x3c>
 800941c:	4622      	mov	r2, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f857 	bl	80094d2 <__swbuf_r>
 8009424:	3001      	adds	r0, #1
 8009426:	d1e7      	bne.n	80093f8 <_puts_r+0x68>
 8009428:	e7ce      	b.n	80093c8 <_puts_r+0x38>
 800942a:	3e01      	subs	r6, #1
 800942c:	e7e4      	b.n	80093f8 <_puts_r+0x68>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	220a      	movs	r2, #10
 8009436:	701a      	strb	r2, [r3, #0]
 8009438:	e7ee      	b.n	8009418 <_puts_r+0x88>
	...

0800943c <puts>:
 800943c:	4b02      	ldr	r3, [pc, #8]	@ (8009448 <puts+0xc>)
 800943e:	4601      	mov	r1, r0
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	f7ff bfa5 	b.w	8009390 <_puts_r>
 8009446:	bf00      	nop
 8009448:	20000108 	.word	0x20000108

0800944c <__sread>:
 800944c:	b510      	push	{r4, lr}
 800944e:	460c      	mov	r4, r1
 8009450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009454:	f000 f8fc 	bl	8009650 <_read_r>
 8009458:	2800      	cmp	r0, #0
 800945a:	bfab      	itete	ge
 800945c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800945e:	89a3      	ldrhlt	r3, [r4, #12]
 8009460:	181b      	addge	r3, r3, r0
 8009462:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009466:	bfac      	ite	ge
 8009468:	6563      	strge	r3, [r4, #84]	@ 0x54
 800946a:	81a3      	strhlt	r3, [r4, #12]
 800946c:	bd10      	pop	{r4, pc}

0800946e <__swrite>:
 800946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009472:	461f      	mov	r7, r3
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	05db      	lsls	r3, r3, #23
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	4616      	mov	r6, r2
 800947e:	d505      	bpl.n	800948c <__swrite+0x1e>
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	2302      	movs	r3, #2
 8009486:	2200      	movs	r2, #0
 8009488:	f000 f8d0 	bl	800962c <_lseek_r>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009496:	81a3      	strh	r3, [r4, #12]
 8009498:	4632      	mov	r2, r6
 800949a:	463b      	mov	r3, r7
 800949c:	4628      	mov	r0, r5
 800949e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	f000 b8e7 	b.w	8009674 <_write_r>

080094a6 <__sseek>:
 80094a6:	b510      	push	{r4, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ae:	f000 f8bd 	bl	800962c <_lseek_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	bf15      	itete	ne
 80094b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094c2:	81a3      	strheq	r3, [r4, #12]
 80094c4:	bf18      	it	ne
 80094c6:	81a3      	strhne	r3, [r4, #12]
 80094c8:	bd10      	pop	{r4, pc}

080094ca <__sclose>:
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	f000 b89d 	b.w	800960c <_close_r>

080094d2 <__swbuf_r>:
 80094d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d4:	460e      	mov	r6, r1
 80094d6:	4614      	mov	r4, r2
 80094d8:	4605      	mov	r5, r0
 80094da:	b118      	cbz	r0, 80094e4 <__swbuf_r+0x12>
 80094dc:	6a03      	ldr	r3, [r0, #32]
 80094de:	b90b      	cbnz	r3, 80094e4 <__swbuf_r+0x12>
 80094e0:	f7ff ff0e 	bl	8009300 <__sinit>
 80094e4:	69a3      	ldr	r3, [r4, #24]
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	071a      	lsls	r2, r3, #28
 80094ec:	d501      	bpl.n	80094f2 <__swbuf_r+0x20>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	b943      	cbnz	r3, 8009504 <__swbuf_r+0x32>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f82b 	bl	8009550 <__swsetup_r>
 80094fa:	b118      	cbz	r0, 8009504 <__swbuf_r+0x32>
 80094fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009500:	4638      	mov	r0, r7
 8009502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	6922      	ldr	r2, [r4, #16]
 8009508:	1a98      	subs	r0, r3, r2
 800950a:	6963      	ldr	r3, [r4, #20]
 800950c:	b2f6      	uxtb	r6, r6
 800950e:	4283      	cmp	r3, r0
 8009510:	4637      	mov	r7, r6
 8009512:	dc05      	bgt.n	8009520 <__swbuf_r+0x4e>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f000 fd44 	bl	8009fa4 <_fflush_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	d1ed      	bne.n	80094fc <__swbuf_r+0x2a>
 8009520:	68a3      	ldr	r3, [r4, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	6022      	str	r2, [r4, #0]
 800952c:	701e      	strb	r6, [r3, #0]
 800952e:	6962      	ldr	r2, [r4, #20]
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	429a      	cmp	r2, r3
 8009534:	d004      	beq.n	8009540 <__swbuf_r+0x6e>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	07db      	lsls	r3, r3, #31
 800953a:	d5e1      	bpl.n	8009500 <__swbuf_r+0x2e>
 800953c:	2e0a      	cmp	r6, #10
 800953e:	d1df      	bne.n	8009500 <__swbuf_r+0x2e>
 8009540:	4621      	mov	r1, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f000 fd2e 	bl	8009fa4 <_fflush_r>
 8009548:	2800      	cmp	r0, #0
 800954a:	d0d9      	beq.n	8009500 <__swbuf_r+0x2e>
 800954c:	e7d6      	b.n	80094fc <__swbuf_r+0x2a>
	...

08009550 <__swsetup_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4b29      	ldr	r3, [pc, #164]	@ (80095f8 <__swsetup_r+0xa8>)
 8009554:	4605      	mov	r5, r0
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	460c      	mov	r4, r1
 800955a:	b118      	cbz	r0, 8009564 <__swsetup_r+0x14>
 800955c:	6a03      	ldr	r3, [r0, #32]
 800955e:	b90b      	cbnz	r3, 8009564 <__swsetup_r+0x14>
 8009560:	f7ff fece 	bl	8009300 <__sinit>
 8009564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009568:	0719      	lsls	r1, r3, #28
 800956a:	d422      	bmi.n	80095b2 <__swsetup_r+0x62>
 800956c:	06da      	lsls	r2, r3, #27
 800956e:	d407      	bmi.n	8009580 <__swsetup_r+0x30>
 8009570:	2209      	movs	r2, #9
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	e033      	b.n	80095e8 <__swsetup_r+0x98>
 8009580:	0758      	lsls	r0, r3, #29
 8009582:	d512      	bpl.n	80095aa <__swsetup_r+0x5a>
 8009584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009586:	b141      	cbz	r1, 800959a <__swsetup_r+0x4a>
 8009588:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800958c:	4299      	cmp	r1, r3
 800958e:	d002      	beq.n	8009596 <__swsetup_r+0x46>
 8009590:	4628      	mov	r0, r5
 8009592:	f000 f8bd 	bl	8009710 <_free_r>
 8009596:	2300      	movs	r3, #0
 8009598:	6363      	str	r3, [r4, #52]	@ 0x34
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	2300      	movs	r3, #0
 80095a4:	6063      	str	r3, [r4, #4]
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	f043 0308 	orr.w	r3, r3, #8
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	6923      	ldr	r3, [r4, #16]
 80095b4:	b94b      	cbnz	r3, 80095ca <__swsetup_r+0x7a>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095c0:	d003      	beq.n	80095ca <__swsetup_r+0x7a>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 fd3b 	bl	800a040 <__smakebuf_r>
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	f013 0201 	ands.w	r2, r3, #1
 80095d2:	d00a      	beq.n	80095ea <__swsetup_r+0x9a>
 80095d4:	2200      	movs	r2, #0
 80095d6:	60a2      	str	r2, [r4, #8]
 80095d8:	6962      	ldr	r2, [r4, #20]
 80095da:	4252      	negs	r2, r2
 80095dc:	61a2      	str	r2, [r4, #24]
 80095de:	6922      	ldr	r2, [r4, #16]
 80095e0:	b942      	cbnz	r2, 80095f4 <__swsetup_r+0xa4>
 80095e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095e6:	d1c5      	bne.n	8009574 <__swsetup_r+0x24>
 80095e8:	bd38      	pop	{r3, r4, r5, pc}
 80095ea:	0799      	lsls	r1, r3, #30
 80095ec:	bf58      	it	pl
 80095ee:	6962      	ldrpl	r2, [r4, #20]
 80095f0:	60a2      	str	r2, [r4, #8]
 80095f2:	e7f4      	b.n	80095de <__swsetup_r+0x8e>
 80095f4:	2000      	movs	r0, #0
 80095f6:	e7f7      	b.n	80095e8 <__swsetup_r+0x98>
 80095f8:	20000108 	.word	0x20000108

080095fc <memset>:
 80095fc:	4402      	add	r2, r0
 80095fe:	4603      	mov	r3, r0
 8009600:	4293      	cmp	r3, r2
 8009602:	d100      	bne.n	8009606 <memset+0xa>
 8009604:	4770      	bx	lr
 8009606:	f803 1b01 	strb.w	r1, [r3], #1
 800960a:	e7f9      	b.n	8009600 <memset+0x4>

0800960c <_close_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d06      	ldr	r5, [pc, #24]	@ (8009628 <_close_r+0x1c>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f7 fbdb 	bl	8000dd2 <_close>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_close_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_close_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	2001972c 	.word	0x2001972c

0800962c <_lseek_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	@ (800964c <_lseek_r+0x20>)
 8009630:	4604      	mov	r4, r0
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	2200      	movs	r2, #0
 8009638:	602a      	str	r2, [r5, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f7f7 fbf0 	bl	8000e20 <_lseek>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_lseek_r+0x1e>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_lseek_r+0x1e>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	2001972c 	.word	0x2001972c

08009650 <_read_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	@ (8009670 <_read_r+0x20>)
 8009654:	4604      	mov	r4, r0
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	2200      	movs	r2, #0
 800965c:	602a      	str	r2, [r5, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f7f7 fb7e 	bl	8000d60 <_read>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_read_r+0x1e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_read_r+0x1e>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	2001972c 	.word	0x2001972c

08009674 <_write_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	@ (8009694 <_write_r+0x20>)
 8009678:	4604      	mov	r4, r0
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	2200      	movs	r2, #0
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	f7f7 fb89 	bl	8000d9a <_write>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_write_r+0x1e>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_write_r+0x1e>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	2001972c 	.word	0x2001972c

08009698 <__errno>:
 8009698:	4b01      	ldr	r3, [pc, #4]	@ (80096a0 <__errno+0x8>)
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	20000108 	.word	0x20000108

080096a4 <__libc_init_array>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4d0d      	ldr	r5, [pc, #52]	@ (80096dc <__libc_init_array+0x38>)
 80096a8:	4c0d      	ldr	r4, [pc, #52]	@ (80096e0 <__libc_init_array+0x3c>)
 80096aa:	1b64      	subs	r4, r4, r5
 80096ac:	10a4      	asrs	r4, r4, #2
 80096ae:	2600      	movs	r6, #0
 80096b0:	42a6      	cmp	r6, r4
 80096b2:	d109      	bne.n	80096c8 <__libc_init_array+0x24>
 80096b4:	4d0b      	ldr	r5, [pc, #44]	@ (80096e4 <__libc_init_array+0x40>)
 80096b6:	4c0c      	ldr	r4, [pc, #48]	@ (80096e8 <__libc_init_array+0x44>)
 80096b8:	f000 fd30 	bl	800a11c <_init>
 80096bc:	1b64      	subs	r4, r4, r5
 80096be:	10a4      	asrs	r4, r4, #2
 80096c0:	2600      	movs	r6, #0
 80096c2:	42a6      	cmp	r6, r4
 80096c4:	d105      	bne.n	80096d2 <__libc_init_array+0x2e>
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096cc:	4798      	blx	r3
 80096ce:	3601      	adds	r6, #1
 80096d0:	e7ee      	b.n	80096b0 <__libc_init_array+0xc>
 80096d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d6:	4798      	blx	r3
 80096d8:	3601      	adds	r6, #1
 80096da:	e7f2      	b.n	80096c2 <__libc_init_array+0x1e>
 80096dc:	0800a3f8 	.word	0x0800a3f8
 80096e0:	0800a3f8 	.word	0x0800a3f8
 80096e4:	0800a3f8 	.word	0x0800a3f8
 80096e8:	0800a3fc 	.word	0x0800a3fc

080096ec <__retarget_lock_init_recursive>:
 80096ec:	4770      	bx	lr

080096ee <__retarget_lock_acquire_recursive>:
 80096ee:	4770      	bx	lr

080096f0 <__retarget_lock_release_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <memcpy>:
 80096f2:	440a      	add	r2, r1
 80096f4:	4291      	cmp	r1, r2
 80096f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80096fa:	d100      	bne.n	80096fe <memcpy+0xc>
 80096fc:	4770      	bx	lr
 80096fe:	b510      	push	{r4, lr}
 8009700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009708:	4291      	cmp	r1, r2
 800970a:	d1f9      	bne.n	8009700 <memcpy+0xe>
 800970c:	bd10      	pop	{r4, pc}
	...

08009710 <_free_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4605      	mov	r5, r0
 8009714:	2900      	cmp	r1, #0
 8009716:	d041      	beq.n	800979c <_free_r+0x8c>
 8009718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800971c:	1f0c      	subs	r4, r1, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfb8      	it	lt
 8009722:	18e4      	addlt	r4, r4, r3
 8009724:	f000 f8e0 	bl	80098e8 <__malloc_lock>
 8009728:	4a1d      	ldr	r2, [pc, #116]	@ (80097a0 <_free_r+0x90>)
 800972a:	6813      	ldr	r3, [r2, #0]
 800972c:	b933      	cbnz	r3, 800973c <_free_r+0x2c>
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	6014      	str	r4, [r2, #0]
 8009732:	4628      	mov	r0, r5
 8009734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009738:	f000 b8dc 	b.w	80098f4 <__malloc_unlock>
 800973c:	42a3      	cmp	r3, r4
 800973e:	d908      	bls.n	8009752 <_free_r+0x42>
 8009740:	6820      	ldr	r0, [r4, #0]
 8009742:	1821      	adds	r1, r4, r0
 8009744:	428b      	cmp	r3, r1
 8009746:	bf01      	itttt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	1809      	addeq	r1, r1, r0
 800974e:	6021      	streq	r1, [r4, #0]
 8009750:	e7ed      	b.n	800972e <_free_r+0x1e>
 8009752:	461a      	mov	r2, r3
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	b10b      	cbz	r3, 800975c <_free_r+0x4c>
 8009758:	42a3      	cmp	r3, r4
 800975a:	d9fa      	bls.n	8009752 <_free_r+0x42>
 800975c:	6811      	ldr	r1, [r2, #0]
 800975e:	1850      	adds	r0, r2, r1
 8009760:	42a0      	cmp	r0, r4
 8009762:	d10b      	bne.n	800977c <_free_r+0x6c>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	4401      	add	r1, r0
 8009768:	1850      	adds	r0, r2, r1
 800976a:	4283      	cmp	r3, r0
 800976c:	6011      	str	r1, [r2, #0]
 800976e:	d1e0      	bne.n	8009732 <_free_r+0x22>
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	6053      	str	r3, [r2, #4]
 8009776:	4408      	add	r0, r1
 8009778:	6010      	str	r0, [r2, #0]
 800977a:	e7da      	b.n	8009732 <_free_r+0x22>
 800977c:	d902      	bls.n	8009784 <_free_r+0x74>
 800977e:	230c      	movs	r3, #12
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	e7d6      	b.n	8009732 <_free_r+0x22>
 8009784:	6820      	ldr	r0, [r4, #0]
 8009786:	1821      	adds	r1, r4, r0
 8009788:	428b      	cmp	r3, r1
 800978a:	bf04      	itt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	6063      	str	r3, [r4, #4]
 8009792:	bf04      	itt	eq
 8009794:	1809      	addeq	r1, r1, r0
 8009796:	6021      	streq	r1, [r4, #0]
 8009798:	6054      	str	r4, [r2, #4]
 800979a:	e7ca      	b.n	8009732 <_free_r+0x22>
 800979c:	bd38      	pop	{r3, r4, r5, pc}
 800979e:	bf00      	nop
 80097a0:	20019738 	.word	0x20019738

080097a4 <sbrk_aligned>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	4e0f      	ldr	r6, [pc, #60]	@ (80097e4 <sbrk_aligned+0x40>)
 80097a8:	460c      	mov	r4, r1
 80097aa:	6831      	ldr	r1, [r6, #0]
 80097ac:	4605      	mov	r5, r0
 80097ae:	b911      	cbnz	r1, 80097b6 <sbrk_aligned+0x12>
 80097b0:	f000 fca4 	bl	800a0fc <_sbrk_r>
 80097b4:	6030      	str	r0, [r6, #0]
 80097b6:	4621      	mov	r1, r4
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 fc9f 	bl	800a0fc <_sbrk_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d103      	bne.n	80097ca <sbrk_aligned+0x26>
 80097c2:	f04f 34ff 	mov.w	r4, #4294967295
 80097c6:	4620      	mov	r0, r4
 80097c8:	bd70      	pop	{r4, r5, r6, pc}
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d0f8      	beq.n	80097c6 <sbrk_aligned+0x22>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 fc90 	bl	800a0fc <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d1f2      	bne.n	80097c6 <sbrk_aligned+0x22>
 80097e0:	e7ef      	b.n	80097c2 <sbrk_aligned+0x1e>
 80097e2:	bf00      	nop
 80097e4:	20019734 	.word	0x20019734

080097e8 <_malloc_r>:
 80097e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ec:	1ccd      	adds	r5, r1, #3
 80097ee:	f025 0503 	bic.w	r5, r5, #3
 80097f2:	3508      	adds	r5, #8
 80097f4:	2d0c      	cmp	r5, #12
 80097f6:	bf38      	it	cc
 80097f8:	250c      	movcc	r5, #12
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	4606      	mov	r6, r0
 80097fe:	db01      	blt.n	8009804 <_malloc_r+0x1c>
 8009800:	42a9      	cmp	r1, r5
 8009802:	d904      	bls.n	800980e <_malloc_r+0x26>
 8009804:	230c      	movs	r3, #12
 8009806:	6033      	str	r3, [r6, #0]
 8009808:	2000      	movs	r0, #0
 800980a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098e4 <_malloc_r+0xfc>
 8009812:	f000 f869 	bl	80098e8 <__malloc_lock>
 8009816:	f8d8 3000 	ldr.w	r3, [r8]
 800981a:	461c      	mov	r4, r3
 800981c:	bb44      	cbnz	r4, 8009870 <_malloc_r+0x88>
 800981e:	4629      	mov	r1, r5
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff ffbf 	bl	80097a4 <sbrk_aligned>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	4604      	mov	r4, r0
 800982a:	d158      	bne.n	80098de <_malloc_r+0xf6>
 800982c:	f8d8 4000 	ldr.w	r4, [r8]
 8009830:	4627      	mov	r7, r4
 8009832:	2f00      	cmp	r7, #0
 8009834:	d143      	bne.n	80098be <_malloc_r+0xd6>
 8009836:	2c00      	cmp	r4, #0
 8009838:	d04b      	beq.n	80098d2 <_malloc_r+0xea>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	4639      	mov	r1, r7
 800983e:	4630      	mov	r0, r6
 8009840:	eb04 0903 	add.w	r9, r4, r3
 8009844:	f000 fc5a 	bl	800a0fc <_sbrk_r>
 8009848:	4581      	cmp	r9, r0
 800984a:	d142      	bne.n	80098d2 <_malloc_r+0xea>
 800984c:	6821      	ldr	r1, [r4, #0]
 800984e:	1a6d      	subs	r5, r5, r1
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ffa6 	bl	80097a4 <sbrk_aligned>
 8009858:	3001      	adds	r0, #1
 800985a:	d03a      	beq.n	80098d2 <_malloc_r+0xea>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	442b      	add	r3, r5
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	f8d8 3000 	ldr.w	r3, [r8]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	bb62      	cbnz	r2, 80098c4 <_malloc_r+0xdc>
 800986a:	f8c8 7000 	str.w	r7, [r8]
 800986e:	e00f      	b.n	8009890 <_malloc_r+0xa8>
 8009870:	6822      	ldr	r2, [r4, #0]
 8009872:	1b52      	subs	r2, r2, r5
 8009874:	d420      	bmi.n	80098b8 <_malloc_r+0xd0>
 8009876:	2a0b      	cmp	r2, #11
 8009878:	d917      	bls.n	80098aa <_malloc_r+0xc2>
 800987a:	1961      	adds	r1, r4, r5
 800987c:	42a3      	cmp	r3, r4
 800987e:	6025      	str	r5, [r4, #0]
 8009880:	bf18      	it	ne
 8009882:	6059      	strne	r1, [r3, #4]
 8009884:	6863      	ldr	r3, [r4, #4]
 8009886:	bf08      	it	eq
 8009888:	f8c8 1000 	streq.w	r1, [r8]
 800988c:	5162      	str	r2, [r4, r5]
 800988e:	604b      	str	r3, [r1, #4]
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f82f 	bl	80098f4 <__malloc_unlock>
 8009896:	f104 000b 	add.w	r0, r4, #11
 800989a:	1d23      	adds	r3, r4, #4
 800989c:	f020 0007 	bic.w	r0, r0, #7
 80098a0:	1ac2      	subs	r2, r0, r3
 80098a2:	bf1c      	itt	ne
 80098a4:	1a1b      	subne	r3, r3, r0
 80098a6:	50a3      	strne	r3, [r4, r2]
 80098a8:	e7af      	b.n	800980a <_malloc_r+0x22>
 80098aa:	6862      	ldr	r2, [r4, #4]
 80098ac:	42a3      	cmp	r3, r4
 80098ae:	bf0c      	ite	eq
 80098b0:	f8c8 2000 	streq.w	r2, [r8]
 80098b4:	605a      	strne	r2, [r3, #4]
 80098b6:	e7eb      	b.n	8009890 <_malloc_r+0xa8>
 80098b8:	4623      	mov	r3, r4
 80098ba:	6864      	ldr	r4, [r4, #4]
 80098bc:	e7ae      	b.n	800981c <_malloc_r+0x34>
 80098be:	463c      	mov	r4, r7
 80098c0:	687f      	ldr	r7, [r7, #4]
 80098c2:	e7b6      	b.n	8009832 <_malloc_r+0x4a>
 80098c4:	461a      	mov	r2, r3
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	d1fb      	bne.n	80098c4 <_malloc_r+0xdc>
 80098cc:	2300      	movs	r3, #0
 80098ce:	6053      	str	r3, [r2, #4]
 80098d0:	e7de      	b.n	8009890 <_malloc_r+0xa8>
 80098d2:	230c      	movs	r3, #12
 80098d4:	6033      	str	r3, [r6, #0]
 80098d6:	4630      	mov	r0, r6
 80098d8:	f000 f80c 	bl	80098f4 <__malloc_unlock>
 80098dc:	e794      	b.n	8009808 <_malloc_r+0x20>
 80098de:	6005      	str	r5, [r0, #0]
 80098e0:	e7d6      	b.n	8009890 <_malloc_r+0xa8>
 80098e2:	bf00      	nop
 80098e4:	20019738 	.word	0x20019738

080098e8 <__malloc_lock>:
 80098e8:	4801      	ldr	r0, [pc, #4]	@ (80098f0 <__malloc_lock+0x8>)
 80098ea:	f7ff bf00 	b.w	80096ee <__retarget_lock_acquire_recursive>
 80098ee:	bf00      	nop
 80098f0:	20019730 	.word	0x20019730

080098f4 <__malloc_unlock>:
 80098f4:	4801      	ldr	r0, [pc, #4]	@ (80098fc <__malloc_unlock+0x8>)
 80098f6:	f7ff befb 	b.w	80096f0 <__retarget_lock_release_recursive>
 80098fa:	bf00      	nop
 80098fc:	20019730 	.word	0x20019730

08009900 <__sfputc_r>:
 8009900:	6893      	ldr	r3, [r2, #8]
 8009902:	3b01      	subs	r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	b410      	push	{r4}
 8009908:	6093      	str	r3, [r2, #8]
 800990a:	da08      	bge.n	800991e <__sfputc_r+0x1e>
 800990c:	6994      	ldr	r4, [r2, #24]
 800990e:	42a3      	cmp	r3, r4
 8009910:	db01      	blt.n	8009916 <__sfputc_r+0x16>
 8009912:	290a      	cmp	r1, #10
 8009914:	d103      	bne.n	800991e <__sfputc_r+0x1e>
 8009916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800991a:	f7ff bdda 	b.w	80094d2 <__swbuf_r>
 800991e:	6813      	ldr	r3, [r2, #0]
 8009920:	1c58      	adds	r0, r3, #1
 8009922:	6010      	str	r0, [r2, #0]
 8009924:	7019      	strb	r1, [r3, #0]
 8009926:	4608      	mov	r0, r1
 8009928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800992c:	4770      	bx	lr

0800992e <__sfputs_r>:
 800992e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009930:	4606      	mov	r6, r0
 8009932:	460f      	mov	r7, r1
 8009934:	4614      	mov	r4, r2
 8009936:	18d5      	adds	r5, r2, r3
 8009938:	42ac      	cmp	r4, r5
 800993a:	d101      	bne.n	8009940 <__sfputs_r+0x12>
 800993c:	2000      	movs	r0, #0
 800993e:	e007      	b.n	8009950 <__sfputs_r+0x22>
 8009940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009944:	463a      	mov	r2, r7
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ffda 	bl	8009900 <__sfputc_r>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d1f3      	bne.n	8009938 <__sfputs_r+0xa>
 8009950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009954 <_vfiprintf_r>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	460d      	mov	r5, r1
 800995a:	b09d      	sub	sp, #116	@ 0x74
 800995c:	4614      	mov	r4, r2
 800995e:	4698      	mov	r8, r3
 8009960:	4606      	mov	r6, r0
 8009962:	b118      	cbz	r0, 800996c <_vfiprintf_r+0x18>
 8009964:	6a03      	ldr	r3, [r0, #32]
 8009966:	b90b      	cbnz	r3, 800996c <_vfiprintf_r+0x18>
 8009968:	f7ff fcca 	bl	8009300 <__sinit>
 800996c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800996e:	07d9      	lsls	r1, r3, #31
 8009970:	d405      	bmi.n	800997e <_vfiprintf_r+0x2a>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	059a      	lsls	r2, r3, #22
 8009976:	d402      	bmi.n	800997e <_vfiprintf_r+0x2a>
 8009978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800997a:	f7ff feb8 	bl	80096ee <__retarget_lock_acquire_recursive>
 800997e:	89ab      	ldrh	r3, [r5, #12]
 8009980:	071b      	lsls	r3, r3, #28
 8009982:	d501      	bpl.n	8009988 <_vfiprintf_r+0x34>
 8009984:	692b      	ldr	r3, [r5, #16]
 8009986:	b99b      	cbnz	r3, 80099b0 <_vfiprintf_r+0x5c>
 8009988:	4629      	mov	r1, r5
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff fde0 	bl	8009550 <__swsetup_r>
 8009990:	b170      	cbz	r0, 80099b0 <_vfiprintf_r+0x5c>
 8009992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009994:	07dc      	lsls	r4, r3, #31
 8009996:	d504      	bpl.n	80099a2 <_vfiprintf_r+0x4e>
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	b01d      	add	sp, #116	@ 0x74
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	89ab      	ldrh	r3, [r5, #12]
 80099a4:	0598      	lsls	r0, r3, #22
 80099a6:	d4f7      	bmi.n	8009998 <_vfiprintf_r+0x44>
 80099a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099aa:	f7ff fea1 	bl	80096f0 <__retarget_lock_release_recursive>
 80099ae:	e7f3      	b.n	8009998 <_vfiprintf_r+0x44>
 80099b0:	2300      	movs	r3, #0
 80099b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099b4:	2320      	movs	r3, #32
 80099b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80099be:	2330      	movs	r3, #48	@ 0x30
 80099c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b70 <_vfiprintf_r+0x21c>
 80099c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099c8:	f04f 0901 	mov.w	r9, #1
 80099cc:	4623      	mov	r3, r4
 80099ce:	469a      	mov	sl, r3
 80099d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d4:	b10a      	cbz	r2, 80099da <_vfiprintf_r+0x86>
 80099d6:	2a25      	cmp	r2, #37	@ 0x25
 80099d8:	d1f9      	bne.n	80099ce <_vfiprintf_r+0x7a>
 80099da:	ebba 0b04 	subs.w	fp, sl, r4
 80099de:	d00b      	beq.n	80099f8 <_vfiprintf_r+0xa4>
 80099e0:	465b      	mov	r3, fp
 80099e2:	4622      	mov	r2, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7ff ffa1 	bl	800992e <__sfputs_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	f000 80a7 	beq.w	8009b40 <_vfiprintf_r+0x1ec>
 80099f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099f4:	445a      	add	r2, fp
 80099f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80099f8:	f89a 3000 	ldrb.w	r3, [sl]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 809f 	beq.w	8009b40 <_vfiprintf_r+0x1ec>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a0c:	f10a 0a01 	add.w	sl, sl, #1
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a1a:	4654      	mov	r4, sl
 8009a1c:	2205      	movs	r2, #5
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	4853      	ldr	r0, [pc, #332]	@ (8009b70 <_vfiprintf_r+0x21c>)
 8009a24:	f7f6 fbdc 	bl	80001e0 <memchr>
 8009a28:	9a04      	ldr	r2, [sp, #16]
 8009a2a:	b9d8      	cbnz	r0, 8009a64 <_vfiprintf_r+0x110>
 8009a2c:	06d1      	lsls	r1, r2, #27
 8009a2e:	bf44      	itt	mi
 8009a30:	2320      	movmi	r3, #32
 8009a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a36:	0713      	lsls	r3, r2, #28
 8009a38:	bf44      	itt	mi
 8009a3a:	232b      	movmi	r3, #43	@ 0x2b
 8009a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a40:	f89a 3000 	ldrb.w	r3, [sl]
 8009a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a46:	d015      	beq.n	8009a74 <_vfiprintf_r+0x120>
 8009a48:	9a07      	ldr	r2, [sp, #28]
 8009a4a:	4654      	mov	r4, sl
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f04f 0c0a 	mov.w	ip, #10
 8009a52:	4621      	mov	r1, r4
 8009a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a58:	3b30      	subs	r3, #48	@ 0x30
 8009a5a:	2b09      	cmp	r3, #9
 8009a5c:	d94b      	bls.n	8009af6 <_vfiprintf_r+0x1a2>
 8009a5e:	b1b0      	cbz	r0, 8009a8e <_vfiprintf_r+0x13a>
 8009a60:	9207      	str	r2, [sp, #28]
 8009a62:	e014      	b.n	8009a8e <_vfiprintf_r+0x13a>
 8009a64:	eba0 0308 	sub.w	r3, r0, r8
 8009a68:	fa09 f303 	lsl.w	r3, r9, r3
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	46a2      	mov	sl, r4
 8009a72:	e7d2      	b.n	8009a1a <_vfiprintf_r+0xc6>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	1d19      	adds	r1, r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	9103      	str	r1, [sp, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bfbb      	ittet	lt
 8009a80:	425b      	neglt	r3, r3
 8009a82:	f042 0202 	orrlt.w	r2, r2, #2
 8009a86:	9307      	strge	r3, [sp, #28]
 8009a88:	9307      	strlt	r3, [sp, #28]
 8009a8a:	bfb8      	it	lt
 8009a8c:	9204      	strlt	r2, [sp, #16]
 8009a8e:	7823      	ldrb	r3, [r4, #0]
 8009a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a92:	d10a      	bne.n	8009aaa <_vfiprintf_r+0x156>
 8009a94:	7863      	ldrb	r3, [r4, #1]
 8009a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a98:	d132      	bne.n	8009b00 <_vfiprintf_r+0x1ac>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	1d1a      	adds	r2, r3, #4
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	9203      	str	r2, [sp, #12]
 8009aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aa6:	3402      	adds	r4, #2
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b80 <_vfiprintf_r+0x22c>
 8009aae:	7821      	ldrb	r1, [r4, #0]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	f7f6 fb94 	bl	80001e0 <memchr>
 8009ab8:	b138      	cbz	r0, 8009aca <_vfiprintf_r+0x176>
 8009aba:	9b04      	ldr	r3, [sp, #16]
 8009abc:	eba0 000a 	sub.w	r0, r0, sl
 8009ac0:	2240      	movs	r2, #64	@ 0x40
 8009ac2:	4082      	lsls	r2, r0
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	3401      	adds	r4, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ace:	4829      	ldr	r0, [pc, #164]	@ (8009b74 <_vfiprintf_r+0x220>)
 8009ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ad4:	2206      	movs	r2, #6
 8009ad6:	f7f6 fb83 	bl	80001e0 <memchr>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d03f      	beq.n	8009b5e <_vfiprintf_r+0x20a>
 8009ade:	4b26      	ldr	r3, [pc, #152]	@ (8009b78 <_vfiprintf_r+0x224>)
 8009ae0:	bb1b      	cbnz	r3, 8009b2a <_vfiprintf_r+0x1d6>
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	3307      	adds	r3, #7
 8009ae6:	f023 0307 	bic.w	r3, r3, #7
 8009aea:	3308      	adds	r3, #8
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af0:	443b      	add	r3, r7
 8009af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009af4:	e76a      	b.n	80099cc <_vfiprintf_r+0x78>
 8009af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009afa:	460c      	mov	r4, r1
 8009afc:	2001      	movs	r0, #1
 8009afe:	e7a8      	b.n	8009a52 <_vfiprintf_r+0xfe>
 8009b00:	2300      	movs	r3, #0
 8009b02:	3401      	adds	r4, #1
 8009b04:	9305      	str	r3, [sp, #20]
 8009b06:	4619      	mov	r1, r3
 8009b08:	f04f 0c0a 	mov.w	ip, #10
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b12:	3a30      	subs	r2, #48	@ 0x30
 8009b14:	2a09      	cmp	r2, #9
 8009b16:	d903      	bls.n	8009b20 <_vfiprintf_r+0x1cc>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0c6      	beq.n	8009aaa <_vfiprintf_r+0x156>
 8009b1c:	9105      	str	r1, [sp, #20]
 8009b1e:	e7c4      	b.n	8009aaa <_vfiprintf_r+0x156>
 8009b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b24:	4604      	mov	r4, r0
 8009b26:	2301      	movs	r3, #1
 8009b28:	e7f0      	b.n	8009b0c <_vfiprintf_r+0x1b8>
 8009b2a:	ab03      	add	r3, sp, #12
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	462a      	mov	r2, r5
 8009b30:	4b12      	ldr	r3, [pc, #72]	@ (8009b7c <_vfiprintf_r+0x228>)
 8009b32:	a904      	add	r1, sp, #16
 8009b34:	4630      	mov	r0, r6
 8009b36:	f3af 8000 	nop.w
 8009b3a:	4607      	mov	r7, r0
 8009b3c:	1c78      	adds	r0, r7, #1
 8009b3e:	d1d6      	bne.n	8009aee <_vfiprintf_r+0x19a>
 8009b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b42:	07d9      	lsls	r1, r3, #31
 8009b44:	d405      	bmi.n	8009b52 <_vfiprintf_r+0x1fe>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	059a      	lsls	r2, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_vfiprintf_r+0x1fe>
 8009b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b4e:	f7ff fdcf 	bl	80096f0 <__retarget_lock_release_recursive>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	065b      	lsls	r3, r3, #25
 8009b56:	f53f af1f 	bmi.w	8009998 <_vfiprintf_r+0x44>
 8009b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b5c:	e71e      	b.n	800999c <_vfiprintf_r+0x48>
 8009b5e:	ab03      	add	r3, sp, #12
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	462a      	mov	r2, r5
 8009b64:	4b05      	ldr	r3, [pc, #20]	@ (8009b7c <_vfiprintf_r+0x228>)
 8009b66:	a904      	add	r1, sp, #16
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f879 	bl	8009c60 <_printf_i>
 8009b6e:	e7e4      	b.n	8009b3a <_vfiprintf_r+0x1e6>
 8009b70:	0800a3bc 	.word	0x0800a3bc
 8009b74:	0800a3c6 	.word	0x0800a3c6
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	0800992f 	.word	0x0800992f
 8009b80:	0800a3c2 	.word	0x0800a3c2

08009b84 <_printf_common>:
 8009b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b88:	4616      	mov	r6, r2
 8009b8a:	4698      	mov	r8, r3
 8009b8c:	688a      	ldr	r2, [r1, #8]
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bfb8      	it	lt
 8009b98:	4613      	movlt	r3, r2
 8009b9a:	6033      	str	r3, [r6, #0]
 8009b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	b10a      	cbz	r2, 8009baa <_printf_common+0x26>
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	0699      	lsls	r1, r3, #26
 8009bae:	bf42      	ittt	mi
 8009bb0:	6833      	ldrmi	r3, [r6, #0]
 8009bb2:	3302      	addmi	r3, #2
 8009bb4:	6033      	strmi	r3, [r6, #0]
 8009bb6:	6825      	ldr	r5, [r4, #0]
 8009bb8:	f015 0506 	ands.w	r5, r5, #6
 8009bbc:	d106      	bne.n	8009bcc <_printf_common+0x48>
 8009bbe:	f104 0a19 	add.w	sl, r4, #25
 8009bc2:	68e3      	ldr	r3, [r4, #12]
 8009bc4:	6832      	ldr	r2, [r6, #0]
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	dc26      	bgt.n	8009c1a <_printf_common+0x96>
 8009bcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	3b00      	subs	r3, #0
 8009bd4:	bf18      	it	ne
 8009bd6:	2301      	movne	r3, #1
 8009bd8:	0692      	lsls	r2, r2, #26
 8009bda:	d42b      	bmi.n	8009c34 <_printf_common+0xb0>
 8009bdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009be0:	4641      	mov	r1, r8
 8009be2:	4638      	mov	r0, r7
 8009be4:	47c8      	blx	r9
 8009be6:	3001      	adds	r0, #1
 8009be8:	d01e      	beq.n	8009c28 <_printf_common+0xa4>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	6922      	ldr	r2, [r4, #16]
 8009bee:	f003 0306 	and.w	r3, r3, #6
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	bf02      	ittt	eq
 8009bf6:	68e5      	ldreq	r5, [r4, #12]
 8009bf8:	6833      	ldreq	r3, [r6, #0]
 8009bfa:	1aed      	subeq	r5, r5, r3
 8009bfc:	68a3      	ldr	r3, [r4, #8]
 8009bfe:	bf0c      	ite	eq
 8009c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c04:	2500      	movne	r5, #0
 8009c06:	4293      	cmp	r3, r2
 8009c08:	bfc4      	itt	gt
 8009c0a:	1a9b      	subgt	r3, r3, r2
 8009c0c:	18ed      	addgt	r5, r5, r3
 8009c0e:	2600      	movs	r6, #0
 8009c10:	341a      	adds	r4, #26
 8009c12:	42b5      	cmp	r5, r6
 8009c14:	d11a      	bne.n	8009c4c <_printf_common+0xc8>
 8009c16:	2000      	movs	r0, #0
 8009c18:	e008      	b.n	8009c2c <_printf_common+0xa8>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4638      	mov	r0, r7
 8009c22:	47c8      	blx	r9
 8009c24:	3001      	adds	r0, #1
 8009c26:	d103      	bne.n	8009c30 <_printf_common+0xac>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c30:	3501      	adds	r5, #1
 8009c32:	e7c6      	b.n	8009bc2 <_printf_common+0x3e>
 8009c34:	18e1      	adds	r1, r4, r3
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	2030      	movs	r0, #48	@ 0x30
 8009c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c3e:	4422      	add	r2, r4
 8009c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c48:	3302      	adds	r3, #2
 8009c4a:	e7c7      	b.n	8009bdc <_printf_common+0x58>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4622      	mov	r2, r4
 8009c50:	4641      	mov	r1, r8
 8009c52:	4638      	mov	r0, r7
 8009c54:	47c8      	blx	r9
 8009c56:	3001      	adds	r0, #1
 8009c58:	d0e6      	beq.n	8009c28 <_printf_common+0xa4>
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	e7d9      	b.n	8009c12 <_printf_common+0x8e>
	...

08009c60 <_printf_i>:
 8009c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	7e0f      	ldrb	r7, [r1, #24]
 8009c66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c68:	2f78      	cmp	r7, #120	@ 0x78
 8009c6a:	4691      	mov	r9, r2
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	469a      	mov	sl, r3
 8009c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c76:	d807      	bhi.n	8009c88 <_printf_i+0x28>
 8009c78:	2f62      	cmp	r7, #98	@ 0x62
 8009c7a:	d80a      	bhi.n	8009c92 <_printf_i+0x32>
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	f000 80d1 	beq.w	8009e24 <_printf_i+0x1c4>
 8009c82:	2f58      	cmp	r7, #88	@ 0x58
 8009c84:	f000 80b8 	beq.w	8009df8 <_printf_i+0x198>
 8009c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c90:	e03a      	b.n	8009d08 <_printf_i+0xa8>
 8009c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c96:	2b15      	cmp	r3, #21
 8009c98:	d8f6      	bhi.n	8009c88 <_printf_i+0x28>
 8009c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009ca0 <_printf_i+0x40>)
 8009c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009d0d 	.word	0x08009d0d
 8009ca8:	08009c89 	.word	0x08009c89
 8009cac:	08009c89 	.word	0x08009c89
 8009cb0:	08009c89 	.word	0x08009c89
 8009cb4:	08009c89 	.word	0x08009c89
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c89 	.word	0x08009c89
 8009cc0:	08009c89 	.word	0x08009c89
 8009cc4:	08009c89 	.word	0x08009c89
 8009cc8:	08009c89 	.word	0x08009c89
 8009ccc:	08009e0b 	.word	0x08009e0b
 8009cd0:	08009d37 	.word	0x08009d37
 8009cd4:	08009dc5 	.word	0x08009dc5
 8009cd8:	08009c89 	.word	0x08009c89
 8009cdc:	08009c89 	.word	0x08009c89
 8009ce0:	08009e2d 	.word	0x08009e2d
 8009ce4:	08009c89 	.word	0x08009c89
 8009ce8:	08009d37 	.word	0x08009d37
 8009cec:	08009c89 	.word	0x08009c89
 8009cf0:	08009c89 	.word	0x08009c89
 8009cf4:	08009dcd 	.word	0x08009dcd
 8009cf8:	6833      	ldr	r3, [r6, #0]
 8009cfa:	1d1a      	adds	r2, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6032      	str	r2, [r6, #0]
 8009d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e09c      	b.n	8009e46 <_printf_i+0x1e6>
 8009d0c:	6833      	ldr	r3, [r6, #0]
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	1d19      	adds	r1, r3, #4
 8009d12:	6031      	str	r1, [r6, #0]
 8009d14:	0606      	lsls	r6, r0, #24
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0xbc>
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	e003      	b.n	8009d24 <_printf_i+0xc4>
 8009d1c:	0645      	lsls	r5, r0, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0xb8>
 8009d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	da03      	bge.n	8009d30 <_printf_i+0xd0>
 8009d28:	232d      	movs	r3, #45	@ 0x2d
 8009d2a:	426d      	negs	r5, r5
 8009d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d30:	4858      	ldr	r0, [pc, #352]	@ (8009e94 <_printf_i+0x234>)
 8009d32:	230a      	movs	r3, #10
 8009d34:	e011      	b.n	8009d5a <_printf_i+0xfa>
 8009d36:	6821      	ldr	r1, [r4, #0]
 8009d38:	6833      	ldr	r3, [r6, #0]
 8009d3a:	0608      	lsls	r0, r1, #24
 8009d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d40:	d402      	bmi.n	8009d48 <_printf_i+0xe8>
 8009d42:	0649      	lsls	r1, r1, #25
 8009d44:	bf48      	it	mi
 8009d46:	b2ad      	uxthmi	r5, r5
 8009d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d4a:	4852      	ldr	r0, [pc, #328]	@ (8009e94 <_printf_i+0x234>)
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	bf14      	ite	ne
 8009d50:	230a      	movne	r3, #10
 8009d52:	2308      	moveq	r3, #8
 8009d54:	2100      	movs	r1, #0
 8009d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d5a:	6866      	ldr	r6, [r4, #4]
 8009d5c:	60a6      	str	r6, [r4, #8]
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	db05      	blt.n	8009d6e <_printf_i+0x10e>
 8009d62:	6821      	ldr	r1, [r4, #0]
 8009d64:	432e      	orrs	r6, r5
 8009d66:	f021 0104 	bic.w	r1, r1, #4
 8009d6a:	6021      	str	r1, [r4, #0]
 8009d6c:	d04b      	beq.n	8009e06 <_printf_i+0x1a6>
 8009d6e:	4616      	mov	r6, r2
 8009d70:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d74:	fb03 5711 	mls	r7, r3, r1, r5
 8009d78:	5dc7      	ldrb	r7, [r0, r7]
 8009d7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d7e:	462f      	mov	r7, r5
 8009d80:	42bb      	cmp	r3, r7
 8009d82:	460d      	mov	r5, r1
 8009d84:	d9f4      	bls.n	8009d70 <_printf_i+0x110>
 8009d86:	2b08      	cmp	r3, #8
 8009d88:	d10b      	bne.n	8009da2 <_printf_i+0x142>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	07df      	lsls	r7, r3, #31
 8009d8e:	d508      	bpl.n	8009da2 <_printf_i+0x142>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	6861      	ldr	r1, [r4, #4]
 8009d94:	4299      	cmp	r1, r3
 8009d96:	bfde      	ittt	le
 8009d98:	2330      	movle	r3, #48	@ 0x30
 8009d9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009da2:	1b92      	subs	r2, r2, r6
 8009da4:	6122      	str	r2, [r4, #16]
 8009da6:	f8cd a000 	str.w	sl, [sp]
 8009daa:	464b      	mov	r3, r9
 8009dac:	aa03      	add	r2, sp, #12
 8009dae:	4621      	mov	r1, r4
 8009db0:	4640      	mov	r0, r8
 8009db2:	f7ff fee7 	bl	8009b84 <_printf_common>
 8009db6:	3001      	adds	r0, #1
 8009db8:	d14a      	bne.n	8009e50 <_printf_i+0x1f0>
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbe:	b004      	add	sp, #16
 8009dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	f043 0320 	orr.w	r3, r3, #32
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	4832      	ldr	r0, [pc, #200]	@ (8009e98 <_printf_i+0x238>)
 8009dce:	2778      	movs	r7, #120	@ 0x78
 8009dd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	6831      	ldr	r1, [r6, #0]
 8009dd8:	061f      	lsls	r7, r3, #24
 8009dda:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dde:	d402      	bmi.n	8009de6 <_printf_i+0x186>
 8009de0:	065f      	lsls	r7, r3, #25
 8009de2:	bf48      	it	mi
 8009de4:	b2ad      	uxthmi	r5, r5
 8009de6:	6031      	str	r1, [r6, #0]
 8009de8:	07d9      	lsls	r1, r3, #31
 8009dea:	bf44      	itt	mi
 8009dec:	f043 0320 	orrmi.w	r3, r3, #32
 8009df0:	6023      	strmi	r3, [r4, #0]
 8009df2:	b11d      	cbz	r5, 8009dfc <_printf_i+0x19c>
 8009df4:	2310      	movs	r3, #16
 8009df6:	e7ad      	b.n	8009d54 <_printf_i+0xf4>
 8009df8:	4826      	ldr	r0, [pc, #152]	@ (8009e94 <_printf_i+0x234>)
 8009dfa:	e7e9      	b.n	8009dd0 <_printf_i+0x170>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	f023 0320 	bic.w	r3, r3, #32
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	e7f6      	b.n	8009df4 <_printf_i+0x194>
 8009e06:	4616      	mov	r6, r2
 8009e08:	e7bd      	b.n	8009d86 <_printf_i+0x126>
 8009e0a:	6833      	ldr	r3, [r6, #0]
 8009e0c:	6825      	ldr	r5, [r4, #0]
 8009e0e:	6961      	ldr	r1, [r4, #20]
 8009e10:	1d18      	adds	r0, r3, #4
 8009e12:	6030      	str	r0, [r6, #0]
 8009e14:	062e      	lsls	r6, r5, #24
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	d501      	bpl.n	8009e1e <_printf_i+0x1be>
 8009e1a:	6019      	str	r1, [r3, #0]
 8009e1c:	e002      	b.n	8009e24 <_printf_i+0x1c4>
 8009e1e:	0668      	lsls	r0, r5, #25
 8009e20:	d5fb      	bpl.n	8009e1a <_printf_i+0x1ba>
 8009e22:	8019      	strh	r1, [r3, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	4616      	mov	r6, r2
 8009e2a:	e7bc      	b.n	8009da6 <_printf_i+0x146>
 8009e2c:	6833      	ldr	r3, [r6, #0]
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	6032      	str	r2, [r6, #0]
 8009e32:	681e      	ldr	r6, [r3, #0]
 8009e34:	6862      	ldr	r2, [r4, #4]
 8009e36:	2100      	movs	r1, #0
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7f6 f9d1 	bl	80001e0 <memchr>
 8009e3e:	b108      	cbz	r0, 8009e44 <_printf_i+0x1e4>
 8009e40:	1b80      	subs	r0, r0, r6
 8009e42:	6060      	str	r0, [r4, #4]
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e4e:	e7aa      	b.n	8009da6 <_printf_i+0x146>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	4632      	mov	r2, r6
 8009e54:	4649      	mov	r1, r9
 8009e56:	4640      	mov	r0, r8
 8009e58:	47d0      	blx	sl
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d0ad      	beq.n	8009dba <_printf_i+0x15a>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	079b      	lsls	r3, r3, #30
 8009e62:	d413      	bmi.n	8009e8c <_printf_i+0x22c>
 8009e64:	68e0      	ldr	r0, [r4, #12]
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	4298      	cmp	r0, r3
 8009e6a:	bfb8      	it	lt
 8009e6c:	4618      	movlt	r0, r3
 8009e6e:	e7a6      	b.n	8009dbe <_printf_i+0x15e>
 8009e70:	2301      	movs	r3, #1
 8009e72:	4632      	mov	r2, r6
 8009e74:	4649      	mov	r1, r9
 8009e76:	4640      	mov	r0, r8
 8009e78:	47d0      	blx	sl
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d09d      	beq.n	8009dba <_printf_i+0x15a>
 8009e7e:	3501      	adds	r5, #1
 8009e80:	68e3      	ldr	r3, [r4, #12]
 8009e82:	9903      	ldr	r1, [sp, #12]
 8009e84:	1a5b      	subs	r3, r3, r1
 8009e86:	42ab      	cmp	r3, r5
 8009e88:	dcf2      	bgt.n	8009e70 <_printf_i+0x210>
 8009e8a:	e7eb      	b.n	8009e64 <_printf_i+0x204>
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	f104 0619 	add.w	r6, r4, #25
 8009e92:	e7f5      	b.n	8009e80 <_printf_i+0x220>
 8009e94:	0800a3cd 	.word	0x0800a3cd
 8009e98:	0800a3de 	.word	0x0800a3de

08009e9c <__sflush_r>:
 8009e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea4:	0716      	lsls	r6, r2, #28
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	d454      	bmi.n	8009f56 <__sflush_r+0xba>
 8009eac:	684b      	ldr	r3, [r1, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc02      	bgt.n	8009eb8 <__sflush_r+0x1c>
 8009eb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dd48      	ble.n	8009f4a <__sflush_r+0xae>
 8009eb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d045      	beq.n	8009f4a <__sflush_r+0xae>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ec4:	682f      	ldr	r7, [r5, #0]
 8009ec6:	6a21      	ldr	r1, [r4, #32]
 8009ec8:	602b      	str	r3, [r5, #0]
 8009eca:	d030      	beq.n	8009f2e <__sflush_r+0x92>
 8009ecc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	0759      	lsls	r1, r3, #29
 8009ed2:	d505      	bpl.n	8009ee0 <__sflush_r+0x44>
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	1ad2      	subs	r2, r2, r3
 8009ed8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009eda:	b10b      	cbz	r3, 8009ee0 <__sflush_r+0x44>
 8009edc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ede:	1ad2      	subs	r2, r2, r3
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ee4:	6a21      	ldr	r1, [r4, #32]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b0      	blx	r6
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	d106      	bne.n	8009efe <__sflush_r+0x62>
 8009ef0:	6829      	ldr	r1, [r5, #0]
 8009ef2:	291d      	cmp	r1, #29
 8009ef4:	d82b      	bhi.n	8009f4e <__sflush_r+0xb2>
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8009fa0 <__sflush_r+0x104>)
 8009ef8:	40ca      	lsrs	r2, r1
 8009efa:	07d6      	lsls	r6, r2, #31
 8009efc:	d527      	bpl.n	8009f4e <__sflush_r+0xb2>
 8009efe:	2200      	movs	r2, #0
 8009f00:	6062      	str	r2, [r4, #4]
 8009f02:	04d9      	lsls	r1, r3, #19
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	d504      	bpl.n	8009f14 <__sflush_r+0x78>
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	d101      	bne.n	8009f12 <__sflush_r+0x76>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	b903      	cbnz	r3, 8009f14 <__sflush_r+0x78>
 8009f12:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	b1b9      	cbz	r1, 8009f4a <__sflush_r+0xae>
 8009f1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f1e:	4299      	cmp	r1, r3
 8009f20:	d002      	beq.n	8009f28 <__sflush_r+0x8c>
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7ff fbf4 	bl	8009710 <_free_r>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f2c:	e00d      	b.n	8009f4a <__sflush_r+0xae>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b0      	blx	r6
 8009f34:	4602      	mov	r2, r0
 8009f36:	1c50      	adds	r0, r2, #1
 8009f38:	d1c9      	bne.n	8009ece <__sflush_r+0x32>
 8009f3a:	682b      	ldr	r3, [r5, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0c6      	beq.n	8009ece <__sflush_r+0x32>
 8009f40:	2b1d      	cmp	r3, #29
 8009f42:	d001      	beq.n	8009f48 <__sflush_r+0xac>
 8009f44:	2b16      	cmp	r3, #22
 8009f46:	d11e      	bne.n	8009f86 <__sflush_r+0xea>
 8009f48:	602f      	str	r7, [r5, #0]
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e022      	b.n	8009f94 <__sflush_r+0xf8>
 8009f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f52:	b21b      	sxth	r3, r3
 8009f54:	e01b      	b.n	8009f8e <__sflush_r+0xf2>
 8009f56:	690f      	ldr	r7, [r1, #16]
 8009f58:	2f00      	cmp	r7, #0
 8009f5a:	d0f6      	beq.n	8009f4a <__sflush_r+0xae>
 8009f5c:	0793      	lsls	r3, r2, #30
 8009f5e:	680e      	ldr	r6, [r1, #0]
 8009f60:	bf08      	it	eq
 8009f62:	694b      	ldreq	r3, [r1, #20]
 8009f64:	600f      	str	r7, [r1, #0]
 8009f66:	bf18      	it	ne
 8009f68:	2300      	movne	r3, #0
 8009f6a:	eba6 0807 	sub.w	r8, r6, r7
 8009f6e:	608b      	str	r3, [r1, #8]
 8009f70:	f1b8 0f00 	cmp.w	r8, #0
 8009f74:	dde9      	ble.n	8009f4a <__sflush_r+0xae>
 8009f76:	6a21      	ldr	r1, [r4, #32]
 8009f78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f7a:	4643      	mov	r3, r8
 8009f7c:	463a      	mov	r2, r7
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b0      	blx	r6
 8009f82:	2800      	cmp	r0, #0
 8009f84:	dc08      	bgt.n	8009f98 <__sflush_r+0xfc>
 8009f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f8e:	81a3      	strh	r3, [r4, #12]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f98:	4407      	add	r7, r0
 8009f9a:	eba8 0800 	sub.w	r8, r8, r0
 8009f9e:	e7e7      	b.n	8009f70 <__sflush_r+0xd4>
 8009fa0:	20400001 	.word	0x20400001

08009fa4 <_fflush_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b913      	cbnz	r3, 8009fb4 <_fflush_r+0x10>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	b118      	cbz	r0, 8009fbe <_fflush_r+0x1a>
 8009fb6:	6a03      	ldr	r3, [r0, #32]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <_fflush_r+0x1a>
 8009fba:	f7ff f9a1 	bl	8009300 <__sinit>
 8009fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f3      	beq.n	8009fae <_fflush_r+0xa>
 8009fc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fc8:	07d0      	lsls	r0, r2, #31
 8009fca:	d404      	bmi.n	8009fd6 <_fflush_r+0x32>
 8009fcc:	0599      	lsls	r1, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_fflush_r+0x32>
 8009fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fd2:	f7ff fb8c 	bl	80096ee <__retarget_lock_acquire_recursive>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f7ff ff5f 	bl	8009e9c <__sflush_r>
 8009fde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fe0:	07da      	lsls	r2, r3, #31
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	d4e4      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	059b      	lsls	r3, r3, #22
 8009fea:	d4e1      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fee:	f7ff fb7f 	bl	80096f0 <__retarget_lock_release_recursive>
 8009ff2:	e7dd      	b.n	8009fb0 <_fflush_r+0xc>

08009ff4 <__swhatbuf_r>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	b096      	sub	sp, #88	@ 0x58
 800a000:	4615      	mov	r5, r2
 800a002:	461e      	mov	r6, r3
 800a004:	da0d      	bge.n	800a022 <__swhatbuf_r+0x2e>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a00c:	f04f 0100 	mov.w	r1, #0
 800a010:	bf14      	ite	ne
 800a012:	2340      	movne	r3, #64	@ 0x40
 800a014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a018:	2000      	movs	r0, #0
 800a01a:	6031      	str	r1, [r6, #0]
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	b016      	add	sp, #88	@ 0x58
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	466a      	mov	r2, sp
 800a024:	f000 f848 	bl	800a0b8 <_fstat_r>
 800a028:	2800      	cmp	r0, #0
 800a02a:	dbec      	blt.n	800a006 <__swhatbuf_r+0x12>
 800a02c:	9901      	ldr	r1, [sp, #4]
 800a02e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a036:	4259      	negs	r1, r3
 800a038:	4159      	adcs	r1, r3
 800a03a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a03e:	e7eb      	b.n	800a018 <__swhatbuf_r+0x24>

0800a040 <__smakebuf_r>:
 800a040:	898b      	ldrh	r3, [r1, #12]
 800a042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a044:	079d      	lsls	r5, r3, #30
 800a046:	4606      	mov	r6, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	d507      	bpl.n	800a05c <__smakebuf_r+0x1c>
 800a04c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2301      	movs	r3, #1
 800a056:	6163      	str	r3, [r4, #20]
 800a058:	b003      	add	sp, #12
 800a05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05c:	ab01      	add	r3, sp, #4
 800a05e:	466a      	mov	r2, sp
 800a060:	f7ff ffc8 	bl	8009ff4 <__swhatbuf_r>
 800a064:	9f00      	ldr	r7, [sp, #0]
 800a066:	4605      	mov	r5, r0
 800a068:	4639      	mov	r1, r7
 800a06a:	4630      	mov	r0, r6
 800a06c:	f7ff fbbc 	bl	80097e8 <_malloc_r>
 800a070:	b948      	cbnz	r0, 800a086 <__smakebuf_r+0x46>
 800a072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a076:	059a      	lsls	r2, r3, #22
 800a078:	d4ee      	bmi.n	800a058 <__smakebuf_r+0x18>
 800a07a:	f023 0303 	bic.w	r3, r3, #3
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	e7e2      	b.n	800a04c <__smakebuf_r+0xc>
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	6020      	str	r0, [r4, #0]
 800a08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a08e:	81a3      	strh	r3, [r4, #12]
 800a090:	9b01      	ldr	r3, [sp, #4]
 800a092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a096:	b15b      	cbz	r3, 800a0b0 <__smakebuf_r+0x70>
 800a098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a09c:	4630      	mov	r0, r6
 800a09e:	f000 f81d 	bl	800a0dc <_isatty_r>
 800a0a2:	b128      	cbz	r0, 800a0b0 <__smakebuf_r+0x70>
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	431d      	orrs	r5, r3
 800a0b4:	81a5      	strh	r5, [r4, #12]
 800a0b6:	e7cf      	b.n	800a058 <__smakebuf_r+0x18>

0800a0b8 <_fstat_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d07      	ldr	r5, [pc, #28]	@ (800a0d8 <_fstat_r+0x20>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	602b      	str	r3, [r5, #0]
 800a0c6:	f7f6 fe90 	bl	8000dea <_fstat>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	d102      	bne.n	800a0d4 <_fstat_r+0x1c>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	b103      	cbz	r3, 800a0d4 <_fstat_r+0x1c>
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2001972c 	.word	0x2001972c

0800a0dc <_isatty_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d06      	ldr	r5, [pc, #24]	@ (800a0f8 <_isatty_r+0x1c>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	602b      	str	r3, [r5, #0]
 800a0e8:	f7f6 fe8f 	bl	8000e0a <_isatty>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_isatty_r+0x1a>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_isatty_r+0x1a>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	2001972c 	.word	0x2001972c

0800a0fc <_sbrk_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d06      	ldr	r5, [pc, #24]	@ (800a118 <_sbrk_r+0x1c>)
 800a100:	2300      	movs	r3, #0
 800a102:	4604      	mov	r4, r0
 800a104:	4608      	mov	r0, r1
 800a106:	602b      	str	r3, [r5, #0]
 800a108:	f7f6 fe98 	bl	8000e3c <_sbrk>
 800a10c:	1c43      	adds	r3, r0, #1
 800a10e:	d102      	bne.n	800a116 <_sbrk_r+0x1a>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b103      	cbz	r3, 800a116 <_sbrk_r+0x1a>
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	2001972c 	.word	0x2001972c

0800a11c <_init>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr

0800a128 <_fini>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	bf00      	nop
 800a12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12e:	bc08      	pop	{r3}
 800a130:	469e      	mov	lr, r3
 800a132:	4770      	bx	lr
